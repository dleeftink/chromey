/*! For license information please see main.js.LICENSE.txt */
var chromey;(()=>{var t={9282:(t,e,r)=>{"use strict";var n=r(1624),i=r(5108);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}var a,s,u=r(2136).codes,c=u.ERR_AMBIGUOUS_ARGUMENT,l=u.ERR_INVALID_ARG_TYPE,f=u.ERR_INVALID_ARG_VALUE,h=u.ERR_INVALID_RETURN_VALUE,d=u.ERR_MISSING_ARGS,p=r(5961),y=r(9539).inspect,g=r(9539).types,_=g.isPromise,b=g.isRegExp,m=Object.assign?Object.assign:r(8091).assign,v=Object.is?Object.is:r(609);function w(){var t=r(9158);a=t.isDeepEqual,s=t.isDeepStrictEqual}new Map;var E=!1,S=t.exports=T,R={};function k(t){if(t.message instanceof Error)throw t.message;throw new p(t)}function O(t,e,r,n){if(!r){var i=!1;if(0===e)i=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var o=new p({actual:r,expected:!0,message:n,operator:"==",stackStartFn:t});throw o.generatedMessage=i,o}}function T(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];O.apply(void 0,[T,e.length].concat(e))}S.fail=function t(e,r,o,a,s){var u,c=arguments.length;if(0===c?u="Failed":1===c?(o=e,e=void 0):(!1===E&&(E=!0,(n.emitWarning?n.emitWarning:i.warn.bind(i))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")),2===c&&(a="!=")),o instanceof Error)throw o;var l={actual:e,expected:r,operator:void 0===a?"fail":a,stackStartFn:s||t};void 0!==o&&(l.message=o);var f=new p(l);throw u&&(f.message=u,f.generatedMessage=!0),f},S.AssertionError=p,S.ok=T,S.equal=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");e!=r&&k({actual:e,expected:r,message:n,operator:"==",stackStartFn:t})},S.notEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");e==r&&k({actual:e,expected:r,message:n,operator:"!=",stackStartFn:t})},S.deepEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&w(),a(e,r)||k({actual:e,expected:r,message:n,operator:"deepEqual",stackStartFn:t})},S.notDeepEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&w(),a(e,r)&&k({actual:e,expected:r,message:n,operator:"notDeepEqual",stackStartFn:t})},S.deepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&w(),s(e,r)||k({actual:e,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:t})},S.notDeepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");void 0===a&&w(),s(e,r)&&k({actual:e,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:t})},S.strictEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");v(e,r)||k({actual:e,expected:r,message:n,operator:"strictEqual",stackStartFn:t})},S.notStrictEqual=function t(e,r,n){if(arguments.length<2)throw new d("actual","expected");v(e,r)&&k({actual:e,expected:r,message:n,operator:"notStrictEqual",stackStartFn:t})};var A=function t(e,r,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r.forEach((function(t){t in e&&(void 0!==n&&"string"==typeof n[t]&&b(e[t])&&e[t].test(n[t])?i[t]=n[t]:i[t]=e[t])}))};function I(t,e,r,n){if("function"!=typeof e){if(b(e))return e.test(t);if(2===arguments.length)throw new l("expected",["Function","RegExp"],e);if("object"!==o(t)||null===t){var i=new p({actual:t,expected:e,message:r,operator:"deepStrictEqual",stackStartFn:n});throw i.operator=n.name,i}var u=Object.keys(e);if(e instanceof Error)u.push("name","message");else if(0===u.length)throw new f("error",e,"may not be an empty object");return void 0===a&&w(),u.forEach((function(i){"string"==typeof t[i]&&b(e[i])&&e[i].test(t[i])||function(t,e,r,n,i,o){if(!(r in t)||!s(t[r],e[r])){if(!n){var a=new A(t,i),u=new A(e,i,t),c=new p({actual:a,expected:u,operator:"deepStrictEqual",stackStartFn:o});throw c.actual=t,c.expected=e,c.operator=o.name,c}k({actual:t,expected:e,message:n,operator:o.name,stackStartFn:o})}}(t,e,i,r,u,n)})),!0}return void 0!==e.prototype&&t instanceof e||!Error.isPrototypeOf(e)&&!0===e.call({},t)}function L(t){if("function"!=typeof t)throw new l("fn","Function",t);try{t()}catch(t){return t}return R}function x(t){return _(t)||null!==t&&"object"===o(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function N(t){return Promise.resolve().then((function(){var e;if("function"==typeof t){if(!x(e=t()))throw new h("instance of Promise","promiseFn",e)}else{if(!x(t))throw new l("promiseFn",["Function","Promise"],t);e=t}return Promise.resolve().then((function(){return e})).then((function(){return R})).catch((function(t){return t}))}))}function P(t,e,r,n){if("string"==typeof r){if(4===arguments.length)throw new l("error",["Object","Error","Function","RegExp"],r);if("object"===o(e)&&null!==e){if(e.message===r)throw new c("error/message",'The error message "'.concat(e.message,'" is identical to the message.'))}else if(e===r)throw new c("error/message",'The error "'.concat(e,'" is identical to the message.'));n=r,r=void 0}else if(null!=r&&"object"!==o(r)&&"function"!=typeof r)throw new l("error",["Object","Error","Function","RegExp"],r);if(e===R){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=n?": ".concat(n):".";var a="rejects"===t.name?"rejection":"exception";k({actual:void 0,expected:r,operator:t.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:t})}if(r&&!I(e,r,n,t))throw e}function D(t,e,r,n){if(e!==R){if("string"==typeof r&&(n=r,r=void 0),!r||I(e,r)){var i=n?": ".concat(n):".",o="doesNotReject"===t.name?"rejection":"exception";k({actual:e,expected:r,operator:t.name,message:"Got unwanted ".concat(o).concat(i,"\n")+'Actual message: "'.concat(e&&e.message,'"'),stackStartFn:t})}throw e}}function F(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];O.apply(void 0,[F,e.length].concat(e))}S.throws=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];P.apply(void 0,[t,L(e)].concat(n))},S.rejects=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return N(e).then((function(e){return P.apply(void 0,[t,e].concat(n))}))},S.doesNotThrow=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];D.apply(void 0,[t,L(e)].concat(n))},S.doesNotReject=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return N(e).then((function(e){return D.apply(void 0,[t,e].concat(n))}))},S.ifError=function t(e){if(null!=e){var r="ifError got unwanted exception: ";"object"===o(e)&&"string"==typeof e.message?0===e.message.length&&e.constructor?r+=e.constructor.name:r+=e.message:r+=y(e);var n=new p({actual:e,expected:null,operator:"ifError",message:r,stackStartFn:t}),i=e.stack;if("string"==typeof i){var a=i.split("\n");a.shift();for(var s=n.stack.split("\n"),u=0;u<a.length;u++){var c=s.indexOf(a[u]);if(-1!==c){s=s.slice(0,c);break}}n.stack="".concat(s.join("\n"),"\n").concat(a.join("\n"))}throw n}},S.strict=m(F,S,{equal:S.strictEqual,deepEqual:S.deepStrictEqual,notEqual:S.notStrictEqual,notDeepEqual:S.notDeepStrictEqual}),S.strict.strict=S.strict},5961:(t,e,r)=>{"use strict";var n=r(1624);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e){return!e||"object"!==h(e)&&"function"!=typeof e?s(t):e}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t){var e="function"==typeof Map?new Map:void 0;return u=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return c(t,arguments,f(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),l(n,t)},u(t)}function c(t,e,r){return c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var i=new(Function.bind.apply(t,n));return r&&l(i,r.prototype),i},c.apply(null,arguments)}function l(t,e){return l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},l(t,e)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}var d=r(9539).inspect,p=r(2136).codes.ERR_INVALID_ARG_TYPE;function y(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}var g="",_="",b="",m="",v={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"},w=10;function E(t){var e=Object.keys(t),r=Object.create(Object.getPrototypeOf(t));return e.forEach((function(e){r[e]=t[e]})),Object.defineProperty(r,"message",{value:t.message}),r}function S(t){return d(t,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var R=function(t){function e(t){var r;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),"object"!==h(t)||null===t)throw new p("options","Object",t);var i=t.message,o=t.operator,u=t.stackStartFn,c=t.actual,l=t.expected,d=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=i)r=a(this,f(e).call(this,String(i)));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(g="[34m",_="[32m",m="[39m",b="[31m"):(g="",_="",m="",b="")),"object"===h(c)&&null!==c&&"object"===h(l)&&null!==l&&"stack"in c&&c instanceof Error&&"stack"in l&&l instanceof Error&&(c=E(c),l=E(l)),"deepStrictEqual"===o||"strictEqual"===o)r=a(this,f(e).call(this,function(t,e,r){var i="",o="",a=0,s="",u=!1,c=S(t),l=c.split("\n"),f=S(e).split("\n"),d=0,p="";if("strictEqual"===r&&"object"===h(t)&&"object"===h(e)&&null!==t&&null!==e&&(r="strictEqualObject"),1===l.length&&1===f.length&&l[0]!==f[0]){var E=l[0].length+f[0].length;if(E<=w){if(!("object"===h(t)&&null!==t||"object"===h(e)&&null!==e||0===t&&0===e))return"".concat(v[r],"\n\n")+"".concat(l[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==r&&E<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;l[0][d]===f[0][d];)d++;d>2&&(p="\n  ".concat(function(t,e){if(e=Math.floor(e),0==t.length||0==e)return"";var r=t.length*e;for(e=Math.floor(Math.log(e)/Math.log(2));e;)t+=t,e--;return t+t.substring(0,r-t.length)}(" ",d),"^"),d=0)}}for(var R=l[l.length-1],k=f[f.length-1];R===k&&(d++<2?s="\n  ".concat(R).concat(s):i=R,l.pop(),f.pop(),0!==l.length&&0!==f.length);)R=l[l.length-1],k=f[f.length-1];var O=Math.max(l.length,f.length);if(0===O){var T=c.split("\n");if(T.length>30)for(T[26]="".concat(g,"...").concat(m);T.length>27;)T.pop();return"".concat(v.notIdentical,"\n\n").concat(T.join("\n"),"\n")}d>3&&(s="\n".concat(g,"...").concat(m).concat(s),u=!0),""!==i&&(s="\n  ".concat(i).concat(s),i="");var A=0,I=v[r]+"\n".concat(_,"+ actual").concat(m," ").concat(b,"- expected").concat(m),L=" ".concat(g,"...").concat(m," Lines skipped");for(d=0;d<O;d++){var x=d-a;if(l.length<d+1)x>1&&d>2&&(x>4?(o+="\n".concat(g,"...").concat(m),u=!0):x>3&&(o+="\n  ".concat(f[d-2]),A++),o+="\n  ".concat(f[d-1]),A++),a=d,i+="\n".concat(b,"-").concat(m," ").concat(f[d]),A++;else if(f.length<d+1)x>1&&d>2&&(x>4?(o+="\n".concat(g,"...").concat(m),u=!0):x>3&&(o+="\n  ".concat(l[d-2]),A++),o+="\n  ".concat(l[d-1]),A++),a=d,o+="\n".concat(_,"+").concat(m," ").concat(l[d]),A++;else{var N=f[d],P=l[d],D=P!==N&&(!y(P,",")||P.slice(0,-1)!==N);D&&y(N,",")&&N.slice(0,-1)===P&&(D=!1,P+=","),D?(x>1&&d>2&&(x>4?(o+="\n".concat(g,"...").concat(m),u=!0):x>3&&(o+="\n  ".concat(l[d-2]),A++),o+="\n  ".concat(l[d-1]),A++),a=d,o+="\n".concat(_,"+").concat(m," ").concat(P),i+="\n".concat(b,"-").concat(m," ").concat(N),A+=2):(o+=i,i="",1!==x&&0!==d||(o+="\n  ".concat(P),A++))}if(A>20&&d<O-2)return"".concat(I).concat(L,"\n").concat(o,"\n").concat(g,"...").concat(m).concat(i,"\n")+"".concat(g,"...").concat(m)}return"".concat(I).concat(u?L:"","\n").concat(o).concat(i).concat(s).concat(p)}(c,l,o)));else if("notDeepStrictEqual"===o||"notStrictEqual"===o){var R=v[o],k=S(c).split("\n");if("notStrictEqual"===o&&"object"===h(c)&&null!==c&&(R=v.notStrictEqualObject),k.length>30)for(k[26]="".concat(g,"...").concat(m);k.length>27;)k.pop();r=1===k.length?a(this,f(e).call(this,"".concat(R," ").concat(k[0]))):a(this,f(e).call(this,"".concat(R,"\n\n").concat(k.join("\n"),"\n")))}else{var O=S(c),T="",A=v[o];"notDeepEqual"===o||"notEqual"===o?(O="".concat(v[o],"\n\n").concat(O)).length>1024&&(O="".concat(O.slice(0,1021),"...")):(T="".concat(S(l)),O.length>512&&(O="".concat(O.slice(0,509),"...")),T.length>512&&(T="".concat(T.slice(0,509),"...")),"deepEqual"===o||"equal"===o?O="".concat(A,"\n\n").concat(O,"\n\nshould equal\n\n"):T=" ".concat(o," ").concat(T)),r=a(this,f(e).call(this,"".concat(O).concat(T)))}return Error.stackTraceLimit=d,r.generatedMessage=!i,Object.defineProperty(s(r),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),r.code="ERR_ASSERTION",r.actual=c,r.expected=l,r.operator=o,Error.captureStackTrace&&Error.captureStackTrace(s(r),u),r.stack,r.name="AssertionError",a(r)}var r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,t),r=e,u=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:d.custom,value:function(t,e){return d(this,function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable})))),n.forEach((function(e){i(t,e,r[e])}))}return t}({},e,{customInspect:!1,depth:0}))}}],u&&o(r.prototype,u),e}(u(Error));t.exports=R},2136:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}function o(t,e){return o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},o(t,e)}var a,s,u={};function c(t,e,r){r||(r=Error);var a=function(r){function a(r,o,s){var u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),u=function(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}(this,i(a).call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,o,s))),u.code=t,u}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}(a,r),a}(r);u[t]=a}function l(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}c("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),c("ERR_INVALID_ARG_TYPE",(function(t,e,i){var o,s,u,c,f;if(void 0===a&&(a=r(9282)),a("string"==typeof t,"'name' must be a string"),"string"==typeof e&&(s="not ",e.substr(0,s.length)===s)?(o="must not be",e=e.replace(/^not /,"")):o="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))u="The ".concat(t," ").concat(o," ").concat(l(e,"type"));else{var h=("number"!=typeof f&&(f=0),f+".".length>(c=t).length||-1===c.indexOf(".",f)?"argument":"property");u='The "'.concat(t,'" ').concat(h," ").concat(o," ").concat(l(e,"type"))}return u+". Received type ".concat(n(i))}),TypeError),c("ERR_INVALID_ARG_VALUE",(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===s&&(s=r(9539));var i=s.inspect(e);return i.length>128&&(i="".concat(i.slice(0,128),"...")),"The argument '".concat(t,"' ").concat(n,". Received ").concat(i)}),TypeError,RangeError),c("ERR_INVALID_RETURN_VALUE",(function(t,e,r){var i;return i=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(t,' to be returned from the "').concat(e,'"')+" function but got ".concat(i,".")}),TypeError),c("ERR_MISSING_ARGS",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];void 0===a&&(a=r(9282)),a(e.length>0,"At least one arg needs to be specified");var i="The ",o=e.length;switch(e=e.map((function(t){return'"'.concat(t,'"')})),o){case 1:i+="".concat(e[0]," argument");break;case 2:i+="".concat(e[0]," and ").concat(e[1]," arguments");break;default:i+=e.slice(0,o-1).join(", "),i+=", and ".concat(e[o-1]," arguments")}return"".concat(i," must be specified")}),TypeError),t.exports.codes=u},9158:(t,e,r)=>{"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw o}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var o=void 0!==/a/g.flags,a=function(t){var e=[];return t.forEach((function(t){return e.push(t)})),e},s=function(t){var e=[];return t.forEach((function(t,r){return e.push([r,t])})),e},u=Object.is?Object.is:r(609),c=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},l=Number.isNaN?Number.isNaN:r(360);function f(t){return t.call.bind(t)}var h=f(Object.prototype.hasOwnProperty),d=f(Object.prototype.propertyIsEnumerable),p=f(Object.prototype.toString),y=r(9539).types,g=y.isAnyArrayBuffer,_=y.isArrayBufferView,b=y.isDate,m=y.isMap,v=y.isRegExp,w=y.isSet,E=y.isNativeError,S=y.isBoxedPrimitive,R=y.isNumberObject,k=y.isStringObject,O=y.isBooleanObject,T=y.isBigIntObject,A=y.isSymbolObject,I=y.isFloat32Array,L=y.isFloat64Array;function x(t){if(0===t.length||t.length>10)return!0;for(var e=0;e<t.length;e++){var r=t.charCodeAt(e);if(r<48||r>57)return!0}return 10===t.length&&t>=Math.pow(2,32)}function N(t){return Object.keys(t).filter(x).concat(c(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))}function P(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0}var D=0,F=1,M=2,j=3;function C(t,e,r,n){if(t===e)return 0!==t||!r||u(t,e);if(r){if("object"!==i(t))return"number"==typeof t&&l(t)&&l(e);if("object"!==i(e)||null===t||null===e)return!1;if(Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1}else{if(null===t||"object"!==i(t))return(null===e||"object"!==i(e))&&t==e;if(null===e||"object"!==i(e))return!1}var a,s,c,f,h=p(t);if(h!==p(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;var d=N(t),y=N(e);return d.length===y.length&&B(t,e,r,n,F,d)}if("[object Object]"===h&&(!m(t)&&m(e)||!w(t)&&w(e)))return!1;if(b(t)){if(!b(e)||Date.prototype.getTime.call(t)!==Date.prototype.getTime.call(e))return!1}else if(v(t)){if(!v(e)||(c=t,f=e,!(o?c.source===f.source&&c.flags===f.flags:RegExp.prototype.toString.call(c)===RegExp.prototype.toString.call(f))))return!1}else if(E(t)||t instanceof Error){if(t.message!==e.message||t.name!==e.name)return!1}else{if(_(t)){if(r||!I(t)&&!L(t)){if(!function(t,e){return t.byteLength===e.byteLength&&0===P(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}(t,e))return!1}else if(!function(t,e){if(t.byteLength!==e.byteLength)return!1;for(var r=0;r<t.byteLength;r++)if(t[r]!==e[r])return!1;return!0}(t,e))return!1;var x=N(t),C=N(e);return x.length===C.length&&B(t,e,r,n,D,x)}if(w(t))return!(!w(e)||t.size!==e.size)&&B(t,e,r,n,M);if(m(t))return!(!m(e)||t.size!==e.size)&&B(t,e,r,n,j);if(g(t)){if(s=e,(a=t).byteLength!==s.byteLength||0!==P(new Uint8Array(a),new Uint8Array(s)))return!1}else if(S(t)&&!function(t,e){return R(t)?R(e)&&u(Number.prototype.valueOf.call(t),Number.prototype.valueOf.call(e)):k(t)?k(e)&&String.prototype.valueOf.call(t)===String.prototype.valueOf.call(e):O(t)?O(e)&&Boolean.prototype.valueOf.call(t)===Boolean.prototype.valueOf.call(e):T(t)?T(e)&&BigInt.prototype.valueOf.call(t)===BigInt.prototype.valueOf.call(e):A(e)&&Symbol.prototype.valueOf.call(t)===Symbol.prototype.valueOf.call(e)}(t,e))return!1}return B(t,e,r,n,D)}function U(t,e){return e.filter((function(e){return d(t,e)}))}function B(t,e,r,o,u,l){if(5===arguments.length){l=Object.keys(t);var f=Object.keys(e);if(l.length!==f.length)return!1}for(var p=0;p<l.length;p++)if(!h(e,l[p]))return!1;if(r&&5===arguments.length){var y=c(t);if(0!==y.length){var g=0;for(p=0;p<y.length;p++){var _=y[p];if(d(t,_)){if(!d(e,_))return!1;l.push(_),g++}else if(d(e,_))return!1}var b=c(e);if(y.length!==b.length&&U(e,b).length!==g)return!1}else{var m=c(e);if(0!==m.length&&0!==U(e,m).length)return!1}}if(0===l.length&&(u===D||u===F&&0===t.length||0===t.size))return!0;if(void 0===o)o={val1:new Map,val2:new Map,position:0};else{var v=o.val1.get(t);if(void 0!==v){var w=o.val2.get(e);if(void 0!==w)return v===w}o.position++}o.val1.set(t,o.position),o.val2.set(e,o.position);var E=function(t,e,r,o,u,c){var l=0;if(c===M){if(!function(t,e,r,n){for(var o=null,s=a(t),u=0;u<s.length;u++){var c=s[u];if("object"===i(c)&&null!==c)null===o&&(o=new Set),o.add(c);else if(!e.has(c)){if(r)return!1;if(!W(t,e,c))return!1;null===o&&(o=new Set),o.add(c)}}if(null!==o){for(var l=a(e),f=0;f<l.length;f++){var h=l[f];if("object"===i(h)&&null!==h){if(!z(o,h,r,n))return!1}else if(!r&&!t.has(h)&&!z(o,h,r,n))return!1}return 0===o.size}return!0}(t,e,r,u))return!1}else if(c===j){if(!function(t,e,r,o){for(var a=null,u=s(t),c=0;c<u.length;c++){var l=n(u[c],2),f=l[0],h=l[1];if("object"===i(f)&&null!==f)null===a&&(a=new Set),a.add(f);else{var d=e.get(f);if(void 0===d&&!e.has(f)||!C(h,d,r,o)){if(r)return!1;if(!H(t,e,f,h,o))return!1;null===a&&(a=new Set),a.add(f)}}}if(null!==a){for(var p=s(e),y=0;y<p.length;y++){var g=n(p[y],2),_=(f=g[0],g[1]);if("object"===i(f)&&null!==f){if(!G(a,t,f,_,r,o))return!1}else if(!(r||t.has(f)&&C(t.get(f),_,!1,o)||G(a,t,f,_,!1,o)))return!1}return 0===a.size}return!0}(t,e,r,u))return!1}else if(c===F)for(;l<t.length;l++){if(!h(t,l)){if(h(e,l))return!1;for(var f=Object.keys(t);l<f.length;l++){var d=f[l];if(!h(e,d)||!C(t[d],e[d],r,u))return!1}return f.length===Object.keys(e).length}if(!h(e,l)||!C(t[l],e[l],r,u))return!1}for(l=0;l<o.length;l++){var p=o[l];if(!C(t[p],e[p],r,u))return!1}return!0}(t,e,r,l,o,u);return o.val1.delete(t),o.val2.delete(e),E}function z(t,e,r,n){for(var i=a(t),o=0;o<i.length;o++){var s=i[o];if(C(e,s,r,n))return t.delete(s),!0}return!1}function q(t){switch(i(t)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":t=+t;case"number":if(l(t))return!1}return!0}function W(t,e,r){var n=q(r);return null!=n?n:e.has(n)&&!t.has(n)}function H(t,e,r,n,i){var o=q(r);if(null!=o)return o;var a=e.get(o);return!(void 0===a&&!e.has(o)||!C(n,a,!1,i))&&!t.has(o)&&C(n,a,!1,i)}function G(t,e,r,n,i,o){for(var s=a(t),u=0;u<s.length;u++){var c=s[u];if(C(r,c,i,o)&&C(n,e.get(c),i,o))return t.delete(c),!0}return!1}t.exports={isDeepEqual:function(t,e){return C(t,e,false)},isDeepStrictEqual:function(t,e){return C(t,e,true)}}},9668:(t,e,r)=>{"use strict";const{Buffer:n}=r(8609),i=Symbol.for("BufferList");function o(t){if(!(this instanceof o))return new o(t);o._init.call(this,t)}o._init=function(t){Object.defineProperty(this,i,{value:!0}),this._bufs=[],this.length=0,t&&this.append(t)},o.prototype._new=function(t){return new o(t)},o.prototype._offset=function(t){if(0===t)return[0,0];let e=0;for(let r=0;r<this._bufs.length;r++){const n=e+this._bufs[r].length;if(t<n||r===this._bufs.length-1)return[r,t-e];e=n}},o.prototype._reverseOffset=function(t){const e=t[0];let r=t[1];for(let t=0;t<e;t++)r+=this._bufs[t].length;return r},o.prototype.get=function(t){if(t>this.length||t<0)return;const e=this._offset(t);return this._bufs[e[0]][e[1]]},o.prototype.slice=function(t,e){return"number"==typeof t&&t<0&&(t+=this.length),"number"==typeof e&&e<0&&(e+=this.length),this.copy(null,0,t,e)},o.prototype.copy=function(t,e,r,i){if(("number"!=typeof r||r<0)&&(r=0),("number"!=typeof i||i>this.length)&&(i=this.length),r>=this.length)return t||n.alloc(0);if(i<=0)return t||n.alloc(0);const o=!!t,a=this._offset(r),s=i-r;let u=s,c=o&&e||0,l=a[1];if(0===r&&i===this.length){if(!o)return 1===this._bufs.length?this._bufs[0]:n.concat(this._bufs,this.length);for(let e=0;e<this._bufs.length;e++)this._bufs[e].copy(t,c),c+=this._bufs[e].length;return t}if(u<=this._bufs[a[0]].length-l)return o?this._bufs[a[0]].copy(t,e,l,l+u):this._bufs[a[0]].slice(l,l+u);o||(t=n.allocUnsafe(s));for(let e=a[0];e<this._bufs.length;e++){const r=this._bufs[e].length-l;if(!(u>r)){this._bufs[e].copy(t,c,l,l+u),c+=r;break}this._bufs[e].copy(t,c,l),c+=r,u-=r,l&&(l=0)}return t.length>c?t.slice(0,c):t},o.prototype.shallowSlice=function(t,e){if(t=t||0,e="number"!=typeof e?this.length:e,t<0&&(t+=this.length),e<0&&(e+=this.length),t===e)return this._new();const r=this._offset(t),n=this._offset(e),i=this._bufs.slice(r[0],n[0]+1);return 0===n[1]?i.pop():i[i.length-1]=i[i.length-1].slice(0,n[1]),0!==r[1]&&(i[0]=i[0].slice(r[1])),this._new(i)},o.prototype.toString=function(t,e,r){return this.slice(e,r).toString(t)},o.prototype.consume=function(t){if(t=Math.trunc(t),Number.isNaN(t)||t<=0)return this;for(;this._bufs.length;){if(!(t>=this._bufs[0].length)){this._bufs[0]=this._bufs[0].slice(t),this.length-=t;break}t-=this._bufs[0].length,this.length-=this._bufs[0].length,this._bufs.shift()}return this},o.prototype.duplicate=function(){const t=this._new();for(let e=0;e<this._bufs.length;e++)t.append(this._bufs[e]);return t},o.prototype.append=function(t){if(null==t)return this;if(t.buffer)this._appendBuffer(n.from(t.buffer,t.byteOffset,t.byteLength));else if(Array.isArray(t))for(let e=0;e<t.length;e++)this.append(t[e]);else if(this._isBufferList(t))for(let e=0;e<t._bufs.length;e++)this.append(t._bufs[e]);else"number"==typeof t&&(t=t.toString()),this._appendBuffer(n.from(t));return this},o.prototype._appendBuffer=function(t){this._bufs.push(t),this.length+=t.length},o.prototype.indexOf=function(t,e,r){if(void 0===r&&"string"==typeof e&&(r=e,e=void 0),"function"==typeof t||Array.isArray(t))throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');if("number"==typeof t?t=n.from([t]):"string"==typeof t?t=n.from(t,r):this._isBufferList(t)?t=t.slice():Array.isArray(t.buffer)?t=n.from(t.buffer,t.byteOffset,t.byteLength):n.isBuffer(t)||(t=n.from(t)),e=Number(e||0),isNaN(e)&&(e=0),e<0&&(e=this.length+e),e<0&&(e=0),0===t.length)return e>this.length?this.length:e;const i=this._offset(e);let o=i[0],a=i[1];for(;o<this._bufs.length;o++){const e=this._bufs[o];for(;a<e.length;)if(e.length-a>=t.length){const r=e.indexOf(t,a);if(-1!==r)return this._reverseOffset([o,r]);a=e.length-t.length+1}else{const e=this._reverseOffset([o,a]);if(this._match(e,t))return e;a++}a=0}return-1},o.prototype._match=function(t,e){if(this.length-t<e.length)return!1;for(let r=0;r<e.length;r++)if(this.get(t+r)!==e[r])return!1;return!0},function(){const t={readDoubleBE:8,readDoubleLE:8,readFloatBE:4,readFloatLE:4,readInt32BE:4,readInt32LE:4,readUInt32BE:4,readUInt32LE:4,readInt16BE:2,readInt16LE:2,readUInt16BE:2,readUInt16LE:2,readInt8:1,readUInt8:1,readIntBE:null,readIntLE:null,readUIntBE:null,readUIntLE:null};for(const e in t)!function(e){o.prototype[e]=null===t[e]?function(t,r){return this.slice(t,t+r)[e](0,r)}:function(r=0){return this.slice(r,r+t[e])[e](0)}}(e)}(),o.prototype._isBufferList=function(t){return t instanceof o||o.isBufferList(t)},o.isBufferList=function(t){return null!=t&&t[i]},t.exports=o},22:(t,e,r)=>{"use strict";const n=r(8850).Duplex,i=r(5717),o=r(9668);function a(t){if(!(this instanceof a))return new a(t);if("function"==typeof t){this._callback=t;const e=function(t){this._callback&&(this._callback(t),this._callback=null)}.bind(this);this.on("pipe",(function(t){t.on("error",e)})),this.on("unpipe",(function(t){t.removeListener("error",e)})),t=null}o._init.call(this,t),n.call(this)}i(a,n),Object.assign(a.prototype,o.prototype),a.prototype._new=function(t){return new a(t)},a.prototype._write=function(t,e,r){this._appendBuffer(t),"function"==typeof r&&r()},a.prototype._read=function(t){if(!this.length)return this.push(null);t=Math.min(t,this.length),this.push(this.slice(0,t)),this.consume(t)},a.prototype.end=function(t){n.prototype.end.call(this,t),this._callback&&(this._callback(null,this.slice()),this._callback=null)},a.prototype._destroy=function(t,e){this._bufs.length=0,this.length=0,e(t)},a.prototype._isBufferList=function(t){return t instanceof a||t instanceof o||a.isBufferList(t)},a.isBufferList=o.isBufferList,t.exports=a,t.exports.BufferListStream=a,t.exports.BufferList=o},2898:t=>{"use strict";var e={};function r(t,r,n){n||(n=Error);var i=function(t){var e,n;function i(e,n,i){return t.call(this,function(t,e,n){return"string"==typeof r?r:r(t,e,n)}(e,n,i))||this}return n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=t,e[t]=i}function n(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}r("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(t,e,r){var i,o,a,s,u;if("string"==typeof e&&(o="not ",e.substr(0,o.length)===o)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))a="The ".concat(t," ").concat(i," ").concat(n(e,"type"));else{var c=("number"!=typeof u&&(u=0),u+".".length>(s=t).length||-1===s.indexOf(".",u)?"argument":"property");a='The "'.concat(t,'" ').concat(c," ").concat(i," ").concat(n(e,"type"))}return a+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},6510:(t,e,r)=>{"use strict";var n=r(1624),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=l;var o=r(2813),a=r(9850);r(5717)(l,o);for(var s=i(a.prototype),u=0;u<s.length;u++){var c=s[u];l.prototype[c]||(l.prototype[c]=a.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);o.call(this,t),a.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",f)))}function f(){this._writableState.ended||n.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},4586:(t,e,r)=>{"use strict";t.exports=i;var n=r(4059);function i(t){if(!(this instanceof i))return new i(t);n.call(this,t)}r(5717)(i,n),i.prototype._transform=function(t,e,r){r(null,t)}},2813:(t,e,r)=>{"use strict";var n,i=r(1624);t.exports=k,k.ReadableState=R,r(7187).EventEmitter;var o,a=function(t,e){return t.listeners(e).length},s=r(9853),u=r(8609).Buffer,c=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},l=r(1379);o=l&&l.debuglog?l.debuglog("stream"):function(){};var f,h,d,p=r(5770),y=r(2214),g=r(8425).getHighWaterMark,_=r(2898).q,b=_.ERR_INVALID_ARG_TYPE,m=_.ERR_STREAM_PUSH_AFTER_EOF,v=_.ERR_METHOD_NOT_IMPLEMENTED,w=_.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(k,s);var E=y.errorOrDestroy,S=["error","close","destroy","pause","resume"];function R(t,e,i){n=n||r(6510),t=t||{},"boolean"!=typeof i&&(i=e instanceof n),this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=g(this,t,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(f||(f=r(2553).s),this.decoder=new f(t.encoding),this.encoding=t.encoding)}function k(t){if(n=n||r(6510),!(this instanceof k))return new k(t);var e=this instanceof n;this._readableState=new R(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),s.call(this)}function O(t,e,r,n,i){o("readableAddChunk",e);var a,s=t._readableState;if(null===e)s.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?L(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,x(t)))}}(t,s);else if(i||(a=function(t,e){var r,n;return n=e,u.isBuffer(n)||n instanceof c||"string"==typeof e||void 0===e||t.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],e)),r}(s,e)),a)E(t,a);else if(s.objectMode||e&&e.length>0)if("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),n)s.endEmitted?E(t,new w):T(t,s,e,!0);else if(s.ended)E(t,new m);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?T(t,s,e,!1):N(t,s)):T(t,s,e,!1)}else n||(s.reading=!1,N(t,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function T(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&L(t)),N(t,e)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),k.prototype.destroy=y.destroy,k.prototype._undestroy=y.undestroy,k.prototype._destroy=function(t,e){e(t)},k.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=u.from(t,e),e=""),r=!0),O(this,t,e,!1,r)},k.prototype.unshift=function(t){return O(this,t,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(t){f||(f=r(2553).s);var e=new f(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=e.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var A=1073741824;function I(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=A?t=A:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function L(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,i.nextTick(x,t))}function x(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function N(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(o("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function D(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function F(t){o("readable nexttick read 0"),t.read(0)}function M(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function C(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function U(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,i.nextTick(B,e,t))}function B(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function z(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}k.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?U(this):L(this),null;if(0===(t=I(t,e))&&e.ended)return 0===e.length&&U(this),null;var n,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=I(r,e))),null===(n=t>0?C(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&U(this)),null!==n&&this.emit("data",n),n},k.prototype._read=function(t){E(this,new v("_read()"))},k.prototype.pipe=function(t,e){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=t;break;case 1:n.pipes=[n.pipes,t];break;default:n.pipes.push(t)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,e);var s=e&&!1===e.end||t===i.stdout||t===i.stderr?y:u;function u(){o("onend"),t.end()}n.endEmitted?i.nextTick(s):r.once("end",s),t.on("unpipe",(function e(i,a){o("onunpipe"),i===r&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,o("cleanup"),t.removeListener("close",d),t.removeListener("finish",p),t.removeListener("drain",c),t.removeListener("error",h),t.removeListener("unpipe",e),r.removeListener("end",u),r.removeListener("end",y),r.removeListener("data",f),l=!0,!n.awaitDrain||t._writableState&&!t._writableState.needDrain||c())}));var c=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,j(t))}}(r);t.on("drain",c);var l=!1;function f(e){o("ondata");var i=t.write(e);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===t||n.pipesCount>1&&-1!==z(n.pipes,t))&&!l&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function h(e){o("onerror",e),y(),t.removeListener("error",h),0===a(t,"error")&&E(t,e)}function d(){t.removeListener("finish",p),y()}function p(){o("onfinish"),t.removeListener("close",d),y()}function y(){o("unpipe"),r.unpipe(t)}return r.on("data",f),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",h),t.once("close",d),t.once("finish",p),t.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),t},k.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=z(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},k.prototype.on=function(t,e){var r=s.prototype.on.call(this,t,e),n=this._readableState;return"data"===t?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===t&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?L(this):n.reading||i.nextTick(F,this))),r},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(t,e){var r=s.prototype.removeListener.call(this,t,e);return"readable"===t&&i.nextTick(D,this),r},k.prototype.removeAllListeners=function(t){var e=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||i.nextTick(D,this),e},k.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(M,t,e))}(this,t)),t.paused=!1,this},k.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var a=0;a<S.length;a++)t.on(S[a],this.emit.bind(this,S[a]));return this._read=function(e){o("wrapped _read",e),n&&(n=!1,t.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=r(5749)),h(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),k._fromList=C,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(t,e){return void 0===d&&(d=r(8869)),d(k,t,e)})},4059:(t,e,r)=>{"use strict";t.exports=l;var n=r(2898).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,a=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r(6510);function c(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);u.call(this,t),this._transformState={afterTransform:c.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",f)}function f(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(e,r){h(t,e,r)}))}function h(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new s;if(t._transformState.transforming)throw new a;return t.push(null)}r(5717)(l,u),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,r){r(new i("_transform()"))},l.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},9850:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(undefined),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}t.exports=k,k.WritableState=R;var a,s={deprecate:r(4927)},u=r(9853),c=r(8609).Buffer,l=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},f=r(2214),h=r(8425).getHighWaterMark,d=r(2898).q,p=d.ERR_INVALID_ARG_TYPE,y=d.ERR_METHOD_NOT_IMPLEMENTED,g=d.ERR_MULTIPLE_CALLBACK,_=d.ERR_STREAM_CANNOT_PIPE,b=d.ERR_STREAM_DESTROYED,m=d.ERR_STREAM_NULL_VALUES,v=d.ERR_STREAM_WRITE_AFTER_END,w=d.ERR_UNKNOWN_ENCODING,E=f.errorOrDestroy;function S(){}function R(t,e,a){n=n||r(6510),t=t||{},"boolean"!=typeof a&&(a=e instanceof n),this.objectMode=!!t.objectMode,a&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=h(this,t,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new g;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,o){--e.pendingcb,r?(i.nextTick(o,n),i.nextTick(x,t,e),t._writableState.errorEmitted=!0,E(t,n)):(o(n),t._writableState.errorEmitted=!0,E(t,n),x(t,e))}(t,r,n,e,o);else{var a=I(r)||t.destroyed;a||r.corked||r.bufferProcessing||!r.bufferedRequest||A(t,r),n?i.nextTick(T,t,r,a,o):T(t,r,a,o)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function k(t){var e=this instanceof(n=n||r(6510));if(!e&&!a.call(k,this))return new k(t);this._writableState=new R(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),u.call(this)}function O(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new b("write")):r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function T(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),x(t,e)}function A(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),a=e.corkedRequestsFree;a.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,O(t,e,!0,e.length,i,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,f=r.callback;if(O(t,e,!1,e.objectMode?1:c.length,c,l,f),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function I(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function L(t,e){t._final((function(r){e.pendingcb--,r&&E(t,r),e.prefinished=!0,t.emit("prefinish"),x(t,e)}))}function x(t,e){var r=I(e);if(r&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,i.nextTick(L,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var n=t._readableState;(!n||n.autoDestroy&&n.endEmitted)&&t.destroy()}return r}r(5717)(k,u),R.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(R.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(t){return!!a.call(this,t)||this===k&&t&&t._writableState instanceof R}})):a=function(t){return t instanceof this},k.prototype.pipe=function(){E(this,new _)},k.prototype.write=function(t,e,r){var n,o=this._writableState,a=!1,s=!o.objectMode&&(n=t,c.isBuffer(n)||n instanceof l);return s&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(r=e,e=null),s?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(t,e){var r=new v;E(t,r),i.nextTick(e,r)}(this,r):(s||function(t,e,r,n){var o;return null===r?o=new m:"string"==typeof r||e.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(t,o),i.nextTick(n,o),!1)}(this,o,t,r))&&(o.pendingcb++,a=function(t,e,r,n,i,o){if(!r){var a=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,r)),e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=e.objectMode?1:n.length;e.length+=s;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else O(t,e,!1,s,n,i,o);return u}(this,o,s,t,e,r)),a},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||A(this,t))},k.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new w(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(t,e,r){r(new y("_write()"))},k.prototype._writev=null,k.prototype.end=function(t,e,r){var n=this._writableState;return"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,r){e.ending=!0,x(t,e),r&&(e.finished?i.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,n,r),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),k.prototype.destroy=f.destroy,k.prototype._undestroy=f.undestroy,k.prototype._destroy=function(t,e){e(t)}},5749:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var a=r(7810),s=Symbol("lastResolve"),u=Symbol("lastReject"),c=Symbol("error"),l=Symbol("ended"),f=Symbol("lastPromise"),h=Symbol("handlePromise"),d=Symbol("stream");function p(t,e){return{value:t,done:e}}function y(t){var e=t[s];if(null!==e){var r=t[d].read();null!==r&&(t[f]=null,t[s]=null,t[u]=null,e(p(r,!1)))}}function g(t){i.nextTick(y,t)}var _=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((o(n={get stream(){return this[d]},next:function(){var t=this,e=this[c];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(p(void 0,!0));if(this[d].destroyed)return new Promise((function(e,r){i.nextTick((function(){t[c]?r(t[c]):e(p(void 0,!0))}))}));var r,n=this[f];if(n)r=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(p(void 0,!0)):e[h](r,n)}),n)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[h])}return this[f]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var t=this;return new Promise((function(e,r){t[d].destroy(null,(function(t){t?r(t):e(p(void 0,!0))}))}))})),n),_);t.exports=function(t){var e,r=Object.create(b,(o(e={},d,{value:t,writable:!0}),o(e,s,{value:null,writable:!0}),o(e,u,{value:null,writable:!0}),o(e,c,{value:null,writable:!0}),o(e,l,{value:t._readableState.endEmitted,writable:!0}),o(e,h,{value:function(t,e){var n=r[d].read();n?(r[f]=null,r[s]=null,r[u]=null,t(p(n,!1))):(r[s]=t,r[u]=e)},writable:!0}),e));return r[f]=null,a(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=r[u];return null!==e&&(r[f]=null,r[s]=null,r[u]=null,e(t)),void(r[c]=t)}var n=r[s];null!==n&&(r[f]=null,r[s]=null,r[u]=null,n(p(void 0,!0))),r[l]=!0})),t.on("readable",g.bind(null,r)),r}},5770:(t,e,r)=>{"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}var u=r(8609).Buffer,c=r(498).inspect,l=c&&c.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r;return e=t,(r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return u.alloc(0);for(var e,r,n,i=u.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,r=i,n=a,u.prototype.copy.call(e,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?n+=i:n+=i.slice(0,t),0==(t-=o)){o===i.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=u.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var i=r.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,e}},{key:l,value:function(t,e){return c(this,i(i({},e),{},{depth:0,customInspect:!1}))}}])&&a(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}()},2214:(t,e,r)=>{"use strict";var n=r(1624);function i(t,e){a(t,e),o(t)}function o(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function a(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,s=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return s||u?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(a,this,t)):n.nextTick(a,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,t)):n.nextTick(i,r,t):e?(n.nextTick(o,r),e(t)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e)}}},7810:(t,e,r)=>{"use strict";var n=r(2898).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}t.exports=function t(e,r,o){if("function"==typeof r)return t(e,null,r);r||(r={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];t.apply(this,n)}}}(o||i);var a=r.readable||!1!==r.readable&&e.readable,s=r.writable||!1!==r.writable&&e.writable,u=function(){e.writable||l()},c=e._writableState&&e._writableState.finished,l=function(){s=!1,c=!0,a||o.call(e)},f=e._readableState&&e._readableState.endEmitted,h=function(){a=!1,f=!0,s||o.call(e)},d=function(t){o.call(e,t)},p=function(){var t;return a&&!f?(e._readableState&&e._readableState.ended||(t=new n),o.call(e,t)):s&&!c?(e._writableState&&e._writableState.ended||(t=new n),o.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",p),e.req?y():e.on("request",y)):s&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",h),e.on("finish",l),!1!==r.error&&e.on("error",d),e.on("close",p),function(){e.removeListener("complete",l),e.removeListener("abort",p),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",l),e.removeListener("end",h),e.removeListener("error",d),e.removeListener("close",p)}}},8869:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},6300:(t,e,r)=>{"use strict";var n,i=r(2898).q,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(t){if(t)throw t}function u(t){t()}function c(t,e){return t.pipe(e)}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var l,f=function(t){return t.length?"function"!=typeof t[t.length-1]?s:t.pop():s}(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new o("streams");var h=e.map((function(t,i){var o=i<e.length-1;return function(t,e,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var s=!1;t.on("close",(function(){s=!0})),void 0===n&&(n=r(7810)),n(t,{readable:e,writable:i},(function(t){if(t)return o(t);s=!0,o()}));var u=!1;return function(e){if(!s&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void o(e||new a("pipe"))}}(t,o,i>0,(function(t){l||(l=t),t&&h.forEach(u),o||(h.forEach(u),f(l))}))}));return e.reduce(c)}},8425:(t,e,r)=>{"use strict";var n=r(2898).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,r,i){var o=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},9853:(t,e,r)=>{t.exports=r(7187).EventEmitter},8850:(t,e,r)=>{(e=t.exports=r(2813)).Stream=e,e.Readable=e,e.Writable=r(9850),e.Duplex=r(6510),e.Transform=r(4059),e.PassThrough=r(4586),e.finished=r(7810),e.pipeline=r(6300)},3229:function(t,e){var r;r=function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}return r.m=t,r.c=e,r.p="",r(0)}([function(t,e,r){(function(t,n,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a,s=r(2),u=r(9);!function(t){t[t.EPERM=1]="EPERM",t[t.ENOENT=2]="ENOENT",t[t.EIO=5]="EIO",t[t.EBADF=9]="EBADF",t[t.EACCES=13]="EACCES",t[t.EBUSY=16]="EBUSY",t[t.EEXIST=17]="EEXIST",t[t.ENOTDIR=20]="ENOTDIR",t[t.EISDIR=21]="EISDIR",t[t.EINVAL=22]="EINVAL",t[t.EFBIG=27]="EFBIG",t[t.ENOSPC=28]="ENOSPC",t[t.EROFS=30]="EROFS",t[t.ENOTEMPTY=39]="ENOTEMPTY",t[t.ENOTSUP=95]="ENOTSUP"}(a||(a={}));var c={};c[a.EPERM]="Operation not permitted.",c[a.ENOENT]="No such file or directory.",c[a.EIO]="Input/output error.",c[a.EBADF]="Bad file descriptor.",c[a.EACCES]="Permission denied.",c[a.EBUSY]="Resource busy or locked.",c[a.EEXIST]="File exists.",c[a.ENOTDIR]="File is not a directory.",c[a.EISDIR]="File is a directory.",c[a.EINVAL]="Invalid argument.",c[a.EFBIG]="File is too big.",c[a.ENOSPC]="No space left on disk.",c[a.EROFS]="Cannot modify a read-only file system.",c[a.ENOTEMPTY]="Directory is not empty.",c[a.ENOTSUP]="Operation is not supported.";var l,f=function(e){function r(t,r,n){void 0===r&&(r=c[t]),e.call(this,r),this.syscall="",this.errno=t,this.code=a[t],this.path=n,this.stack=(new e).stack,this.message="Error: "+this.code+": "+r+(this.path?", '"+this.path+"'":"")}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.fromJSON=function(t){var e=new r(0);return e.errno=t.errno,e.code=t.code,e.path=t.path,e.stack=t.stack,e.message=t.message,e},r.fromBuffer=function(t,e){return void 0===e&&(e=0),r.fromJSON(JSON.parse(t.toString("utf8",e+4,e+4+t.readUInt32LE(e))))},r.FileError=function(t,e){return new r(t,c[t],e)},r.ENOENT=function(t){return this.FileError(a.ENOENT,t)},r.EEXIST=function(t){return this.FileError(a.EEXIST,t)},r.EISDIR=function(t){return this.FileError(a.EISDIR,t)},r.ENOTDIR=function(t){return this.FileError(a.ENOTDIR,t)},r.EPERM=function(t){return this.FileError(a.EPERM,t)},r.ENOTEMPTY=function(t){return this.FileError(a.ENOTEMPTY,t)},r.prototype.toString=function(){return this.message},r.prototype.toJSON=function(){return{errno:this.errno,code:this.code,path:this.path,stack:this.stack,message:this.message}},r.prototype.writeToBuffer=function(e,r){void 0===e&&(e=t.alloc(this.bufferSize())),void 0===r&&(r=0);var n=e.write(JSON.stringify(this.toJSON()),r+4);return e.writeUInt32LE(n,r),e},r.prototype.bufferSize=function(){return 4+t.byteLength(JSON.stringify(this.toJSON()))},r}(Error),h=Object.freeze({get ErrorCode(){return a},ErrorStrings:c,ApiError:f});!function(t){t[t.NOP=0]="NOP",t[t.THROW_EXCEPTION=1]="THROW_EXCEPTION",t[t.TRUNCATE_FILE=2]="TRUNCATE_FILE",t[t.CREATE_FILE=3]="CREATE_FILE"}(l||(l={}));var d,p=function t(e){if(this.flagStr=e,t.validFlagStrs.indexOf(e)<0)throw new f(a.EINVAL,"Invalid flag: "+e)};p.getFileFlag=function(t){return p.flagCache.hasOwnProperty(t)?p.flagCache[t]:p.flagCache[t]=new p(t)},p.prototype.getFlagString=function(){return this.flagStr},p.prototype.isReadable=function(){return-1!==this.flagStr.indexOf("r")||-1!==this.flagStr.indexOf("+")},p.prototype.isWriteable=function(){return-1!==this.flagStr.indexOf("w")||-1!==this.flagStr.indexOf("a")||-1!==this.flagStr.indexOf("+")},p.prototype.isTruncating=function(){return-1!==this.flagStr.indexOf("w")},p.prototype.isAppendable=function(){return-1!==this.flagStr.indexOf("a")},p.prototype.isSynchronous=function(){return-1!==this.flagStr.indexOf("s")},p.prototype.isExclusive=function(){return-1!==this.flagStr.indexOf("x")},p.prototype.pathExistsAction=function(){return this.isExclusive()?l.THROW_EXCEPTION:this.isTruncating()?l.TRUNCATE_FILE:l.NOP},p.prototype.pathNotExistsAction=function(){return(this.isWriteable()||this.isAppendable())&&"r+"!==this.flagStr?l.CREATE_FILE:l.THROW_EXCEPTION},p.flagCache={},p.validFlagStrs=["r","r+","rs","rs+","w","wx","w+","wx+","a","ax","a+","ax+"],function(t){t[t.FILE=32768]="FILE",t[t.DIRECTORY=16384]="DIRECTORY",t[t.SYMLINK=40960]="SYMLINK"}(d||(d={}));var y=function(t,e,r,n,i,o){if(void 0===n&&(n=new Date),void 0===i&&(i=new Date),void 0===o&&(o=new Date),this.size=e,this.atime=n,this.mtime=i,this.ctime=o,this.dev=0,this.ino=0,this.rdev=0,this.nlink=1,this.blksize=4096,this.uid=0,this.gid=0,this.birthtime=new Date(0),this.fileData=null,r)this.mode=r;else switch(t){case d.FILE:this.mode=420;break;case d.DIRECTORY:default:this.mode=511}this.blocks=Math.ceil(e/512),this.mode<4096&&(this.mode|=t)};y.fromBuffer=function(t){var e=t.readUInt32LE(0),r=t.readUInt32LE(4),n=t.readDoubleLE(8),i=t.readDoubleLE(16),o=t.readDoubleLE(24);return new y(61440&r,e,4095&r,new Date(n),new Date(i),new Date(o))},y.prototype.toBuffer=function(){var e=t.alloc(32);return e.writeUInt32LE(this.size,0),e.writeUInt32LE(this.mode,4),e.writeDoubleLE(this.atime.getTime(),8),e.writeDoubleLE(this.mtime.getTime(),16),e.writeDoubleLE(this.ctime.getTime(),24),e},y.prototype.clone=function(){return new y(61440&this.mode,this.size,4095&this.mode,this.atime,this.mtime,this.ctime)},y.prototype.isFile=function(){return(61440&this.mode)===d.FILE},y.prototype.isDirectory=function(){return(61440&this.mode)===d.DIRECTORY},y.prototype.isSymbolicLink=function(){return(61440&this.mode)===d.SYMLINK},y.prototype.chmod=function(t){this.mode=61440&this.mode|t},y.prototype.isSocket=function(){return!1},y.prototype.isBlockDevice=function(){return!1},y.prototype.isCharacterDevice=function(){return!1},y.prototype.isFIFO=function(){return!1};var g=function(t,e){return t};function _(t){if(t)return t;throw new f(a.EIO,"Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)")}function b(t,e){switch(typeof t){case"number":return t;case"string":var r=parseInt(t,8);return isNaN(r)?e:r;default:return e}}function m(t){if(t instanceof Date)return t;if("number"==typeof t)return new Date(1e3*t);throw new f(a.EINVAL,"Invalid time.")}function v(t){if(t.indexOf("\0")>=0)throw new f(a.EINVAL,"Path must be a string without null bytes.");if(""===t)throw new f(a.EINVAL,"Path must not be empty.");return u.resolve(t)}function w(t,e,r,n){switch(typeof t){case"object":return{encoding:void 0!==t.encoding?t.encoding:e,flag:void 0!==t.flag?t.flag:r,mode:b(t.mode,n)};case"string":return{encoding:t,flag:r,mode:n};default:return{encoding:e,flag:r,mode:n}}}function E(){}var S=function(){this.F_OK=0,this.R_OK=4,this.W_OK=2,this.X_OK=1,this.root=null,this.fdMap={},this.nextFd=100};S.prototype.initialize=function(t){if(!t.constructor.isAvailable())throw new f(a.EINVAL,"Tried to instantiate BrowserFS with an unavailable file system.");return this.root=t},S.prototype._toUnixTimestamp=function(t){if("number"==typeof t)return t;if(t instanceof Date)return t.getTime()/1e3;throw new Error("Cannot parse time: "+t)},S.prototype.getRootFS=function(){return this.root?this.root:null},S.prototype.rename=function(t,e,r){void 0===r&&(r=E);var n=g(r,1);try{_(this.root).rename(v(t),v(e),n)}catch(t){n(t)}},S.prototype.renameSync=function(t,e){_(this.root).renameSync(v(t),v(e))},S.prototype.exists=function(t,e){void 0===e&&(e=E);var r=g(e,1);try{return _(this.root).exists(v(t),r)}catch(t){return r(!1)}},S.prototype.existsSync=function(t){try{return _(this.root).existsSync(v(t))}catch(t){return!1}},S.prototype.stat=function(t,e){void 0===e&&(e=E);var r=g(e,2);try{return _(this.root).stat(v(t),!1,r)}catch(t){return r(t)}},S.prototype.statSync=function(t){return _(this.root).statSync(v(t),!1)},S.prototype.lstat=function(t,e){void 0===e&&(e=E);var r=g(e,2);try{return _(this.root).stat(v(t),!0,r)}catch(t){return r(t)}},S.prototype.lstatSync=function(t){return _(this.root).statSync(v(t),!0)},S.prototype.truncate=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=E);var n=0;"function"==typeof e?r=e:"number"==typeof e&&(n=e);var i=g(r,1);try{if(n<0)throw new f(a.EINVAL);return _(this.root).truncate(v(t),n,i)}catch(t){return i(t)}},S.prototype.truncateSync=function(t,e){if(void 0===e&&(e=0),e<0)throw new f(a.EINVAL);return _(this.root).truncateSync(v(t),e)},S.prototype.unlink=function(t,e){void 0===e&&(e=E);var r=g(e,1);try{return _(this.root).unlink(v(t),r)}catch(t){return r(t)}},S.prototype.unlinkSync=function(t){return _(this.root).unlinkSync(v(t))},S.prototype.open=function(t,e,r,n){var i=this;void 0===n&&(n=E);var o=b(r,420),a=g(n="function"==typeof r?r:n,2);try{_(this.root).open(v(t),p.getFileFlag(e),o,(function(t,e){e?a(t,i.getFdForFile(e)):a(t)}))}catch(t){a(t)}},S.prototype.openSync=function(t,e,r){return void 0===r&&(r=420),this.getFdForFile(_(this.root).openSync(v(t),p.getFileFlag(e),b(r,420)))},S.prototype.readFile=function(t,e,r){void 0===e&&(e={}),void 0===r&&(r=E);var n=w(e,null,"r",null),i=g(r="function"==typeof e?e:r,2);try{var o=p.getFileFlag(n.flag);return o.isReadable()?_(this.root).readFile(v(t),n.encoding,o,i):i(new f(a.EINVAL,"Flag passed to readFile must allow for reading."))}catch(t){return i(t)}},S.prototype.readFileSync=function(t,e){void 0===e&&(e={});var r=w(e,null,"r",null),n=p.getFileFlag(r.flag);if(!n.isReadable())throw new f(a.EINVAL,"Flag passed to readFile must allow for reading.");return _(this.root).readFileSync(v(t),r.encoding,n)},S.prototype.writeFile=function(t,e,r,n){void 0===r&&(r={}),void 0===n&&(n=E);var i=w(r,"utf8","w",420),o=g(n="function"==typeof r?r:n,1);try{var s=p.getFileFlag(i.flag);return s.isWriteable()?_(this.root).writeFile(v(t),e,i.encoding,s,i.mode,o):o(new f(a.EINVAL,"Flag passed to writeFile must allow for writing."))}catch(t){return o(t)}},S.prototype.writeFileSync=function(t,e,r){var n=w(r,"utf8","w",420),i=p.getFileFlag(n.flag);if(!i.isWriteable())throw new f(a.EINVAL,"Flag passed to writeFile must allow for writing.");return _(this.root).writeFileSync(v(t),e,n.encoding,i,n.mode)},S.prototype.appendFile=function(t,e,r,n){void 0===n&&(n=E);var i=w(r,"utf8","a",420),o=g(n="function"==typeof r?r:n,1);try{var s=p.getFileFlag(i.flag);if(!s.isAppendable())return o(new f(a.EINVAL,"Flag passed to appendFile must allow for appending."));_(this.root).appendFile(v(t),e,i.encoding,s,i.mode,o)}catch(t){o(t)}},S.prototype.appendFileSync=function(t,e,r){var n=w(r,"utf8","a",420),i=p.getFileFlag(n.flag);if(!i.isAppendable())throw new f(a.EINVAL,"Flag passed to appendFile must allow for appending.");return _(this.root).appendFileSync(v(t),e,n.encoding,i,n.mode)},S.prototype.fstat=function(t,e){void 0===e&&(e=E);var r=g(e,2);try{this.fd2file(t).stat(r)}catch(t){r(t)}},S.prototype.fstatSync=function(t){return this.fd2file(t).statSync()},S.prototype.close=function(t,e){var r=this;void 0===e&&(e=E);var n=g(e,1);try{this.fd2file(t).close((function(e){e||r.closeFd(t),n(e)}))}catch(t){n(t)}},S.prototype.closeSync=function(t){this.fd2file(t).closeSync(),this.closeFd(t)},S.prototype.ftruncate=function(t,e,r){void 0===r&&(r=E);var n="number"==typeof e?e:0,i=g(r="function"==typeof e?e:r,1);try{var o=this.fd2file(t);if(n<0)throw new f(a.EINVAL);o.truncate(n,i)}catch(t){i(t)}},S.prototype.ftruncateSync=function(t,e){void 0===e&&(e=0);var r=this.fd2file(t);if(e<0)throw new f(a.EINVAL);r.truncateSync(e)},S.prototype.fsync=function(t,e){void 0===e&&(e=E);var r=g(e,1);try{this.fd2file(t).sync(r)}catch(t){r(t)}},S.prototype.fsyncSync=function(t){this.fd2file(t).syncSync()},S.prototype.fdatasync=function(t,e){void 0===e&&(e=E);var r=g(e,1);try{this.fd2file(t).datasync(r)}catch(t){r(t)}},S.prototype.fdatasyncSync=function(t){this.fd2file(t).datasyncSync()},S.prototype.write=function(e,r,n,i,o,s){void 0===s&&(s=E);var u,c,l,h=null;if("string"==typeof r){var d="utf8";switch(typeof n){case"function":s=n;break;case"number":h=n,d="string"==typeof i?i:"utf8",s="function"==typeof o?o:s;break;default:return(s="function"==typeof i?i:"function"==typeof o?o:s)(new f(a.EINVAL,"Invalid arguments."))}c=0,l=(u=t.from(r,d)).length}else u=r,c=n,l=i,h="number"==typeof o?o:null,s="function"==typeof o?o:s;var p=g(s,3);try{var y=this.fd2file(e);null==h&&(h=y.getPos()),y.write(u,c,l,h,p)}catch(t){p(t)}},S.prototype.writeSync=function(e,r,n,i,o){var a,s,u,c=0;if("string"==typeof r){u="number"==typeof n?n:null;var l="string"==typeof i?i:"utf8";c=0,s=(a=t.from(r,l)).length}else a=r,c=n,s=i,u="number"==typeof o?o:null;var f=this.fd2file(e);return null==u&&(u=f.getPos()),f.writeSync(a,c,s,u)},S.prototype.read=function(e,r,n,i,o,a){var s,u,c,l,f;if(void 0===a&&(a=E),"number"==typeof r){c=r,s=n;var h=i;a="function"==typeof o?o:a,u=0,l=t.alloc(c),f=g((function(t,e,r){if(t)return a(t);a(t,r.toString(h),e)}),3)}else l=r,u=n,c=i,s=o,f=g(a,3);try{var d=this.fd2file(e);null==s&&(s=d.getPos()),d.read(l,u,c,s,f)}catch(t){f(t)}},S.prototype.readSync=function(e,r,n,i,o){var a,s,u,c,l=!1,f="utf8";"number"==typeof r?(u=r,c=n,f=i,s=0,a=t.alloc(u),l=!0):(a=r,s=n,u=i,c=o);var h=this.fd2file(e);null==c&&(c=h.getPos());var d=h.readSync(a,s,u,c);return l?[a.toString(f),d]:d},S.prototype.fchown=function(t,e,r,n){void 0===n&&(n=E);var i=g(n,1);try{this.fd2file(t).chown(e,r,i)}catch(t){i(t)}},S.prototype.fchownSync=function(t,e,r){this.fd2file(t).chownSync(e,r)},S.prototype.fchmod=function(t,e,r){var n=g(r,1);try{var i="string"==typeof e?parseInt(e,8):e;this.fd2file(t).chmod(i,n)}catch(t){n(t)}},S.prototype.fchmodSync=function(t,e){var r="string"==typeof e?parseInt(e,8):e;this.fd2file(t).chmodSync(r)},S.prototype.futimes=function(t,e,r,n){void 0===n&&(n=E);var i=g(n,1);try{var o=this.fd2file(t);"number"==typeof e&&(e=new Date(1e3*e)),"number"==typeof r&&(r=new Date(1e3*r)),o.utimes(e,r,i)}catch(t){i(t)}},S.prototype.futimesSync=function(t,e,r){this.fd2file(t).utimesSync(m(e),m(r))},S.prototype.rmdir=function(t,e){void 0===e&&(e=E);var r=g(e,1);try{t=v(t),_(this.root).rmdir(t,r)}catch(t){r(t)}},S.prototype.rmdirSync=function(t){return t=v(t),_(this.root).rmdirSync(t)},S.prototype.mkdir=function(t,e,r){void 0===r&&(r=E),"function"==typeof e&&(r=e,e=511);var n=g(r,1);try{t=v(t),_(this.root).mkdir(t,e,n)}catch(t){n(t)}},S.prototype.mkdirSync=function(t,e){_(this.root).mkdirSync(v(t),b(e,511))},S.prototype.readdir=function(t,e){void 0===e&&(e=E);var r=g(e,2);try{t=v(t),_(this.root).readdir(t,r)}catch(t){r(t)}},S.prototype.readdirSync=function(t){return t=v(t),_(this.root).readdirSync(t)},S.prototype.link=function(t,e,r){void 0===r&&(r=E);var n=g(r,1);try{t=v(t),e=v(e),_(this.root).link(t,e,n)}catch(t){n(t)}},S.prototype.linkSync=function(t,e){return t=v(t),e=v(e),_(this.root).linkSync(t,e)},S.prototype.symlink=function(t,e,r,n){void 0===n&&(n=E);var i="string"==typeof r?r:"file",o=g(n="function"==typeof r?r:n,1);try{if("file"!==i&&"dir"!==i)return o(new f(a.EINVAL,"Invalid type: "+i));t=v(t),e=v(e),_(this.root).symlink(t,e,i,o)}catch(t){o(t)}},S.prototype.symlinkSync=function(t,e,r){if(r){if("file"!==r&&"dir"!==r)throw new f(a.EINVAL,"Invalid type: "+r)}else r="file";return t=v(t),e=v(e),_(this.root).symlinkSync(t,e,r)},S.prototype.readlink=function(t,e){void 0===e&&(e=E);var r=g(e,2);try{t=v(t),_(this.root).readlink(t,r)}catch(t){r(t)}},S.prototype.readlinkSync=function(t){return t=v(t),_(this.root).readlinkSync(t)},S.prototype.chown=function(t,e,r,n){void 0===n&&(n=E);var i=g(n,1);try{t=v(t),_(this.root).chown(t,!1,e,r,i)}catch(t){i(t)}},S.prototype.chownSync=function(t,e,r){t=v(t),_(this.root).chownSync(t,!1,e,r)},S.prototype.lchown=function(t,e,r,n){void 0===n&&(n=E);var i=g(n,1);try{t=v(t),_(this.root).chown(t,!0,e,r,i)}catch(t){i(t)}},S.prototype.lchownSync=function(t,e,r){t=v(t),_(this.root).chownSync(t,!0,e,r)},S.prototype.chmod=function(t,e,r){void 0===r&&(r=E);var n=g(r,1);try{var i=b(e,-1);if(i<0)throw new f(a.EINVAL,"Invalid mode.");_(this.root).chmod(v(t),!1,i,n)}catch(t){n(t)}},S.prototype.chmodSync=function(t,e){var r=b(e,-1);if(r<0)throw new f(a.EINVAL,"Invalid mode.");t=v(t),_(this.root).chmodSync(t,!1,r)},S.prototype.lchmod=function(t,e,r){void 0===r&&(r=E);var n=g(r,1);try{var i=b(e,-1);if(i<0)throw new f(a.EINVAL,"Invalid mode.");_(this.root).chmod(v(t),!0,i,n)}catch(t){n(t)}},S.prototype.lchmodSync=function(t,e){var r=b(e,-1);if(r<1)throw new f(a.EINVAL,"Invalid mode.");_(this.root).chmodSync(v(t),!0,r)},S.prototype.utimes=function(t,e,r,n){void 0===n&&(n=E);var i=g(n,1);try{_(this.root).utimes(v(t),m(e),m(r),i)}catch(t){i(t)}},S.prototype.utimesSync=function(t,e,r){_(this.root).utimesSync(v(t),m(e),m(r))},S.prototype.realpath=function(t,e,r){void 0===r&&(r=E);var n="object"==typeof e?e:{},i=g(r="function"==typeof e?e:E,2);try{t=v(t),_(this.root).realpath(t,n,i)}catch(t){i(t)}},S.prototype.realpathSync=function(t,e){return void 0===e&&(e={}),t=v(t),_(this.root).realpathSync(t,e)},S.prototype.watchFile=function(t,e,r){throw void 0===r&&(r=E),new f(a.ENOTSUP)},S.prototype.unwatchFile=function(t,e){throw void 0===e&&(e=E),new f(a.ENOTSUP)},S.prototype.watch=function(t,e,r){throw void 0===r&&(r=E),new f(a.ENOTSUP)},S.prototype.access=function(t,e,r){throw void 0===r&&(r=E),new f(a.ENOTSUP)},S.prototype.accessSync=function(t,e){throw new f(a.ENOTSUP)},S.prototype.createReadStream=function(t,e){throw new f(a.ENOTSUP)},S.prototype.createWriteStream=function(t,e){throw new f(a.ENOTSUP)},S.prototype.wrapCallbacks=function(t){g=t},S.prototype.getFdForFile=function(t){var e=this.nextFd++;return this.fdMap[e]=t,e},S.prototype.fd2file=function(t){var e=this.fdMap[t];if(e)return e;throw new f(a.EBADF,"Invalid file descriptor.")},S.prototype.closeFd=function(t){delete this.fdMap[t]},S.Stats=y;var R=new S,k={},O=S.prototype;function T(t,e,r,n,i){return t<e||r<e?t>r?r+1:t+1:n===i?e:e+1}function A(t,e){if(t===e)return 0;if(t.length>e.length){var r=t;t=e,e=r}for(var n=t.length,i=e.length;n>0&&t.charCodeAt(n-1)===e.charCodeAt(i-1);)n--,i--;for(var o=0;o<n&&t.charCodeAt(o)===e.charCodeAt(o);)o++;if(i-=o,0==(n-=o)||1===i)return i;for(var a,s,u,c,l,f=new Array(n<<1),h=0;h<n;)f[n+h]=t.charCodeAt(o+h),f[h]=++h;for(a=0;a+3<i;)for(var d=e.charCodeAt(o+(s=a)),p=e.charCodeAt(o+(u=a+1)),y=e.charCodeAt(o+(c=a+2)),g=e.charCodeAt(o+(l=a+3)),_=a+=4,b=0;b<n;){var m=f[n+b],v=f[b];s=T(v,s,u,d,m),u=T(s,u,c,p,m),c=T(u,c,l,y,m),_=T(c,l,_,g,m),f[b++]=_,l=c,c=u,u=s,s=v}for(var w=0;a<i;){var E=e.charCodeAt(o+(s=a));w=++a;for(var S=0;S<n;S++){var R=f[S];f[S]=w=R<s||w<s?R>w?w+1:R+1:E===f[n+S]?s:s+1,s=R}}return w}function I(t,e,r){t&&console.warn("["+e+"] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '"+e+".Create("+JSON.stringify(r)+", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.")}Object.keys(O).forEach((function(t){"function"==typeof R[t]?k[t]=function(){return R[t].apply(R,arguments)}:k[t]=R[t]})),k.changeFSModule=function(t){R=t},k.getFSModule=function(){return R},k.FS=S;var L="undefined"!=typeof navigator&&!(!/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase())&&-1===navigator.userAgent.indexOf("Trident")),x="undefined"==typeof window;function N(){throw new Error("BFS has reached an impossible code path; please file a bug.")}function P(t,e,r){r.existsSync(t)||(P(u.dirname(t),e,r),r.mkdirSync(t,e))}function D(t){var e=F(t),r=e.byteOffset,n=e.byteLength;return 0===r&&n===e.buffer.byteLength?e.buffer:e.buffer.slice(r,r+n)}function F(t){return t instanceof Uint8Array?t:new Uint8Array(t)}function M(e){return e instanceof t?e:e instanceof Uint8Array?j(e):t.from(e)}function j(e){return e instanceof t?e:0===e.byteOffset&&e.byteLength===e.buffer.byteLength?C(e.buffer):t.from(e.buffer,e.byteOffset,e.byteLength)}function C(e){return t.from(e)}function U(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=t.length),e<0||r<0||r>t.length||e>r)throw new TypeError("Invalid slice bounds on buffer of length "+t.length+": ["+e+", "+r+"]");if(0===t.length)return z();var n=F(t),i=t[0],o=(i+1)%255;return t[0]=o,n[0]===o?(n[0]=i,j(n.slice(e,r))):(t[0]=i,j(n.subarray(e,r)))}var B=null;function z(){return B||(B=t.alloc(0))}function q(e,r){t.isBuffer(e)?r():r(new f(a.EINVAL,"option must be a Buffer."))}function W(t,e,r){var n=t.Options,i=t.Name,o=0,s=!1,u=!1;function c(t){s||(t&&(s=!0,r(t)),0==--o&&u&&r())}var l=function(t){if(n.hasOwnProperty(t)){var u=n[t],l=e[t];if(null==l){if(!u.optional){var h=Object.keys(e).filter((function(t){return!(t in n)})).map((function(e){return{str:e,distance:A(t,e)}})).filter((function(t){return t.distance<5})).sort((function(t,e){return t.distance-e.distance}));return s?{}:(s=!0,{v:r(new f(a.EINVAL,"["+i+"] Required option '"+t+"' not provided."+(h.length>0?" You provided unrecognized option '"+h[0].str+"'; perhaps you meant to type '"+t+"'.":"")+"\nOption description: "+u.description))})}}else{if(!(Array.isArray(u.type)?-1!==u.type.indexOf(typeof l):typeof l===u.type))return s?{}:(s=!0,{v:r(new f(a.EINVAL,"["+i+"] Value provided for option "+t+" is not the proper type. Expected "+(Array.isArray(u.type)?"one of {"+u.type.join(", ")+"}":u.type)+", but received "+typeof l+"\nOption description: "+u.description))});u.validator&&(o++,u.validator(l,c))}}};for(var h in n){var d=l(h);if(d)return d.v}u=!0,0!==o||s||r()}var H=Object.freeze({deprecationMessage:I,isIE:L,isWebWorker:x,fail:N,mkdirpSync:P,buffer2ArrayBuffer:D,buffer2Uint8array:F,arrayish2Buffer:M,uint8Array2Buffer:j,arrayBuffer2Buffer:C,copyingSlice:U,emptyBuffer:z,bufferValidator:q,checkOptions:W}),G=function(t){this.fs=t,this.nodefs=t.getNodeFS(),this.FS=t.getFS(),this.PATH=t.getPATH(),this.ERRNO_CODES=t.getERRNO_CODES()};G.prototype.open=function(t){var e=this.fs.realPath(t.node),r=this.FS;try{r.isFile(t.node.mode)&&(t.nfd=this.nodefs.openSync(e,this.fs.flagsToPermissionString(t.flags)))}catch(t){if(!t.code)throw t;throw new r.ErrnoError(this.ERRNO_CODES[t.code])}},G.prototype.close=function(t){var e=this.FS;try{e.isFile(t.node.mode)&&t.nfd&&this.nodefs.closeSync(t.nfd)}catch(t){if(!t.code)throw t;throw new e.ErrnoError(this.ERRNO_CODES[t.code])}},G.prototype.read=function(t,e,r,n,i){try{return this.nodefs.readSync(t.nfd,j(e),r,n,i)}catch(t){throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},G.prototype.write=function(t,e,r,n,i){try{return this.nodefs.writeSync(t.nfd,j(e),r,n,i)}catch(t){throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},G.prototype.llseek=function(t,e,r){var n=e;if(1===r)n+=t.position;else if(2===r&&this.FS.isFile(t.node.mode))try{n+=this.nodefs.fstatSync(t.nfd).size}catch(t){throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}if(n<0)throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);return t.position=n,n};var Z=function(t){this.fs=t,this.nodefs=t.getNodeFS(),this.FS=t.getFS(),this.PATH=t.getPATH(),this.ERRNO_CODES=t.getERRNO_CODES()};Z.prototype.getattr=function(t){var e,r=this.fs.realPath(t);try{e=this.nodefs.lstatSync(r)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}return{dev:e.dev,ino:e.ino,mode:e.mode,nlink:e.nlink,uid:e.uid,gid:e.gid,rdev:e.rdev,size:e.size,atime:e.atime,mtime:e.mtime,ctime:e.ctime,blksize:e.blksize,blocks:e.blocks}},Z.prototype.setattr=function(t,e){var r=this.fs.realPath(t);try{if(void 0!==e.mode&&(this.nodefs.chmodSync(r,e.mode),t.mode=e.mode),void 0!==e.timestamp){var n=new Date(e.timestamp);this.nodefs.utimesSync(r,n,n)}}catch(t){if(!t.code)throw t;if("ENOTSUP"!==t.code)throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}if(void 0!==e.size)try{this.nodefs.truncateSync(r,e.size)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.lookup=function(t,e){var r=this.PATH.join2(this.fs.realPath(t),e),n=this.fs.getMode(r);return this.fs.createNode(t,e,n)},Z.prototype.mknod=function(t,e,r,n){var i=this.fs.createNode(t,e,r,n),o=this.fs.realPath(i);try{this.FS.isDir(i.mode)?this.nodefs.mkdirSync(o,i.mode):this.nodefs.writeFileSync(o,"",{mode:i.mode})}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}return i},Z.prototype.rename=function(t,e,r){var n=this.fs.realPath(t),i=this.PATH.join2(this.fs.realPath(e),r);try{this.nodefs.renameSync(n,i),t.name=r,t.parent=e}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.unlink=function(t,e){var r=this.PATH.join2(this.fs.realPath(t),e);try{this.nodefs.unlinkSync(r)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.rmdir=function(t,e){var r=this.PATH.join2(this.fs.realPath(t),e);try{this.nodefs.rmdirSync(r)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.readdir=function(t){var e=this.fs.realPath(t);try{var r=this.nodefs.readdirSync(e);return r.push(".",".."),r}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.symlink=function(t,e,r){var n=this.PATH.join2(this.fs.realPath(t),e);try{this.nodefs.symlinkSync(r,n)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}},Z.prototype.readlink=function(t){var e=this.fs.realPath(t);try{return this.nodefs.readlinkSync(e)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}};var V=function(t,e,r,n){void 0===t&&(t=self.FS),void 0===e&&(e=self.PATH),void 0===r&&(r=self.ERRNO_CODES),void 0===n&&(n=k),this.flagsToPermissionStringMap={0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},this.nodefs=n,this.FS=t,this.PATH=e,this.ERRNO_CODES=r,this.node_ops=new Z(this),this.stream_ops=new G(this)};V.prototype.mount=function(t){return this.createNode(null,"/",this.getMode(t.opts.root),0)},V.prototype.createNode=function(t,e,r,n){var i=this.FS;if(!i.isDir(r)&&!i.isFile(r)&&!i.isLink(r))throw new i.ErrnoError(this.ERRNO_CODES.EINVAL);var o=i.createNode(t,e,r);return o.node_ops=this.node_ops,o.stream_ops=this.stream_ops,o},V.prototype.getMode=function(t){var e;try{e=this.nodefs.lstatSync(t)}catch(t){if(!t.code)throw t;throw new this.FS.ErrnoError(this.ERRNO_CODES[t.code])}return e.mode},V.prototype.realPath=function(t){for(var e=[];t.parent!==t;)e.push(t.name),t=t.parent;return e.push(t.mount.opts.root),e.reverse(),this.PATH.join.apply(null,e)},V.prototype.flagsToPermissionString=function(t){var e="string"==typeof t?parseInt(t,10):t;return(e&=8191)in this.flagsToPermissionStringMap?this.flagsToPermissionStringMap[e]:t},V.prototype.getNodeFS=function(){return this.nodefs},V.prototype.getFS=function(){return this.FS},V.prototype.getPATH=function(){return this.PATH},V.prototype.getERRNO_CODES=function(){return this.ERRNO_CODES};var Y=function(){};Y.prototype.supportsLinks=function(){return!1},Y.prototype.diskSpace=function(t,e){e(0,0)},Y.prototype.openFile=function(t,e,r){throw new f(a.ENOTSUP)},Y.prototype.createFile=function(t,e,r,n){throw new f(a.ENOTSUP)},Y.prototype.open=function(t,e,r,n){var i=this;this.stat(t,!1,(function(o,s){if(o)switch(e.pathNotExistsAction()){case l.CREATE_FILE:return i.stat(u.dirname(t),!1,(function(o,a){o?n(o):a&&!a.isDirectory()?n(f.ENOTDIR(u.dirname(t))):i.createFile(t,e,r,n)}));case l.THROW_EXCEPTION:return n(f.ENOENT(t));default:return n(new f(a.EINVAL,"Invalid FileFlag object."))}else{if(s&&s.isDirectory())return n(f.EISDIR(t));switch(e.pathExistsAction()){case l.THROW_EXCEPTION:return n(f.EEXIST(t));case l.TRUNCATE_FILE:return i.openFile(t,e,(function(t,e){t?n(t):e?e.truncate(0,(function(){e.sync((function(){n(null,e)}))})):N()}));case l.NOP:return i.openFile(t,e,n);default:return n(new f(a.EINVAL,"Invalid FileFlag object."))}}}))},Y.prototype.rename=function(t,e,r){r(new f(a.ENOTSUP))},Y.prototype.renameSync=function(t,e){throw new f(a.ENOTSUP)},Y.prototype.stat=function(t,e,r){r(new f(a.ENOTSUP))},Y.prototype.statSync=function(t,e){throw new f(a.ENOTSUP)},Y.prototype.openFileSync=function(t,e,r){throw new f(a.ENOTSUP)},Y.prototype.createFileSync=function(t,e,r){throw new f(a.ENOTSUP)},Y.prototype.openSync=function(t,e,r){var n;try{n=this.statSync(t,!1)}catch(n){switch(e.pathNotExistsAction()){case l.CREATE_FILE:if(!this.statSync(u.dirname(t),!1).isDirectory())throw f.ENOTDIR(u.dirname(t));return this.createFileSync(t,e,r);case l.THROW_EXCEPTION:throw f.ENOENT(t);default:throw new f(a.EINVAL,"Invalid FileFlag object.")}}if(n.isDirectory())throw f.EISDIR(t);switch(e.pathExistsAction()){case l.THROW_EXCEPTION:throw f.EEXIST(t);case l.TRUNCATE_FILE:return this.unlinkSync(t),this.createFileSync(t,e,n.mode);case l.NOP:return this.openFileSync(t,e,r);default:throw new f(a.EINVAL,"Invalid FileFlag object.")}},Y.prototype.unlink=function(t,e){e(new f(a.ENOTSUP))},Y.prototype.unlinkSync=function(t){throw new f(a.ENOTSUP)},Y.prototype.rmdir=function(t,e){e(new f(a.ENOTSUP))},Y.prototype.rmdirSync=function(t){throw new f(a.ENOTSUP)},Y.prototype.mkdir=function(t,e,r){r(new f(a.ENOTSUP))},Y.prototype.mkdirSync=function(t,e){throw new f(a.ENOTSUP)},Y.prototype.readdir=function(t,e){e(new f(a.ENOTSUP))},Y.prototype.readdirSync=function(t){throw new f(a.ENOTSUP)},Y.prototype.exists=function(t,e){this.stat(t,null,(function(t){e(!t)}))},Y.prototype.existsSync=function(t){try{return this.statSync(t,!0),!0}catch(t){return!1}},Y.prototype.realpath=function(t,e,r){if(this.supportsLinks())for(var n=t.split(u.sep),i=0;i<n.length;i++){var o=n.slice(0,i+1);n[i]=u.join.apply(null,o)}else this.exists(t,(function(e){e?r(null,t):r(f.ENOENT(t))}))},Y.prototype.realpathSync=function(t,e){if(this.supportsLinks()){for(var r=t.split(u.sep),n=0;n<r.length;n++){var i=r.slice(0,n+1);r[n]=u.join.apply(u,i)}return r.join(u.sep)}if(this.existsSync(t))return t;throw f.ENOENT(t)},Y.prototype.truncate=function(t,e,r){this.open(t,p.getFileFlag("r+"),420,(function(t,n){if(t)return r(t);n.truncate(e,(function(t){n.close((function(e){r(t||e)}))}))}))},Y.prototype.truncateSync=function(t,e){var r=this.openSync(t,p.getFileFlag("r+"),420);try{r.truncateSync(e)}catch(t){throw t}finally{r.closeSync()}},Y.prototype.readFile=function(e,r,n,i){var o=i;this.open(e,n,420,(function(e,n){if(e)return i(e);i=function(t,e){n.close((function(r){return t||(t=r),o(t,e)}))},n.stat((function(e,o){if(e)return i(e);var a=t.alloc(o.size);n.read(a,0,o.size,0,(function(t){if(t)return i(t);if(null===r)return i(t,a);try{i(null,a.toString(r))}catch(t){i(t)}}))}))}))},Y.prototype.readFileSync=function(e,r,n){var i=this.openSync(e,n,420);try{var o=i.statSync(),a=t.alloc(o.size);return i.readSync(a,0,o.size,0),i.closeSync(),null===r?a:a.toString(r)}finally{i.closeSync()}},Y.prototype.writeFile=function(e,r,n,i,o,a){var s=a;this.open(e,i,420,(function(e,i){if(e)return a(e);a=function(t){i.close((function(e){s(t||e)}))};try{"string"==typeof r&&(r=t.from(r,n))}catch(t){return a(t)}i.write(r,0,r.length,0,a)}))},Y.prototype.writeFileSync=function(e,r,n,i,o){var a=this.openSync(e,i,o);try{"string"==typeof r&&(r=t.from(r,n)),a.writeSync(r,0,r.length,0)}finally{a.closeSync()}},Y.prototype.appendFile=function(e,r,n,i,o,a){var s=a;this.open(e,i,o,(function(e,i){if(e)return a(e);a=function(t){i.close((function(e){s(t||e)}))},"string"==typeof r&&(r=t.from(r,n)),i.write(r,0,r.length,null,a)}))},Y.prototype.appendFileSync=function(e,r,n,i,o){var a=this.openSync(e,i,o);try{"string"==typeof r&&(r=t.from(r,n)),a.writeSync(r,0,r.length,null)}finally{a.closeSync()}},Y.prototype.chmod=function(t,e,r,n){n(new f(a.ENOTSUP))},Y.prototype.chmodSync=function(t,e,r){throw new f(a.ENOTSUP)},Y.prototype.chown=function(t,e,r,n,i){i(new f(a.ENOTSUP))},Y.prototype.chownSync=function(t,e,r,n){throw new f(a.ENOTSUP)},Y.prototype.utimes=function(t,e,r,n){n(new f(a.ENOTSUP))},Y.prototype.utimesSync=function(t,e,r){throw new f(a.ENOTSUP)},Y.prototype.link=function(t,e,r){r(new f(a.ENOTSUP))},Y.prototype.linkSync=function(t,e){throw new f(a.ENOTSUP)},Y.prototype.symlink=function(t,e,r,n){n(new f(a.ENOTSUP))},Y.prototype.symlinkSync=function(t,e,r){throw new f(a.ENOTSUP)},Y.prototype.readlink=function(t,e){e(new f(a.ENOTSUP))},Y.prototype.readlinkSync=function(t){throw new f(a.ENOTSUP)};var K=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.supportsSynch=function(){return!0},e.prototype.rename=function(t,e,r){try{this.renameSync(t,e),r()}catch(t){r(t)}},e.prototype.stat=function(t,e,r){try{r(null,this.statSync(t,e))}catch(t){r(t)}},e.prototype.open=function(t,e,r,n){try{n(null,this.openSync(t,e,r))}catch(t){n(t)}},e.prototype.unlink=function(t,e){try{this.unlinkSync(t),e()}catch(t){e(t)}},e.prototype.rmdir=function(t,e){try{this.rmdirSync(t),e()}catch(t){e(t)}},e.prototype.mkdir=function(t,e,r){try{this.mkdirSync(t,e),r()}catch(t){r(t)}},e.prototype.readdir=function(t,e){try{e(null,this.readdirSync(t))}catch(t){e(t)}},e.prototype.chmod=function(t,e,r,n){try{this.chmodSync(t,e,r),n()}catch(t){n(t)}},e.prototype.chown=function(t,e,r,n,i){try{this.chownSync(t,e,r,n),i()}catch(t){i(t)}},e.prototype.utimes=function(t,e,r,n){try{this.utimesSync(t,e,r),n()}catch(t){n(t)}},e.prototype.link=function(t,e,r){try{this.linkSync(t,e),r()}catch(t){r(t)}},e.prototype.symlink=function(t,e,r,n){try{this.symlinkSync(t,e,r),n()}catch(t){n(t)}},e.prototype.readlink=function(t,e){try{e(null,this.readlinkSync(t))}catch(t){e(t)}},e}(Y),X=function(){};X.prototype.sync=function(t){t(new f(a.ENOTSUP))},X.prototype.syncSync=function(){throw new f(a.ENOTSUP)},X.prototype.datasync=function(t){this.sync(t)},X.prototype.datasyncSync=function(){return this.syncSync()},X.prototype.chown=function(t,e,r){r(new f(a.ENOTSUP))},X.prototype.chownSync=function(t,e){throw new f(a.ENOTSUP)},X.prototype.chmod=function(t,e){e(new f(a.ENOTSUP))},X.prototype.chmodSync=function(t){throw new f(a.ENOTSUP)},X.prototype.utimes=function(t,e,r){r(new f(a.ENOTSUP))},X.prototype.utimesSync=function(t,e){throw new f(a.ENOTSUP)};var $=function(e){function r(t,r,n,i,o){if(e.call(this),this._pos=0,this._dirty=!1,this._fs=t,this._path=r,this._flag=n,this._stat=i,this._buffer=o||z(),this._stat.size!==this._buffer.length&&this._flag.isReadable())throw new Error("Invalid buffer: Buffer is "+this._buffer.length+" long, yet Stats object specifies that file is "+this._stat.size+" long.")}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.prototype.getBuffer=function(){return this._buffer},r.prototype.getStats=function(){return this._stat},r.prototype.getFlag=function(){return this._flag},r.prototype.getPath=function(){return this._path},r.prototype.getPos=function(){return this._flag.isAppendable()?this._stat.size:this._pos},r.prototype.advancePos=function(t){return this._pos+=t},r.prototype.setPos=function(t){return this._pos=t},r.prototype.sync=function(t){try{this.syncSync(),t()}catch(e){t(e)}},r.prototype.syncSync=function(){throw new f(a.ENOTSUP)},r.prototype.close=function(t){try{this.closeSync(),t()}catch(e){t(e)}},r.prototype.closeSync=function(){throw new f(a.ENOTSUP)},r.prototype.stat=function(t){try{t(null,this._stat.clone())}catch(e){t(e)}},r.prototype.statSync=function(){return this._stat.clone()},r.prototype.truncate=function(t,e){try{this.truncateSync(t),this._flag.isSynchronous()&&!k.getRootFS().supportsSynch()&&this.sync(e),e()}catch(t){return e(t)}},r.prototype.truncateSync=function(e){if(this._dirty=!0,!this._flag.isWriteable())throw new f(a.EPERM,"File not opened with a writeable mode.");if(this._stat.mtime=new Date,e>this._buffer.length){var r=t.alloc(e-this._buffer.length,0);return this.writeSync(r,0,r.length,this._buffer.length),void(this._flag.isSynchronous()&&k.getRootFS().supportsSynch()&&this.syncSync())}this._stat.size=e;var n=t.alloc(e);this._buffer.copy(n,0,0,e),this._buffer=n,this._flag.isSynchronous()&&k.getRootFS().supportsSynch()&&this.syncSync()},r.prototype.write=function(t,e,r,n,i){try{i(null,this.writeSync(t,e,r,n),t)}catch(t){i(t)}},r.prototype.writeSync=function(e,r,n,i){if(this._dirty=!0,null==i&&(i=this.getPos()),!this._flag.isWriteable())throw new f(a.EPERM,"File not opened with a writeable mode.");var o=i+n;if(o>this._stat.size&&(this._stat.size=o,o>this._buffer.length)){var s=t.alloc(o);this._buffer.copy(s),this._buffer=s}var u=e.copy(this._buffer,i,r,r+n);return this._stat.mtime=new Date,this._flag.isSynchronous()?(this.syncSync(),u):(this.setPos(i+u),u)},r.prototype.read=function(t,e,r,n,i){try{i(null,this.readSync(t,e,r,n),t)}catch(t){i(t)}},r.prototype.readSync=function(t,e,r,n){if(!this._flag.isReadable())throw new f(a.EPERM,"File not opened with a readable mode.");null==n&&(n=this.getPos()),n+r>this._stat.size&&(r=this._stat.size-n);var i=this._buffer.copy(t,e,n,n+r);return this._stat.atime=new Date,this._pos=n+r,i},r.prototype.chmod=function(t,e){try{this.chmodSync(t),e()}catch(t){e(t)}},r.prototype.chmodSync=function(t){if(!this._fs.supportsProps())throw new f(a.ENOTSUP);this._dirty=!0,this._stat.chmod(t),this.syncSync()},r.prototype.isDirty=function(){return this._dirty},r.prototype.resetDirty=function(){this._dirty=!1},r}(X),J=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){t()},e.prototype.syncSync=function(){},e.prototype.close=function(t){t()},e.prototype.closeSync=function(){},e}($),Q=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.syncSync=function(){this.isDirty()&&(this._fs._syncSync(this),this.resetDirty())},e.prototype.closeSync=function(){this.syncSync()},e}($),tt=function(t){function e(r,n,i){if(void 0===i&&(i=!0),t.call(this),this._queue=[],this._queueRunning=!1,this._isInitialized=!1,this._initializeCallbacks=[],this._sync=r,this._async=n,!r.supportsSynch())throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");I(i,e.Name,{sync:"sync file system instance",async:"async file system instance"})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){try{var n=new e(t.sync,t.async,!1);n.initialize((function(t){t?r(t):r(null,n)}),!1)}catch(t){r(t)}},e.isAvailable=function(){return!0},e.prototype.getName=function(){return e.Name},e.prototype._syncSync=function(t){this._sync.writeFileSync(t.getPath(),t.getBuffer(),null,p.getFileFlag("w"),t.getStats().mode),this.enqueueOp({apiMethod:"writeFile",arguments:[t.getPath(),t.getBuffer(),null,t.getFlag(),t.getStats().mode]})},e.prototype.initialize=function(t,e){var r=this;void 0===e&&(e=!0),e&&console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");var n=this._initializeCallbacks;if(this._isInitialized)t();else if(1===n.push(t)){var i=function(t,e,n){"/"!==t&&r._sync.mkdirSync(t,e),r._async.readdir(t,(function(e,r){var i=0;e?n(e):function e(a){a?n(a):i<r.length?(o(u.join(t,r[i]),e),i++):n()}()}))},o=function(t,e){r._async.stat(t,!1,(function(n,o){n?e(n):o.isDirectory()?i(t,o.mode,e):function(t,e,n){r._async.readFile(t,null,p.getFileFlag("r"),(function(i,o){if(i)n(i);else try{r._sync.writeFileSync(t,o,null,p.getFileFlag("w"),e)}catch(t){i=t}finally{n(i)}}))}(t,o.mode,e)}))};i("/",0,(function(t){r._isInitialized=!t,r._initializeCallbacks=[],n.forEach((function(e){return e(t)}))}))}},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return this._sync.supportsProps()&&this._async.supportsProps()},e.prototype.renameSync=function(t,e){this.checkInitialized(),this._sync.renameSync(t,e),this.enqueueOp({apiMethod:"rename",arguments:[t,e]})},e.prototype.statSync=function(t,e){return this.checkInitialized(),this._sync.statSync(t,e)},e.prototype.openSync=function(t,e,r){return this.checkInitialized(),this._sync.openSync(t,e,r).closeSync(),new Q(this,t,e,this._sync.statSync(t,!1),this._sync.readFileSync(t,null,p.getFileFlag("r")))},e.prototype.unlinkSync=function(t){this.checkInitialized(),this._sync.unlinkSync(t),this.enqueueOp({apiMethod:"unlink",arguments:[t]})},e.prototype.rmdirSync=function(t){this.checkInitialized(),this._sync.rmdirSync(t),this.enqueueOp({apiMethod:"rmdir",arguments:[t]})},e.prototype.mkdirSync=function(t,e){this.checkInitialized(),this._sync.mkdirSync(t,e),this.enqueueOp({apiMethod:"mkdir",arguments:[t,e]})},e.prototype.readdirSync=function(t){return this.checkInitialized(),this._sync.readdirSync(t)},e.prototype.existsSync=function(t){return this.checkInitialized(),this._sync.existsSync(t)},e.prototype.chmodSync=function(t,e,r){this.checkInitialized(),this._sync.chmodSync(t,e,r),this.enqueueOp({apiMethod:"chmod",arguments:[t,e,r]})},e.prototype.chownSync=function(t,e,r,n){this.checkInitialized(),this._sync.chownSync(t,e,r,n),this.enqueueOp({apiMethod:"chown",arguments:[t,e,r,n]})},e.prototype.utimesSync=function(t,e,r){this.checkInitialized(),this._sync.utimesSync(t,e,r),this.enqueueOp({apiMethod:"utimes",arguments:[t,e,r]})},e.prototype.checkInitialized=function(){if(!this._isInitialized)throw new f(a.EPERM,"AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.")},e.prototype.enqueueOp=function(t){var e=this;if(this._queue.push(t),!this._queueRunning){this._queueRunning=!0;var r=function(t){if(t&&console.error("WARNING: File system has desynchronized. Received following error: "+t+"\n$"),e._queue.length>0){var n=e._queue.shift(),i=n.arguments;i.push(r),e._async[n.apiMethod].apply(e._async,i)}else e._queueRunning=!1};r()}},e}(K);tt.Name="AsyncMirror",tt.Options={sync:{type:"object",description:"The synchronous file system to mirror the asynchronous file system to."},async:{type:"object",description:"The asynchronous file system to mirror."}};var et=Math.max;function rt(t){return t}function nt(t,e){return function(t,e,r){return e=et(void 0===e?t.length-1:e,0),function(){for(var n=arguments,i=-1,o=et(n.length-e,0),a=Array(o);++i<o;)a[i]=n[e+i];i=-1;for(var s=Array(e+1);++i<e;)s[i]=n[i];return s[e]=r(a),function(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}(t,this,s)}}(t,e,rt)}var it=function(t){return nt((function(e){var r=e.pop();t.call(this,e,r)}))};function ot(t){return nt((function(e,r){var n=it((function(r,n){var i=this;return t(e,(function(t,e){t.apply(i,r.concat(e))}),n)}));return r.length?n.apply(this,r):n}))}var at="object"==typeof n&&n&&n.Object===Object&&n,st="object"==typeof self&&self&&self.Object===Object&&self,ut=at||st||Function("return this")(),ct=ut.Symbol,lt=Object.prototype,ft=lt.hasOwnProperty,ht=lt.toString,dt=ct?ct.toStringTag:void 0,pt=Object.prototype.toString,yt="[object Null]",gt="[object Undefined]",_t=ct?ct.toStringTag:void 0;function bt(t){return null==t?void 0===t?gt:yt:_t&&_t in Object(t)?function(t){var e=ft.call(t,dt),r=t[dt];try{t[dt]=void 0;var n=!0}catch(t){}var i=ht.call(t);return n&&(e?t[dt]=r:delete t[dt]),i}(t):function(t){return pt.call(t)}(t)}var mt="[object AsyncFunction]",vt="[object Function]",wt="[object GeneratorFunction]",Et="[object Proxy]",St=9007199254740991;function Rt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=St}function kt(t){return null!=t&&Rt(t.length)&&!function(t){if(!function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}(t))return!1;var e=bt(t);return e==vt||e==wt||e==mt||e==Et}(t)}var Ot={};function Tt(){}function At(t){return function(){if(null!==t){var e=t;t=null,e.apply(this,arguments)}}}var It="function"==typeof Symbol&&Symbol.iterator,Lt=function(t){return It&&t[It]&&t[It]()};function xt(t){return null!=t&&"object"==typeof t}var Nt="[object Arguments]";function Pt(t){return xt(t)&&bt(t)==Nt}var Dt=Object.prototype,Ft=Dt.hasOwnProperty,Mt=Dt.propertyIsEnumerable,jt=Pt(function(){return arguments}())?Pt:function(t){return xt(t)&&Ft.call(t,"callee")&&!Mt.call(t,"callee")},Ct=Array.isArray,Ut="object"==typeof e&&e&&!e.nodeType&&e,Bt=Ut&&"object"==typeof i&&i&&!i.nodeType&&i,zt=Bt&&Bt.exports===Ut?ut.Buffer:void 0,qt=(zt?zt.isBuffer:void 0)||function(){return!1},Wt=9007199254740991,Ht=/^(?:0|[1-9]\d*)$/;function Gt(t,e){return!!(e=null==e?Wt:e)&&("number"==typeof t||Ht.test(t))&&t>-1&&t%1==0&&t<e}var Zt={};Zt["[object Float32Array]"]=Zt["[object Float64Array]"]=Zt["[object Int8Array]"]=Zt["[object Int16Array]"]=Zt["[object Int32Array]"]=Zt["[object Uint8Array]"]=Zt["[object Uint8ClampedArray]"]=Zt["[object Uint16Array]"]=Zt["[object Uint32Array]"]=!0,Zt["[object Arguments]"]=Zt["[object Array]"]=Zt["[object ArrayBuffer]"]=Zt["[object Boolean]"]=Zt["[object DataView]"]=Zt["[object Date]"]=Zt["[object Error]"]=Zt["[object Function]"]=Zt["[object Map]"]=Zt["[object Number]"]=Zt["[object Object]"]=Zt["[object RegExp]"]=Zt["[object Set]"]=Zt["[object String]"]=Zt["[object WeakMap]"]=!1;var Vt,Yt="object"==typeof e&&e&&!e.nodeType&&e,Kt=Yt&&"object"==typeof i&&i&&!i.nodeType&&i,Xt=Kt&&Kt.exports===Yt&&at.process,$t=function(){try{return Xt&&Xt.binding&&Xt.binding("util")}catch(t){}}(),Jt=$t&&$t.isTypedArray,Qt=Jt?(Vt=Jt,function(t){return Vt(t)}):function(t){return xt(t)&&Rt(t.length)&&!!Zt[bt(t)]},te=Object.prototype.hasOwnProperty;var ee=Object.prototype,re=function(t,e){return function(r){return t(e(r))}}(Object.keys,Object),ne=Object.prototype.hasOwnProperty;function ie(t){return kt(t)?function(t,e){var r=Ct(t),n=!r&&jt(t),i=!r&&!n&&qt(t),o=!r&&!n&&!i&&Qt(t),a=r||n||i||o,s=a?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=s.length;for(var c in t)!e&&!te.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Gt(c,u))||s.push(c);return s}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||ee))return re(t);var e,r,n=[];for(var i in Object(t))ne.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t)}function oe(t){return function(){if(null===t)throw new Error("Callback was already called.");var e=t;t=null,e.apply(this,arguments)}}function ae(t){return function(e,r,n){if(n=At(n||Tt),t<=0||!e)return n(null);var i=function(t){if(kt(t))return function(t){var e=-1,r=t.length;return function(){return++e<r?{value:t[e],key:e}:null}}(t);var e=Lt(t);return e?function(t){var e=-1;return function(){var r=t.next();return r.done?null:(e++,{value:r.value,key:e})}}(e):function(t){var e=ie(t),r=-1,n=e.length;return function(){var i=e[++r];return r<n?{value:t[i],key:i}:null}}(t)}(e),o=!1,a=0;function s(t,e){if(a-=1,t)o=!0,n(t);else{if(e===Ot||o&&a<=0)return o=!0,n(null);u()}}function u(){for(;a<t&&!o;){var e=i();if(null===e)return o=!0,void(a<=0&&n(null));a+=1,r(e.value,e.key,oe(s))}}u()}}function se(t,e,r,n){ae(e)(t,r,n)}function ue(t,e){return function(r,n,i){return t(r,e,n,i)}}function ce(t,e,r){r=At(r||Tt);var n=0,i=0,o=t.length;function a(t,e){t?r(t):++i!==o&&e!==Ot||r(null)}for(0===o&&r(null);n<o;n++)e(t[n],n,oe(a))}var le,fe=ue(se,1/0),he=function(t,e,r){(kt(t)?ce:fe)(t,e,r)};function de(t,e,r,n){n=n||Tt;var i=[],o=0;t(e=e||[],(function(t,e,n){var a=o++;r(t,(function(t,e){i[a]=e,n(t)}))}),(function(t){n(t,i)}))}ot((le=de,function(t,e,r){return le(he,t,e,r)}));var pe=function(t){return function(e,r,n,i){return t(ae(r),e,n,i)}}(de);ot(ue(pe,1)),nt((function(t,e){return nt((function(r){return t.apply(null,e.concat(r))}))}));var ye="\\ud800-\\udfff",ge="["+ye+"]",_e="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",be="[^"+ye+"]",me="(?:\\ud83c[\\udde6-\\uddff]){2}",ve="[\\ud800-\\udbff][\\udc00-\\udfff]",we=([be,me,ve].join("|"),[be+_e+"?",_e,me,ve,ge].join("|"),"function"==typeof setImmediate&&setImmediate),Ee="object"==typeof o&&"function"==typeof o.nextTick;function Se(t){setTimeout(t,0)}function Re(t){return nt((function(e,r){t((function(){e.apply(null,r)}))}))}Re(we?setImmediate:Ee?o.nextTick:Se);var ke,Oe=ue(se,1),Te=nt((function(t){return nt((function(e){var r,n,i,o,a=this,s=e[e.length-1];"function"==typeof s?e.pop():s=Tt,r=t,n=e,i=function(t,e,r){e.apply(a,t.concat(nt((function(t,e){r(t,e)}))))},o=At((o=function(t,e){s.apply(a,[t].concat(e))})||Tt),Oe(r,(function(t,e,r){i(n,t,(function(t,e){n=e,r(t)}))}),(function(t){o(t,n)}))}))}));function Ae(t){return nt((function(e,r){e.apply(null,r.concat(nt((function(e,r){"object"==typeof console&&(e?console.error&&console.error(e):console[t]&&function(e,r){for(var n=-1,i=null==e?0:e.length;++n<i&&!1!==(o=e[n],void console[t](o)););var o}(r))}))))}))}function Ie(t,e,r){he(t,function(t){return function(e,r,n){return t(e,n)}}(e),r)}nt((function(t){return Te.apply(null,t.reverse())})),nt((function(t){var e=[null].concat(t);return it((function(t,r){return r.apply(this,e)}))})),Ae("dir"),Ae("log"),Re(Ee?o.nextTick:we?setImmediate:Se),Math.ceil,Math.max;var Le=function(t){this._cache={},this._client=t};Le.prototype.readdir=function(t,e){var r=this,n=this.getCachedDirInfo(t);this._wrap((function(e){null!==n&&n.contents?r._client.readdir(t,{contentHash:n.stat.contentHash},e):r._client.readdir(t,e)}),(function(i,o,a,s){i?i.status===Dropbox.ApiError.NO_CONTENT&&null!==n?e(null,n.contents.slice(0)):e(i):(r.updateCachedDirInfo(t,a,o.slice(0)),s.forEach((function(e){r.updateCachedInfo(u.join(t,e.name),e)})),e(null,o))}))},Le.prototype.remove=function(t,e){var r=this;this._wrap((function(e){r._client.remove(t,e)}),(function(n,i){n||r.updateCachedInfo(t,i),e(n)}))},Le.prototype.move=function(t,e,r){var n=this;this._wrap((function(r){n._client.move(t,e,r)}),(function(i,o){i||(n.deleteCachedInfo(t),n.updateCachedInfo(e,o)),r(i)}))},Le.prototype.stat=function(t,e){var r=this;this._wrap((function(e){r._client.stat(t,e)}),(function(n,i){n||r.updateCachedInfo(t,i),e(n,i)}))},Le.prototype.readFile=function(t,e){var r=this,n=this.getCachedFileInfo(t);null!==n&&null!==n.contents?this.stat(t,(function(i,o){i?e(i):o.contentHash===n.stat.contentHash?e(i,n.contents.slice(0),n.stat):r.readFile(t,e)})):this._wrap((function(e){r._client.readFile(t,{arrayBuffer:!0},e)}),(function(n,i,o){n||r.updateCachedInfo(t,o,i.slice(0)),e(n,i,o)}))},Le.prototype.writeFile=function(t,e,r){var n=this;this._wrap((function(r){n._client.writeFile(t,e,r)}),(function(i,o){i||n.updateCachedInfo(t,o,e.slice(0)),r(i,o)}))},Le.prototype.mkdir=function(t,e){var r=this;this._wrap((function(e){r._client.mkdir(t,e)}),(function(n,i){n||r.updateCachedInfo(t,i,[]),e(n)}))},Le.prototype._wrap=function(t,e){var r=0,n=function(i){if(i&&3>++r)switch(i.status){case Dropbox.ApiError.SERVER_ERROR:case Dropbox.ApiError.NETWORK_ERROR:case Dropbox.ApiError.RATE_LIMITED:setTimeout((function(){t(n)}),2e3);break;default:e.apply(null,arguments)}else e.apply(null,arguments)};t(n)},Le.prototype.getCachedInfo=function(t){return this._cache[t.toLowerCase()]},Le.prototype.putCachedInfo=function(t,e){this._cache[t.toLowerCase()]=e},Le.prototype.deleteCachedInfo=function(t){delete this._cache[t.toLowerCase()]},Le.prototype.getCachedDirInfo=function(t){var e,r=this.getCachedInfo(t);return(e=r)&&e.stat.isFolder?r:null},Le.prototype.getCachedFileInfo=function(t){var e,r=this.getCachedInfo(t);return(e=r)&&e.stat.isFile?r:null},Le.prototype.updateCachedDirInfo=function(t,e,r){void 0===r&&(r=null);var n=this.getCachedInfo(t);null===e.contentHash||void 0!==n&&n.stat.contentHash===e.contentHash||this.putCachedInfo(t,{stat:e,contents:r})},Le.prototype.updateCachedFileInfo=function(t,e,r){void 0===r&&(r=null);var n=this.getCachedInfo(t);null===e.versionTag||void 0!==n&&n.stat.versionTag===e.versionTag||this.putCachedInfo(t,{stat:e,contents:r})},Le.prototype.updateCachedInfo=function(t,e,r){var n;void 0===r&&(r=null),e.isFile&&(null==(n=r)||"object"==typeof n&&"number"==typeof n.byteLength)?this.updateCachedFileInfo(t,e,r):e.isFolder&&Array.isArray(r)&&this.updateCachedDirInfo(t,e,r)};var xe=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;if(this.isDirty()){var r=D(this.getBuffer());this._fs._writeFileStrict(this.getPath(),r,(function(r){r||e.resetDirty(),t(r)}))}else t()},e.prototype.close=function(t){this.sync(t)},e}($),Ne=function(t){function e(r,n){void 0===n&&(n=!0),t.call(this),this._client=new Le(r),I(n,e.Name,{client:"authenticated dropbox client instance"}),ke||((ke={})[Dropbox.ApiError.NETWORK_ERROR]=a.EIO,ke[Dropbox.ApiError.INVALID_PARAM]=a.EINVAL,ke[Dropbox.ApiError.INVALID_TOKEN]=a.EPERM,ke[Dropbox.ApiError.OAUTH_ERROR]=a.EPERM,ke[Dropbox.ApiError.NOT_FOUND]=a.ENOENT,ke[Dropbox.ApiError.INVALID_METHOD]=a.EINVAL,ke[Dropbox.ApiError.NOT_ACCEPTABLE]=a.EINVAL,ke[Dropbox.ApiError.CONFLICT]=a.EINVAL,ke[Dropbox.ApiError.RATE_LIMITED]=a.EBUSY,ke[Dropbox.ApiError.SERVER_ERROR]=a.EBUSY,ke[Dropbox.ApiError.OVER_QUOTA]=a.ENOSPC)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e(t.client,!1))},e.isAvailable=function(){return"undefined"!=typeof Dropbox},e.prototype.getName=function(){return e.Name},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSymlinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!1},e.prototype.empty=function(t){var e=this;this._client.readdir("/",(function(r,n){r?t(e.convert(r,"/")):Ie(n,(function(t,r){var n=u.join("/",t);e._client.remove(n,(function(t){r(t?e.convert(t,n):null)}))}),(function(e){e?t(e):t()}))}))},e.prototype.rename=function(t,e,r){var n=this;this._client.move(t,e,(function(i){i?n._client.stat(e,(function(o,a){if(o||a.isFolder){var s=i.response.error.indexOf(t)>-1?t:e;r(n.convert(i,s))}else n._client.remove(e,(function(i){i?r(n.convert(i,e)):n.rename(t,e,r)}))})):r()}))},e.prototype.stat=function(t,e,r){var n=this;this._client.stat(t,(function(e,i){if(e)r(n.convert(e,t));else{if(!i||!i.isRemoved){var o=new y(n._statType(i),i.size);return r(null,o)}r(f.FileError(a.ENOENT,t))}}))},e.prototype.open=function(t,e,r,n){var i=this;this._client.readFile(t,(function(r,o,a){if(!r){var s;s=null===o?z():C(o);var u=i._makeFile(t,e,a,s);return n(null,u)}if(!e.isReadable()){if(r.status===Dropbox.ApiError.NOT_FOUND){var c=new ArrayBuffer(0);return i._writeFileStrict(t,c,(function(r,o){if(r)n(r);else{var a=i._makeFile(t,e,o,C(c));n(null,a)}}))}return n(i.convert(r,t))}n(i.convert(r,t))}))},e.prototype._writeFileStrict=function(t,e,r){var n=this,i=u.dirname(t);this.stat(i,!1,(function(o,s){o?r(f.FileError(a.ENOENT,i)):n._client.writeFile(t,e,(function(e,i){e?r(n.convert(e,t)):r(null,i)}))}))},e.prototype._statType=function(t){return t.isFile?d.FILE:d.DIRECTORY},e.prototype._makeFile=function(t,e,r,n){var i=this._statType(r),o=new y(i,r.size);return new xe(this,t,e,o,n)},e.prototype._remove=function(t,e,r){var n=this;this._client.stat(t,(function(i,o){i?e(n.convert(i,t)):o.isFile&&!r?e(f.FileError(a.ENOTDIR,t)):!o.isFile&&r?e(f.FileError(a.EISDIR,t)):n._client.remove(t,(function(r){e(r?n.convert(r,t):null)}))}))},e.prototype.unlink=function(t,e){this._remove(t,e,!0)},e.prototype.rmdir=function(t,e){this._remove(t,e,!1)},e.prototype.mkdir=function(t,e,r){var n=this,i=u.dirname(t);this._client.stat(i,(function(e,o){e?r(n.convert(e,i)):n._client.mkdir(t,(function(e){r(e?f.FileError(a.EEXIST,t):null)}))}))},e.prototype.readdir=function(t,e){var r=this;this._client.readdir(t,(function(t,n){return t?e(r.convert(t)):e(null,n)}))},e.prototype.convert=function(t,e){void 0===e&&(e=null);var r=ke[t.status];return void 0===r&&(r=a.EIO),e?f.FileError(r,e):new f(r)},e}(Y);function Pe(t,e){void 0===e&&(e="");for(var r=t.errno,n=t.node,i=[];n&&(i.unshift(n.name),n!==n.parent);)n=n.parent;return new f(r,c[r],i.length>0?"/"+i.join("/"):e)}Ne.Name="Dropbox",Ne.Options={client:{type:"object",description:"An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",validator:function(t,e){t.isAuthenticated&&t.isAuthenticated()?e():e(new f(a.EINVAL,"'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."))}}};var De=function(t){function e(e,r,n,i){t.call(this),this._fs=e,this._FS=r,this._path=n,this._stream=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getPos=function(){},e.prototype.close=function(t){var e=null;try{this.closeSync()}catch(t){e=t}finally{t(e)}},e.prototype.closeSync=function(){try{this._FS.close(this._stream)}catch(t){throw Pe(t,this._path)}},e.prototype.stat=function(t){try{t(null,this.statSync())}catch(e){t(e)}},e.prototype.statSync=function(){try{return this._fs.statSync(this._path,!1)}catch(t){throw Pe(t,this._path)}},e.prototype.truncate=function(t,e){var r=null;try{this.truncateSync(t)}catch(t){r=t}finally{e(r)}},e.prototype.truncateSync=function(t){try{this._FS.ftruncate(this._stream.fd,t)}catch(t){throw Pe(t,this._path)}},e.prototype.write=function(t,e,r,n,i){try{i(null,this.writeSync(t,e,r,n),t)}catch(t){i(t)}},e.prototype.writeSync=function(t,e,r,n){try{var i=F(t),o=null===n?void 0:n;return this._FS.write(this._stream,i,e,r,o)}catch(t){throw Pe(t,this._path)}},e.prototype.read=function(t,e,r,n,i){try{i(null,this.readSync(t,e,r,n),t)}catch(t){i(t)}},e.prototype.readSync=function(t,e,r,n){try{var i=F(t),o=null===n?void 0:n;return this._FS.read(this._stream,i,e,r,o)}catch(t){throw Pe(t,this._path)}},e.prototype.sync=function(t){t()},e.prototype.syncSync=function(){},e.prototype.chown=function(t,e,r){var n=null;try{this.chownSync(t,e)}catch(t){n=t}finally{r(n)}},e.prototype.chownSync=function(t,e){try{this._FS.fchown(this._stream.fd,t,e)}catch(t){throw Pe(t,this._path)}},e.prototype.chmod=function(t,e){var r=null;try{this.chmodSync(t)}catch(t){r=t}finally{e(r)}},e.prototype.chmodSync=function(t){try{this._FS.fchmod(this._stream.fd,t)}catch(t){throw Pe(t,this._path)}},e.prototype.utimes=function(t,e,r){var n=null;try{this.utimesSync(t,e)}catch(t){n=t}finally{r(n)}},e.prototype.utimesSync=function(t,e){this._fs.utimesSync(this._path,t,e)},e}(X),Fe=function(e){function r(t){e.call(this),this._FS=t}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.Create=function(t,e){e(null,new r(t.FS))},r.isAvailable=function(){return!0},r.prototype.getName=function(){return this._FS.DB_NAME()},r.prototype.isReadOnly=function(){return!1},r.prototype.supportsLinks=function(){return!0},r.prototype.supportsProps=function(){return!0},r.prototype.supportsSynch=function(){return!0},r.prototype.renameSync=function(t,e){try{this._FS.rename(t,e)}catch(r){throw r.errno===a.ENOENT?Pe(r,this.existsSync(t)?e:t):Pe(r)}},r.prototype.statSync=function(t,e){try{var r=e?this._FS.lstat(t):this._FS.stat(t),n=this.modeToFileType(r.mode);return new y(n,r.size,r.mode,r.atime,r.mtime,r.ctime)}catch(e){throw Pe(e,t)}},r.prototype.openSync=function(t,e,r){try{var n=this._FS.open(t,e.getFlagString(),r);if(this._FS.isDir(n.node.mode))throw this._FS.close(n),f.EISDIR(t);return new De(this,this._FS,t,n)}catch(e){throw Pe(e,t)}},r.prototype.unlinkSync=function(t){try{this._FS.unlink(t)}catch(e){throw Pe(e,t)}},r.prototype.rmdirSync=function(t){try{this._FS.rmdir(t)}catch(e){throw Pe(e,t)}},r.prototype.mkdirSync=function(t,e){try{this._FS.mkdir(t,e)}catch(e){throw Pe(e,t)}},r.prototype.readdirSync=function(t){try{return this._FS.readdir(t).filter((function(t){return"."!==t&&".."!==t}))}catch(e){throw Pe(e,t)}},r.prototype.truncateSync=function(t,e){try{this._FS.truncate(t,e)}catch(e){throw Pe(e,t)}},r.prototype.readFileSync=function(t,e,r){try{var n=j(this._FS.readFile(t,{flags:r.getFlagString()}));return e?n.toString(e):n}catch(e){throw Pe(e,t)}},r.prototype.writeFileSync=function(e,r,n,i,o){try{n&&(r=t.from(r,n));var a=F(r);this._FS.writeFile(e,a,{flags:i.getFlagString(),encoding:"binary"}),this._FS.chmod(e,o)}catch(t){throw Pe(t,e)}},r.prototype.chmodSync=function(t,e,r){try{e?this._FS.lchmod(t,r):this._FS.chmod(t,r)}catch(e){throw Pe(e,t)}},r.prototype.chownSync=function(t,e,r,n){try{e?this._FS.lchown(t,r,n):this._FS.chown(t,r,n)}catch(e){throw Pe(e,t)}},r.prototype.symlinkSync=function(t,e,r){try{this._FS.symlink(t,e)}catch(t){throw Pe(t)}},r.prototype.readlinkSync=function(t){try{return this._FS.readlink(t)}catch(e){throw Pe(e,t)}},r.prototype.utimesSync=function(t,e,r){try{this._FS.utime(t,e.getTime(),r.getTime())}catch(e){throw Pe(e,t)}},r.prototype.modeToFileType=function(t){if(this._FS.isDir(t))return d.DIRECTORY;if(this._FS.isFile(t))return d.FILE;if(this._FS.isLink(t))return d.SYMLINK;throw f.EPERM("Invalid mode: "+t)},r}(K);Fe.Name="EmscriptenFileSystem",Fe.Options={FS:{type:"object",description:"The Emscripten file system to use (the `FS` variable)"}};var Me=function(t){function e(e,r){t.call(this),this._folder=e,this._wrapped=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e(t.folder,t.wrapped))},e.isAvailable=function(){return!0},e.prototype.initialize=function(t){var e=this;this._wrapped.exists(this._folder,(function(r){r?t():e._wrapped.isReadOnly()?t(f.ENOENT(e._folder)):e._wrapped.mkdir(e._folder,511,t)}))},e.prototype.getName=function(){return this._wrapped.getName()},e.prototype.isReadOnly=function(){return this._wrapped.isReadOnly()},e.prototype.supportsProps=function(){return this._wrapped.supportsProps()},e.prototype.supportsSynch=function(){return this._wrapped.supportsSynch()},e.prototype.supportsLinks=function(){return!1},e}(Y);function je(t,e){if(null!==e&&"object"==typeof e){var r=e,n=r.path;n&&(n="/"+u.relative(t,n),r.message=r.message.replace(r.path,n),r.path=n)}return e}function Ce(t,e,r){return"Sync"!==t.slice(t.length-4)?function(){var n,i;return arguments.length>0&&(e&&(arguments[0]=u.join(this._folder,arguments[0])),r&&(arguments[1]=u.join(this._folder,arguments[1])),arguments[arguments.length-1]=(n=this._folder,"function"==typeof(i=arguments[arguments.length-1])?function(t){arguments.length>0&&(arguments[0]=je(n,t)),i.apply(null,arguments)}:i)),this._wrapped[t].apply(this._wrapped,arguments)}:function(){try{return e&&(arguments[0]=u.join(this._folder,arguments[0])),r&&(arguments[1]=u.join(this._folder,arguments[1])),this._wrapped[t].apply(this._wrapped,arguments)}catch(t){throw je(this._folder,t)}}}Me.Name="FolderAdapter",Me.Options={folder:{type:"string",description:"The folder to use as the root directory"},wrapped:{type:"object",description:"The file system to wrap"}},["diskSpace","stat","statSync","open","openSync","unlink","unlinkSync","rmdir","rmdirSync","mkdir","mkdirSync","readdir","readdirSync","exists","existsSync","realpath","realpathSync","truncate","truncateSync","readFile","readFileSync","writeFile","writeFileSync","appendFile","appendFileSync","chmod","chmodSync","chown","chownSync","utimes","utimesSync","readlink","readlinkSync"].forEach((function(t){Me.prototype[t]=Ce(t,!0,!1)})),["rename","renameSync","link","linkSync","symlink","symlinkSync"].forEach((function(t){Me.prototype[t]=Ce(t,!0,!0)}));var Ue="undefined"!=typeof window?window:"undefined"!=typeof self?self:n,Be=Ue.webkitRequestFileSystem||Ue.requestFileSystem||null;function ze(t,e,r){switch(t.name){case"PathExistsError":return f.EEXIST(e);case"QuotaExceededError":return f.FileError(a.ENOSPC,e);case"NotFoundError":return f.ENOENT(e);case"SecurityError":return f.FileError(a.EACCES,e);case"InvalidModificationError":return f.FileError(a.EPERM,e);case"TypeMismatchError":return f.FileError(r?a.ENOTDIR:a.EISDIR,e);default:return f.FileError(a.EINVAL,e)}}var qe=function(t){function e(e,r,n,i,o,a){t.call(this,e,n,i,o,a),this._entry=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;if(!this.isDirty())return t();this._entry.createWriter((function(r){var n=e.getBuffer(),i=new Blob([D(n)]),o=i.size;r.onwriteend=function(n){r.onwriteend=null,r.onerror=null,r.truncate(o),e.resetDirty(),t()},r.onerror=function(r){t(ze(r,e.getPath(),!1))},r.write(i)}))},e.prototype.close=function(t){this.sync(t)},e}($),We=function(t){function e(r,n,i){void 0===r&&(r=5),void 0===n&&(n=Ue.PERSISTENT),void 0===i&&(i=!0),t.call(this),this.size=1048576*r,this.type=n,I(i,e.Name,{size:r,type:n})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){var n=new e(t.size,t.type,!1);n.allocate((function(t){return t?r(t):r(null,n)}),!1)},e.isAvailable=function(){return!!Be},e.prototype.getName=function(){return e.Name},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSymlinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!1},e.prototype.allocate=function(t,e){var r=this;void 0===t&&(t=function(){}),void 0===e&&(e=!0),e&&console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: "+this.type+", size: "+this.size+"}, cb)' to create and allocate HTML5FS instances.");var n=function(e){r.fs=e,t()},i=function(e){t(ze(e,"/",!0))};this.type===Ue.PERSISTENT?function(t,e,r,n){if(void 0!==navigator.webkitPersistentStorage)switch(t){case Ue.PERSISTENT:navigator.webkitPersistentStorage.requestQuota(e,r,n);break;case Ue.TEMPORARY:navigator.webkitTemporaryStorage.requestQuota(e,r,n);break;default:n(new TypeError("Invalid storage type: "+t))}else Ue.webkitStorageInfo.requestQuota(t,e,r,n)}(this.type,this.size,(function(t){Be(r.type,t,n,i)}),i):Be(this.type,this.size,n,i)},e.prototype.empty=function(t){this._readdir("/",(function(e,r){e?(console.error("Failed to empty FS"),t(e)):Ie(r,(function(t,e){var r=function(){e()},n=function(r){e(ze(r,t.fullPath,!t.isDirectory))};!function(t){return t.isDirectory}(t)?t.remove(r,n):t.removeRecursively(r,n)}),(function(r){e?(console.error("Failed to empty FS"),t(e)):t()}))}))},e.prototype.rename=function(t,e,r){var n=this,i=2,o=0,s=this.fs.root,c=t,l=function(t){--i<=0&&r(ze(t,c,!1))},h=function(i){return 2==++o?r(new f(a.EINVAL,"Something was identified as both a file and a directory. This should never happen.")):t===e?r():(c=u.dirname(e),void s.getDirectory(c,{},(function(o){c=u.basename(e),i.moveTo(o,c,(function(t){r()}),(function(o){i.isDirectory?(c=e,n.unlink(e,(function(i){i?l(o):n.rename(t,e,r)}))):l(o)}))}),l))};s.getFile(t,{},h,l),s.getDirectory(t,{},h,l)},e.prototype.stat=function(t,e,r){var n=this,i={create:!1},o=function(t){var e=new y(d.DIRECTORY,4096);r(null,e)},a=function(e){r(ze(e,t,!1))};this.fs.root.getFile(t,i,(function(t){t.file((function(t){var e=new y(d.FILE,t.size);r(null,e)}),a)}),(function(){n.fs.root.getDirectory(t,i,o,a)}))},e.prototype.open=function(t,e,r,n){var i=this,o=function(r){"InvalidModificationError"===r.name&&e.isExclusive()?n(f.EEXIST(t)):n(ze(r,t,!1))};this.fs.root.getFile(t,{create:e.pathNotExistsAction()===l.CREATE_FILE,exclusive:e.isExclusive()},(function(r){r.file((function(a){var s=new FileReader;s.onloadend=function(o){var u=i._makeFile(t,r,e,a,s.result);n(null,u)},s.onerror=function(t){o(s.error)},s.readAsArrayBuffer(a)}),o)}),o)},e.prototype.unlink=function(t,e){this._remove(t,e,!0)},e.prototype.rmdir=function(t,e){var r=this;this.readdir(t,(function(n,i){n?e(n):i.length>0?e(f.ENOTEMPTY(t)):r._remove(t,e,!1)}))},e.prototype.mkdir=function(t,e,r){this.fs.root.getDirectory(t,{create:!0,exclusive:!0},(function(t){r()}),(function(e){r(ze(e,t,!0))}))},e.prototype.readdir=function(t,e){this._readdir(t,(function(t,r){if(!r)return e(t);for(var n=[],i=0,o=r;i<o.length;i+=1){var a=o[i];n.push(a.name)}e(null,n)}))},e.prototype._makeFile=function(t,e,r,n,i){void 0===i&&(i=new ArrayBuffer(0));var o=new y(d.FILE,n.size),a=C(i);return new qe(this,e,t,r,o,a)},e.prototype._readdir=function(t,e){var r=function(r){e(ze(r,t,!0))};this.fs.root.getDirectory(t,{create:!1},(function(t){var n=t.createReader(),i=[],o=function(){n.readEntries((function(t){t.length?(i=i.concat(function(t){return Array.prototype.slice.call(t||[],0)}(t)),o()):e(null,i)}),r)};o()}),r)},e.prototype._remove=function(t,e,r){var n=function(n){n.remove((function(){e()}),(function(n){e(ze(n,t,!r))}))},i=function(n){e(ze(n,t,!r))},o={create:!1};r?this.fs.root.getFile(t,o,n,i):this.fs.root.getDirectory(t,o,n,i)},e}(Y);We.Name="HTML5FS",We.Options={size:{type:"number",optional:!0,description:"Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."},type:{type:"number",optional:!0,description:"window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."}};var He=function(t,e,r,n,i,o){this.id=t,this.size=e,this.mode=r,this.atime=n,this.mtime=i,this.ctime=o};He.fromBuffer=function(t){if(void 0===t)throw new Error("NO");return new He(t.toString("ascii",30),t.readUInt32LE(0),t.readUInt16LE(4),t.readDoubleLE(6),t.readDoubleLE(14),t.readDoubleLE(22))},He.prototype.toStats=function(){return new y((61440&this.mode)===d.DIRECTORY?d.DIRECTORY:d.FILE,this.size,this.mode,new Date(this.atime),new Date(this.mtime),new Date(this.ctime))},He.prototype.getSize=function(){return 30+this.id.length},He.prototype.toBuffer=function(e){return void 0===e&&(e=t.alloc(this.getSize())),e.writeUInt32LE(this.size,0),e.writeUInt16LE(this.mode,4),e.writeDoubleLE(this.atime,6),e.writeDoubleLE(this.mtime,14),e.writeDoubleLE(this.ctime,22),e.write(this.id,30,this.id.length,"ascii"),e},He.prototype.update=function(t){var e=!1;this.size!==t.size&&(this.size=t.size,e=!0),this.mode!==t.mode&&(this.mode=t.mode,e=!0);var r=t.atime.getTime();this.atime!==r&&(this.atime=r,e=!0);var n=t.mtime.getTime();this.mtime!==n&&(this.mtime=n,e=!0);var i=t.ctime.getTime();return this.ctime!==i&&(this.ctime=i,e=!0),e},He.prototype.isFile=function(){return(61440&this.mode)===d.FILE},He.prototype.isDirectory=function(){return(61440&this.mode)===d.DIRECTORY};var Ge="/",Ze=null;function Ve(){return Ze||(Ze=t.from("{}"))}function Ye(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))}function Ke(t,e){return!t||(e(t),!1)}function Xe(t,e,r){return!t||(e.abort((function(){r(t)})),!1)}var $e=function(t){this.store=t,this.originalData={},this.modifiedKeys=[]};$e.prototype.get=function(t){var e=this.store.get(t);return this.stashOldValue(t,e),e},$e.prototype.put=function(t,e,r){return this.markModified(t),this.store.put(t,e,r)},$e.prototype.del=function(t){this.markModified(t),this.store.del(t)},$e.prototype.commit=function(){},$e.prototype.abort=function(){for(var t=this,e=0,r=t.modifiedKeys;e<r.length;e+=1){var n=r[e],i=t.originalData[n];i?t.store.put(n,i,!0):t.store.del(n)}},$e.prototype.stashOldValue=function(t,e){this.originalData.hasOwnProperty(t)||(this.originalData[t]=e)},$e.prototype.markModified=function(t){-1===this.modifiedKeys.indexOf(t)&&(this.modifiedKeys.push(t),this.originalData.hasOwnProperty(t)||(this.originalData[t]=this.store.get(t)))};var Je=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.syncSync=function(){this.isDirty()&&(this._fs._syncSync(this.getPath(),this.getBuffer(),this.getStats()),this.resetDirty())},e.prototype.closeSync=function(){this.syncSync()},e}($),Qe=function(e){function r(t){e.call(this),this.store=t.store,this.makeRootDirectory()}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.isAvailable=function(){return!0},r.prototype.getName=function(){return this.store.name()},r.prototype.isReadOnly=function(){return!1},r.prototype.supportsSymlinks=function(){return!1},r.prototype.supportsProps=function(){return!1},r.prototype.supportsSynch=function(){return!0},r.prototype.empty=function(){this.store.clear(),this.makeRootDirectory()},r.prototype.renameSync=function(e,r){var n=this.store.beginTransaction("readwrite"),i=u.dirname(e),o=u.basename(e),s=u.dirname(r),c=u.basename(r),l=this.findINode(n,i),h=this.getDirListing(n,i,l);if(!h[o])throw f.ENOENT(e);var d,p,y=h[o];if(delete h[o],0===(s+"/").indexOf(e+"/"))throw new f(a.EBUSY,i);if(s===i?(d=l,p=h):(d=this.findINode(n,s),p=this.getDirListing(n,s,d)),p[c]){var g=this.getINode(n,r,p[c]);if(!g.isFile())throw f.EPERM(r);try{n.del(g.id),n.del(p[c])}catch(t){throw n.abort(),t}}p[c]=y;try{n.put(l.id,t.from(JSON.stringify(h)),!0),n.put(d.id,t.from(JSON.stringify(p)),!0)}catch(t){throw n.abort(),t}n.commit()},r.prototype.statSync=function(t,e){return this.findINode(this.store.beginTransaction("readonly"),t).toStats()},r.prototype.createFileSync=function(t,e,r){var n=this.store.beginTransaction("readwrite"),i=z(),o=this.commitNewFile(n,t,d.FILE,r,i);return new Je(this,t,e,o.toStats(),i)},r.prototype.openFileSync=function(t,e){var r=this.store.beginTransaction("readonly"),n=this.findINode(r,t),i=r.get(n.id);if(void 0===i)throw f.ENOENT(t);return new Je(this,t,e,n.toStats(),i)},r.prototype.unlinkSync=function(t){this.removeEntry(t,!1)},r.prototype.rmdirSync=function(t){if(this.readdirSync(t).length>0)throw f.ENOTEMPTY(t);this.removeEntry(t,!0)},r.prototype.mkdirSync=function(e,r){var n=this.store.beginTransaction("readwrite"),i=t.from("{}");this.commitNewFile(n,e,d.DIRECTORY,r,i)},r.prototype.readdirSync=function(t){var e=this.store.beginTransaction("readonly");return Object.keys(this.getDirListing(e,t,this.findINode(e,t)))},r.prototype._syncSync=function(t,e,r){var n=this.store.beginTransaction("readwrite"),i=this._findINode(n,u.dirname(t),u.basename(t)),o=this.getINode(n,t,i),a=o.update(r);try{n.put(o.id,e,!0),a&&n.put(i,o.toBuffer(),!0)}catch(t){throw n.abort(),t}n.commit()},r.prototype.makeRootDirectory=function(){var t=this.store.beginTransaction("readwrite");if(void 0===t.get(Ge)){var e=(new Date).getTime(),r=new He(Ye(),4096,511|d.DIRECTORY,e,e,e);t.put(r.id,Ve(),!1),t.put(Ge,r.toBuffer(),!1),t.commit()}},r.prototype._findINode=function(t,e,r){var n=this,i=function(i){var o=n.getDirListing(t,e,i);if(o[r])return o[r];throw f.ENOENT(u.resolve(e,r))};return"/"===e?""===r?Ge:i(this.getINode(t,e,Ge)):i(this.getINode(t,e+u.sep+r,this._findINode(t,u.dirname(e),u.basename(e))))},r.prototype.findINode=function(t,e){return this.getINode(t,e,this._findINode(t,u.dirname(e),u.basename(e)))},r.prototype.getINode=function(t,e,r){var n=t.get(r);if(void 0===n)throw f.ENOENT(e);return He.fromBuffer(n)},r.prototype.getDirListing=function(t,e,r){if(!r.isDirectory())throw f.ENOTDIR(e);var n=t.get(r.id);if(void 0===n)throw f.ENOENT(e);return JSON.parse(n.toString())},r.prototype.addNewNode=function(t,e){for(var r;;)try{return r=Ye(),t.put(r,e,!1),r}catch(t){}throw new f(a.EIO,"Unable to commit data to key-value store.")},r.prototype.commitNewFile=function(e,r,n,i,o){var a,s=u.dirname(r),c=u.basename(r),l=this.findINode(e,s),h=this.getDirListing(e,s,l),d=(new Date).getTime();if("/"===r)throw f.EEXIST(r);if(h[c])throw f.EEXIST(r);try{var p=this.addNewNode(e,o);a=new He(p,o.length,i|n,d,d,d);var y=this.addNewNode(e,a.toBuffer());h[c]=y,e.put(l.id,t.from(JSON.stringify(h)),!0)}catch(t){throw e.abort(),t}return e.commit(),a},r.prototype.removeEntry=function(e,r){var n=this.store.beginTransaction("readwrite"),i=u.dirname(e),o=this.findINode(n,i),a=this.getDirListing(n,i,o),s=u.basename(e);if(!a[s])throw f.ENOENT(e);var c=a[s];delete a[s];var l=this.getINode(n,e,c);if(!r&&l.isDirectory())throw f.EISDIR(e);if(r&&!l.isDirectory())throw f.ENOTDIR(e);try{n.del(l.id),n.del(c),n.put(o.id,t.from(JSON.stringify(a)),!0)}catch(t){throw n.abort(),t}n.commit()},r}(K),tr=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;this.isDirty()?this._fs._sync(this.getPath(),this.getBuffer(),this.getStats(),(function(r){r||e.resetDirty(),t(r)})):t()},e.prototype.close=function(t){this.sync(t)},e}($),er=function(e){function r(){e.apply(this,arguments)}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.isAvailable=function(){return!0},r.prototype.init=function(t,e){this.store=t,this.makeRootDirectory(e)},r.prototype.getName=function(){return this.store.name()},r.prototype.isReadOnly=function(){return!1},r.prototype.supportsSymlinks=function(){return!1},r.prototype.supportsProps=function(){return!1},r.prototype.supportsSynch=function(){return!1},r.prototype.empty=function(t){var e=this;this.store.clear((function(r){Ke(r,t)&&e.makeRootDirectory(t)}))},r.prototype.rename=function(e,r,n){var i=this,o=this.store.beginTransaction("readwrite"),s=u.dirname(e),c=u.basename(e),l=u.dirname(r),h=u.basename(r),d={},p={},y=!1;if(0===(l+"/").indexOf(e+"/"))return n(new f(a.EBUSY,s));var g=function(a){i.findINodeAndDirListing(o,a,(function(u,g,_){u?y||(y=!0,o.abort((function(){n(u)}))):(d[a]=g,p[a]=_,function(){if(!y&&p.hasOwnProperty(s)&&p.hasOwnProperty(l)){var a=p[s],u=d[s],g=p[l],_=d[l];if(a[c]){var b=a[c];delete a[c];var m=function(){g[h]=b,o.put(u.id,t.from(JSON.stringify(a)),!0,(function(e){Xe(e,o,n)&&(s===l?o.commit(n):o.put(_.id,t.from(JSON.stringify(g)),!0,(function(t){Xe(t,o,n)&&o.commit(n)})))}))};g[h]?i.getINode(o,r,g[h],(function(t,e){Xe(t,o,n)&&(e.isFile()?o.del(e.id,(function(t){Xe(t,o,n)&&o.del(g[h],(function(t){Xe(t,o,n)&&m()}))})):o.abort((function(t){n(f.EPERM(r))})))})):m()}else n(f.ENOENT(e))}}())}))};g(s),s!==l&&g(l)},r.prototype.stat=function(t,e,r){var n=this.store.beginTransaction("readonly");this.findINode(n,t,(function(t,e){Ke(t,r)&&r(null,e.toStats())}))},r.prototype.createFile=function(t,e,r,n){var i=this,o=this.store.beginTransaction("readwrite"),a=z();this.commitNewFile(o,t,d.FILE,r,a,(function(r,o){Ke(r,n)&&n(null,new tr(i,t,e,o.toStats(),a))}))},r.prototype.openFile=function(t,e,r){var n=this,i=this.store.beginTransaction("readonly");this.findINode(i,t,(function(o,a){Ke(o,r)&&i.get(a.id,(function(i,o){Ke(i,r)&&(void 0===o?r(f.ENOENT(t)):r(null,new tr(n,t,e,a.toStats(),o)))}))}))},r.prototype.unlink=function(t,e){this.removeEntry(t,!1,e)},r.prototype.rmdir=function(t,e){var r=this;this.readdir(t,(function(n,i){n?e(n):i.length>0?e(f.ENOTEMPTY(t)):r.removeEntry(t,!0,e)}))},r.prototype.mkdir=function(e,r,n){var i=this.store.beginTransaction("readwrite"),o=t.from("{}");this.commitNewFile(i,e,d.DIRECTORY,r,o,n)},r.prototype.readdir=function(t,e){var r=this,n=this.store.beginTransaction("readonly");this.findINode(n,t,(function(i,o){Ke(i,e)&&r.getDirListing(n,t,o,(function(t,r){Ke(t,e)&&e(null,Object.keys(r))}))}))},r.prototype._sync=function(t,e,r,n){var i=this,o=this.store.beginTransaction("readwrite");this._findINode(o,u.dirname(t),u.basename(t),(function(a,s){Xe(a,o,n)&&i.getINode(o,t,s,(function(t,i){if(Xe(t,o,n)){var a=i.update(r);o.put(i.id,e,!0,(function(t){Xe(t,o,n)&&(a?o.put(s,i.toBuffer(),!0,(function(t){Xe(t,o,n)&&o.commit(n)})):o.commit(n))}))}}))}))},r.prototype.makeRootDirectory=function(t){var e=this.store.beginTransaction("readwrite");e.get(Ge,(function(r,n){if(r||void 0===n){var i=(new Date).getTime(),o=new He(Ye(),4096,511|d.DIRECTORY,i,i,i);e.put(o.id,Ve(),!1,(function(r){Xe(r,e,t)&&e.put(Ge,o.toBuffer(),!1,(function(r){r?e.abort((function(){t(r)})):e.commit(t)}))}))}else e.commit(t)}))},r.prototype._findINode=function(t,e,r,n){var i=this,o=function(t,i,o){t?n(t):o[r]?n(null,o[r]):n(f.ENOENT(u.resolve(e,r)))};"/"===e?""===r?n(null,Ge):this.getINode(t,e,Ge,(function(r,a){Ke(r,n)&&i.getDirListing(t,e,a,(function(t,e){o(t,0,e)}))})):this.findINodeAndDirListing(t,e,o)},r.prototype.findINode=function(t,e,r){var n=this;this._findINode(t,u.dirname(e),u.basename(e),(function(i,o){Ke(i,r)&&n.getINode(t,e,o,r)}))},r.prototype.getINode=function(t,e,r,n){t.get(r,(function(t,r){Ke(t,n)&&(void 0===r?n(f.ENOENT(e)):n(null,He.fromBuffer(r)))}))},r.prototype.getDirListing=function(t,e,r,n){r.isDirectory()?t.get(r.id,(function(t,r){if(Ke(t,n))try{n(null,JSON.parse(r.toString()))}catch(t){n(f.ENOENT(e))}})):n(f.ENOTDIR(e))},r.prototype.findINodeAndDirListing=function(t,e,r){var n=this;this.findINode(t,e,(function(i,o){Ke(i,r)&&n.getDirListing(t,e,o,(function(t,e){Ke(t,r)&&r(null,o,e)}))}))},r.prototype.addNewNode=function(t,e,r){var n,i=0,o=function(){5==++i?r(new f(a.EIO,"Unable to commit data to key-value store.")):(n=Ye(),t.put(n,e,!1,(function(t,e){t||!e?o():r(null,n)})))};o()},r.prototype.commitNewFile=function(e,r,n,i,o,a){var s=this,c=u.dirname(r),l=u.basename(r),h=(new Date).getTime();if("/"===r)return a(f.EEXIST(r));this.findINodeAndDirListing(e,c,(function(u,c,d){Xe(u,e,a)&&(d[l]?e.abort((function(){a(f.EEXIST(r))})):s.addNewNode(e,o,(function(r,u){if(Xe(r,e,a)){var f=new He(u,o.length,i|n,h,h,h);s.addNewNode(e,f.toBuffer(),(function(r,n){Xe(r,e,a)&&(d[l]=n,e.put(c.id,t.from(JSON.stringify(d)),!0,(function(t){Xe(t,e,a)&&e.commit((function(t){Xe(t,e,a)&&a(null,f)}))})))}))}})))}))},r.prototype.removeEntry=function(e,r,n){var i=this,o=this.store.beginTransaction("readwrite"),a=u.dirname(e),s=u.basename(e);this.findINodeAndDirListing(o,a,(function(a,u,c){if(Xe(a,o,n))if(c[s]){var l=c[s];delete c[s],i.getINode(o,e,l,(function(i,a){Xe(i,o,n)&&(!r&&a.isDirectory()?o.abort((function(){n(f.EISDIR(e))})):r&&!a.isDirectory()?o.abort((function(){n(f.ENOTDIR(e))})):o.del(a.id,(function(e){Xe(e,o,n)&&o.del(l,(function(e){Xe(e,o,n)&&o.put(u.id,t.from(JSON.stringify(c)),!0,(function(t){Xe(t,o,n)&&o.commit(n)}))}))})))}))}else o.abort((function(){n(f.ENOENT(e))}))}))},r}(Y),rr=function(){this.store={}};rr.prototype.name=function(){return nr.Name},rr.prototype.clear=function(){this.store={}},rr.prototype.beginTransaction=function(t){return new $e(this)},rr.prototype.get=function(t){return this.store[t]},rr.prototype.put=function(t,e,r){return!(!r&&this.store.hasOwnProperty(t)||(this.store[t]=e,0))},rr.prototype.del=function(t){delete this.store[t]};var nr=function(t){function e(){t.call(this,{store:new rr})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e)},e}(Qe);nr.Name="InMemory",nr.Options={};var ir=Ue.indexedDB||Ue.mozIndexedDB||Ue.webkitIndexedDB||Ue.msIndexedDB;function or(t,e){switch(void 0===e&&(e=t.toString()),t.name){case"NotFoundError":return new f(a.ENOENT,e);case"QuotaExceededError":return new f(a.ENOSPC,e);default:return new f(a.EIO,e)}}function ar(t,e,r){return void 0===e&&(e=a.EIO),void 0===r&&(r=null),function(n){n.preventDefault(),t(new f(e,null!==r?r:void 0))}}var sr=function(t,e){this.tx=t,this.store=e};sr.prototype.get=function(t,e){try{var r=this.store.get(t);r.onerror=ar(e),r.onsuccess=function(t){var r=t.target.result;e(null,void 0===r?r:C(r))}}catch(t){e(or(t))}};var ur=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.put=function(t,e,r,n){try{var i,o=D(e);(i=r?this.store.put(o,t):this.store.add(o,t)).onerror=ar(n),i.onsuccess=function(t){n(null,!0)}}catch(t){n(or(t))}},e.prototype.del=function(t,e){try{var r=this.store.delete(t);r.onerror=ar(e),r.onsuccess=function(t){e()}}catch(t){e(or(t))}},e.prototype.commit=function(t){setTimeout(t,0)},e.prototype.abort=function(t){var e=null;try{this.tx.abort()}catch(t){e=or(t)}finally{t(e)}},e}(sr),cr=function(t,e){var r=this;void 0===e&&(e="browserfs"),this.storeName=e;var n=ir.open(this.storeName,1);n.onupgradeneeded=function(t){var e=t.target.result;e.objectStoreNames.contains(r.storeName)&&e.deleteObjectStore(r.storeName),e.createObjectStore(r.storeName)},n.onsuccess=function(e){r.db=e.target.result,t(null,r)},n.onerror=ar(t,a.EACCES)};cr.prototype.name=function(){return lr.Name+" - "+this.storeName},cr.prototype.clear=function(t){try{var e=this.db.transaction(this.storeName,"readwrite").objectStore(this.storeName).clear();e.onsuccess=function(e){setTimeout(t,0)},e.onerror=ar(t)}catch(e){t(or(e))}},cr.prototype.beginTransaction=function(t){void 0===t&&(t="readonly");var e=this.db.transaction(this.storeName,t),r=e.objectStore(this.storeName);if("readwrite"===t)return new ur(e,r);if("readonly"===t)return new sr(e,r);throw new f(a.EINVAL,"Invalid transaction type.")};var lr=function(t){function e(r,n,i){var o=this;void 0===i&&(i=!0),t.call(this),this.store=new cr((function(t){t?r(t):o.init(o.store,(function(t){r(t,o)}))}),n),I(i,e.Name,{storeName:n})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){new e(r,t.storeName,!1)},e.isAvailable=function(){try{return void 0!==ir&&null!==ir.open("__browserfs_test__")}catch(t){return!1}},e}(er);lr.Name="IndexedDB",lr.Options={storeName:{type:"string",optional:!0,description:"The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."}};var fr,hr=!1;try{Ue.localStorage.setItem("__test__",String.fromCharCode(55296)),hr=Ue.localStorage.getItem("__test__")===String.fromCharCode(55296)}catch(t){hr=!1}fr=hr?"binary_string":"binary_string_ie",t.isEncoding(fr)||(fr="base64");var dr=function(){};dr.prototype.name=function(){return pr.Name},dr.prototype.clear=function(){Ue.localStorage.clear()},dr.prototype.beginTransaction=function(t){return new $e(this)},dr.prototype.get=function(e){try{var r=Ue.localStorage.getItem(e);if(null!==r)return t.from(r,fr)}catch(t){}},dr.prototype.put=function(t,e,r){try{return!(!r&&null!==Ue.localStorage.getItem(t)||(Ue.localStorage.setItem(t,e.toString(fr)),0))}catch(t){throw new f(a.ENOSPC,"LocalStorage is full.")}},dr.prototype.del=function(t){try{Ue.localStorage.removeItem(t)}catch(e){throw new f(a.EIO,"Unable to delete key "+t+": "+e)}};var pr=function(t){function e(){t.call(this,{store:new dr})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){r(null,new e)},e.isAvailable=function(){return void 0!==Ue.localStorage},e}(Qe);pr.Name="LocalStorage",pr.Options={};var yr=function(t){function e(){t.call(this),this.mountList=[],this.mntMap={},this.rootFs=new nr}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){var n=new e;Object.keys(t).forEach((function(e){n.mount(e,t[e])})),r(null,n)},e.isAvailable=function(){return!0},e.prototype.mount=function(t,e){if("/"!==t[0]&&(t="/"+t),t=u.resolve(t),this.mntMap[t])throw new f(a.EINVAL,"Mount point "+t+" is already taken.");P(t,511,this.rootFs),this.mntMap[t]=e,this.mountList.push(t),this.mountList=this.mountList.sort((function(t,e){return e.length-t.length}))},e.prototype.umount=function(t){if("/"!==t[0]&&(t="/"+t),t=u.resolve(t),!this.mntMap[t])throw new f(a.EINVAL,"Mount point "+t+" is already unmounted.");for(delete this.mntMap[t],this.mountList.splice(this.mountList.indexOf(t),1);"/"!==t&&0===this.rootFs.readdirSync(t).length;)this.rootFs.rmdirSync(t),t=u.dirname(t)},e.prototype._getFs=function(t){for(var e=this.mountList,r=e.length,n=0;n<r;n++){var i=e[n];if(i.length<=t.length&&0===t.indexOf(i))return""===(t=t.substr(i.length>1?i.length:0))&&(t="/"),{fs:this.mntMap[i],path:t}}return{fs:this.rootFs,path:t}},e.prototype.getName=function(){return e.Name},e.prototype.diskSpace=function(t,e){e(0,0)},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.standardizeError=function(t,e,r){var n=t.message.indexOf(e);return-1!==n&&(t.message=t.message.substr(0,n)+r+t.message.substr(n+e.length),t.path=r),t},e.prototype.rename=function(t,e,r){var n=this,i=this._getFs(t),o=this._getFs(e);return i.fs===o.fs?i.fs.rename(i.path,o.path,(function(a){a&&n.standardizeError(n.standardizeError(a,i.path,t),o.path,e),r(a)})):k.readFile(t,(function(n,i){if(n)return r(n);k.writeFile(e,i,(function(e){if(e)return r(e);k.unlink(t,r)}))}))},e.prototype.renameSync=function(t,e){var r=this._getFs(t),n=this._getFs(e);if(r.fs===n.fs)try{return r.fs.renameSync(r.path,n.path)}catch(i){throw this.standardizeError(this.standardizeError(i,r.path,t),n.path,e),i}var i=k.readFileSync(t);return k.writeFileSync(e,i),k.unlinkSync(t)},e.prototype.readdirSync=function(t){var e=this._getFs(t),r=null;if(e.fs!==this.rootFs)try{r=this.rootFs.readdirSync(t)}catch(t){}try{var n=e.fs.readdirSync(e.path);return null===r?n:n.concat(r.filter((function(t){return-1===n.indexOf(t)})))}catch(n){if(null===r)throw this.standardizeError(n,e.path,t);return r}},e.prototype.readdir=function(t,e){var r=this,n=this._getFs(t);n.fs.readdir(n.path,(function(i,o){if(n.fs!==r.rootFs)try{var a=r.rootFs.readdirSync(t);o=o?o.concat(a.filter((function(t){return-1===o.indexOf(t)}))):a}catch(o){if(i)return e(r.standardizeError(i,n.path,t))}else if(i)return e(r.standardizeError(i,n.path,t));e(null,o)}))},e.prototype.rmdirSync=function(t){var e=this._getFs(t);if(this._containsMountPt(t))throw f.ENOTEMPTY(t);try{e.fs.rmdirSync(e.path)}catch(r){throw this.standardizeError(r,e.path,t)}},e.prototype.rmdir=function(t,e){var r=this,n=this._getFs(t);this._containsMountPt(t)?e(f.ENOTEMPTY(t)):n.fs.rmdir(n.path,(function(i){e(i?r.standardizeError(i,n.path,t):null)}))},e.prototype._containsMountPt=function(t){for(var e=this.mountList,r=e.length,n=0;n<r;n++){var i=e[n];if(i.length>=t.length&&i.slice(0,t.length)===t)return!0}return!1},e}(Y);function gr(t,e,r){return e?function(){for(var e=[],r=arguments.length;r--;)e[r]=arguments[r];var n=e[0],i=this._getFs(n);e[0]=i.path;try{return i.fs[t].apply(i.fs,e)}catch(t){throw this.standardizeError(t,i.path,n),t}}:function(){for(var e=this,r=[],n=arguments.length;n--;)r[n]=arguments[n];var i=r[0],o=this._getFs(i);if(r[0]=o.path,"function"==typeof r[r.length-1]){var a=r[r.length-1];r[r.length-1]=function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];t.length>0&&t[0]instanceof f&&e.standardizeError(t[0],o.path,i),a.apply(null,t)}}return o.fs[t].apply(o.fs,r)}}yr.Name="MountableFileSystem",yr.Options={};for(var _r,br=[["exists","unlink","readlink"],["stat","mkdir","realpath","truncate"],["open","readFile","chmod","utimes"],["chown"],["writeFile","appendFile"]],mr=0;mr<br.length;mr++)for(var vr=0,wr=br[mr];vr<wr.length;vr+=1){var Er=wr[vr];yr.prototype[Er]=gr(Er,!1),yr.prototype[Er+"Sync"]=gr(Er+"Sync",!0)}if("undefined"!=typeof setImmediate)_r=setImmediate;else{var Sr=Ue,Rr=[],kr="zero-timeout-message";if(function(){if(void 0!==Sr.importScripts||!Sr.postMessage)return!1;var t=!0,e=Sr.onmessage;return Sr.onmessage=function(){t=!1},Sr.postMessage("","*"),Sr.onmessage=e,t}()){_r=function(t){Rr.push(t),Sr.postMessage(kr,"*")};var Or=function(t){if(t.source===self&&t.data===kr&&(t.stopPropagation?t.stopPropagation():t.cancelBubble=!0,Rr.length>0))return Rr.shift()()};Sr.addEventListener?Sr.addEventListener("message",Or,!0):Sr.attachEvent("onmessage",Or)}else if(Sr.MessageChannel){var Tr=new Sr.MessageChannel;Tr.port1.onmessage=function(t){if(Rr.length>0)return Rr.shift()()},_r=function(t){Rr.push(t),Tr.port2.postMessage("")}}else _r=function(t){return setTimeout(t,0)}}var Ar=_r,Ir=function(){this._locked=!1,this._waiters=[]};Ir.prototype.lock=function(t){this._locked?this._waiters.push(t):(this._locked=!0,t())},Ir.prototype.unlock=function(){if(!this._locked)throw new Error("unlock of a non-locked mutex");var t=this._waiters.shift();t?Ar(t):this._locked=!1},Ir.prototype.tryLock=function(){return!this._locked&&(this._locked=!0,!0)},Ir.prototype.isLocked=function(){return this._locked};var Lr=function(t){this._fs=t,this._mu=new Ir};Lr.prototype.getName=function(){return"LockedFS<"+this._fs.getName()+">"},Lr.prototype.getFSUnlocked=function(){return this._fs},Lr.prototype.initialize=function(t){this._fs.initialize(t)},Lr.prototype.diskSpace=function(t,e){this._fs.diskSpace(t,e)},Lr.prototype.isReadOnly=function(){return this._fs.isReadOnly()},Lr.prototype.supportsLinks=function(){return this._fs.supportsLinks()},Lr.prototype.supportsProps=function(){return this._fs.supportsProps()},Lr.prototype.supportsSynch=function(){return this._fs.supportsSynch()},Lr.prototype.rename=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.rename(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Lr.prototype.renameSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.renameSync(t,e)},Lr.prototype.stat=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.stat(t,e,(function(t,e){n._mu.unlock(),r(t,e)}))}))},Lr.prototype.statSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.statSync(t,e)},Lr.prototype.open=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.open(t,e,r,(function(t,e){i._mu.unlock(),n(t,e)}))}))},Lr.prototype.openSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.openSync(t,e,r)},Lr.prototype.unlink=function(t,e){var r=this;this._mu.lock((function(){r._fs.unlink(t,(function(t){r._mu.unlock(),e(t)}))}))},Lr.prototype.unlinkSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.unlinkSync(t)},Lr.prototype.rmdir=function(t,e){var r=this;this._mu.lock((function(){r._fs.rmdir(t,(function(t){r._mu.unlock(),e(t)}))}))},Lr.prototype.rmdirSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.rmdirSync(t)},Lr.prototype.mkdir=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.mkdir(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Lr.prototype.mkdirSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.mkdirSync(t,e)},Lr.prototype.readdir=function(t,e){var r=this;this._mu.lock((function(){r._fs.readdir(t,(function(t,n){r._mu.unlock(),e(t,n)}))}))},Lr.prototype.readdirSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.readdirSync(t)},Lr.prototype.exists=function(t,e){var r=this;this._mu.lock((function(){r._fs.exists(t,(function(t){r._mu.unlock(),e(t)}))}))},Lr.prototype.existsSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.existsSync(t)},Lr.prototype.realpath=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.realpath(t,e,(function(t,e){n._mu.unlock(),r(t,e)}))}))},Lr.prototype.realpathSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.realpathSync(t,e)},Lr.prototype.truncate=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.truncate(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Lr.prototype.truncateSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.truncateSync(t,e)},Lr.prototype.readFile=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.readFile(t,e,r,(function(t,e){i._mu.unlock(),n(t,e)}))}))},Lr.prototype.readFileSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.readFileSync(t,e,r)},Lr.prototype.writeFile=function(t,e,r,n,i,o){var a=this;this._mu.lock((function(){a._fs.writeFile(t,e,r,n,i,(function(t){a._mu.unlock(),o(t)}))}))},Lr.prototype.writeFileSync=function(t,e,r,n,i){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.writeFileSync(t,e,r,n,i)},Lr.prototype.appendFile=function(t,e,r,n,i,o){var a=this;this._mu.lock((function(){a._fs.appendFile(t,e,r,n,i,(function(t){a._mu.unlock(),o(t)}))}))},Lr.prototype.appendFileSync=function(t,e,r,n,i){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.appendFileSync(t,e,r,n,i)},Lr.prototype.chmod=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.chmod(t,e,r,(function(t){i._mu.unlock(),n(t)}))}))},Lr.prototype.chmodSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.chmodSync(t,e,r)},Lr.prototype.chown=function(t,e,r,n,i){var o=this;this._mu.lock((function(){o._fs.chown(t,e,r,n,(function(t){o._mu.unlock(),i(t)}))}))},Lr.prototype.chownSync=function(t,e,r,n){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.chownSync(t,e,r,n)},Lr.prototype.utimes=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.utimes(t,e,r,(function(t){i._mu.unlock(),n(t)}))}))},Lr.prototype.utimesSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.utimesSync(t,e,r)},Lr.prototype.link=function(t,e,r){var n=this;this._mu.lock((function(){n._fs.link(t,e,(function(t){n._mu.unlock(),r(t)}))}))},Lr.prototype.linkSync=function(t,e){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.linkSync(t,e)},Lr.prototype.symlink=function(t,e,r,n){var i=this;this._mu.lock((function(){i._fs.symlink(t,e,r,(function(t){i._mu.unlock(),n(t)}))}))},Lr.prototype.symlinkSync=function(t,e,r){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.symlinkSync(t,e,r)},Lr.prototype.readlink=function(t,e){var r=this;this._mu.lock((function(){r._fs.readlink(t,(function(t,n){r._mu.unlock(),e(t,n)}))}))},Lr.prototype.readlinkSync=function(t){if(this._mu.isLocked())throw new Error("invalid sync call");return this._fs.readlinkSync(t)};var xr="/.deletedFiles.log";function Nr(t){return 146|t}function Pr(t){return p.getFileFlag(t)}var Dr,Fr=function(t){function e(e,r,n,i,o){t.call(this,e,r,n,i,o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.sync=function(t){var e=this;this.isDirty()?this._fs._syncAsync(this,(function(r){e.resetDirty(),t(r)})):t(null)},e.prototype.syncSync=function(){this.isDirty()&&(this._fs._syncSync(this),this.resetDirty())},e.prototype.close=function(t){this.sync(t)},e.prototype.closeSync=function(){this.syncSync()},e}($),Mr=function(t){function e(e,r){if(t.call(this),this._isInitialized=!1,this._initializeCallbacks=[],this._deletedFiles={},this._deleteLog="",this._deleteLogUpdatePending=!1,this._deleteLogUpdateNeeded=!1,this._deleteLogError=null,this._writable=e,this._readable=r,this._writable.isReadOnly())throw new f(a.EINVAL,"Writable file system must be writable.")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.isAvailable=function(){return!0},e.prototype.getOverlayedFileSystems=function(){return{readable:this._readable,writable:this._writable}},e.prototype._syncAsync=function(t,e){var r=this;this.createParentDirectoriesAsync(t.getPath(),(function(n){if(n)return e(n);r._writable.writeFile(t.getPath(),t.getBuffer(),null,Pr("w"),t.getStats().mode,e)}))},e.prototype._syncSync=function(t){this.createParentDirectories(t.getPath()),this._writable.writeFileSync(t.getPath(),t.getBuffer(),null,Pr("w"),t.getStats().mode)},e.prototype.getName=function(){return jr.Name},e.prototype.initialize=function(t){var e=this,r=this._initializeCallbacks,n=function(t){e._isInitialized=!t,e._initializeCallbacks=[],r.forEach((function(e){return e(t)}))};if(this._isInitialized)return t();r.push(t),1===r.length&&this._writable.readFile(xr,"utf8",Pr("r"),(function(t,r){if(t){if(t.errno!==a.ENOENT)return n(t)}else e._deleteLog=r;e._reparseDeletionLog(),n()}))},e.prototype.isReadOnly=function(){return!1},e.prototype.supportsSynch=function(){return this._readable.supportsSynch()&&this._writable.supportsSynch()},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return this._readable.supportsProps()&&this._writable.supportsProps()},e.prototype.getDeletionLog=function(){return this._deleteLog},e.prototype.restoreDeletionLog=function(t){this._deleteLog=t,this._reparseDeletionLog(),this.updateLog("")},e.prototype.rename=function(t,e,r){var n=this;if(this.checkInitAsync(r)&&!this.checkPathAsync(t,r)&&!this.checkPathAsync(e,r))return t===xr||e===xr?r(f.EPERM("Cannot rename deletion log.")):t===e?r():void this.stat(t,!1,(function(i,o){return i?r(i):n.stat(e,!1,(function(i,s){var c=n;function l(n){var i=n.shift();if(!i)return r();var o=u.resolve(t,i),a=u.resolve(e,i);c.rename(o,a,(function(t){if(t)return r(t);l(n)}))}var h=511;if(o.isDirectory()){if(i)return i.errno!==a.ENOENT?r(i):n._writable.exists(t,(function(i){if(i)return n._writable.rename(t,e,r);n._writable.mkdir(e,h,(function(e){if(e)return r(e);n._readable.readdir(t,(function(t,e){if(t)return r();l(e)}))}))}));if(h=s.mode,!s.isDirectory())return r(f.ENOTDIR(e));n.readdir(e,(function(i,o){if(o&&o.length)return r(f.ENOTEMPTY(e));n._readable.readdir(t,(function(t,e){if(t)return r();l(e)}))}))}if(s&&s.isDirectory())return r(f.EISDIR(e));n.readFile(t,null,Pr("r"),(function(i,a){return i?r(i):n.writeFile(e,a,null,Pr("w"),o.mode,(function(e){return e?r(e):n.unlink(t,r)}))}))}))}))},e.prototype.renameSync=function(t,e){var r=this;if(this.checkInitialized(),this.checkPath(t),this.checkPath(e),t===xr||e===xr)throw f.EPERM("Cannot rename deletion log.");var n=this.statSync(t,!1);if(n.isDirectory()){if(t===e)return;var i=511;if(this.existsSync(e)){var o=this.statSync(e,!1);if(i=o.mode,!o.isDirectory())throw f.ENOTDIR(e);if(this.readdirSync(e).length>0)throw f.ENOTEMPTY(e)}this._writable.existsSync(t)?this._writable.renameSync(t,e):this._writable.existsSync(e)||this._writable.mkdirSync(e,i),this._readable.existsSync(t)&&this._readable.readdirSync(t).forEach((function(n){r.renameSync(u.resolve(t,n),u.resolve(e,n))}))}else{if(this.existsSync(e)&&this.statSync(e,!1).isDirectory())throw f.EISDIR(e);this.writeFileSync(e,this.readFileSync(t,null,Pr("r")),null,Pr("w"),n.mode)}t!==e&&this.existsSync(t)&&this.unlinkSync(t)},e.prototype.stat=function(t,e,r){var n=this;this.checkInitAsync(r)&&this._writable.stat(t,e,(function(i,o){i&&i.errno===a.ENOENT?(n._deletedFiles[t]&&r(f.ENOENT(t)),n._readable.stat(t,e,(function(t,e){e&&((e=e.clone()).mode=Nr(e.mode)),r(t,e)}))):r(i,o)}))},e.prototype.statSync=function(t,e){this.checkInitialized();try{return this._writable.statSync(t,e)}catch(n){if(this._deletedFiles[t])throw f.ENOENT(t);var r=this._readable.statSync(t,e).clone();return r.mode=Nr(r.mode),r}},e.prototype.open=function(t,e,r,n){var i=this;this.checkInitAsync(n)&&!this.checkPathAsync(t,n)&&this.stat(t,!1,(function(o,a){if(!a)return e.pathNotExistsAction()===l.CREATE_FILE?i.createParentDirectoriesAsync(t,(function(o){return o?n(o):i._writable.open(t,e,r,n)})):n(f.ENOENT(t));switch(e.pathExistsAction()){case l.TRUNCATE_FILE:return i.createParentDirectoriesAsync(t,(function(o){if(o)return n(o);i._writable.open(t,e,r,n)}));case l.NOP:return i._writable.exists(t,(function(o){o?i._writable.open(t,e,r,n):((a=a.clone()).mode=r,i._readable.readFile(t,null,Pr("r"),(function(r,o){if(r)return n(r);-1===a.size&&(a.size=o.length);var s=new Fr(i,t,e,a,o);n(null,s)})))}));default:return n(f.EEXIST(t))}}))},e.prototype.openSync=function(t,e,r){if(this.checkInitialized(),this.checkPath(t),t===xr)throw f.EPERM("Cannot open deletion log.");if(!this.existsSync(t)){if(e.pathNotExistsAction()===l.CREATE_FILE)return this.createParentDirectories(t),this._writable.openSync(t,e,r);throw f.ENOENT(t)}switch(e.pathExistsAction()){case l.TRUNCATE_FILE:return this.createParentDirectories(t),this._writable.openSync(t,e,r);case l.NOP:if(this._writable.existsSync(t))return this._writable.openSync(t,e,r);var n=this._readable.readFileSync(t,null,Pr("r")),i=this._readable.statSync(t,!1).clone();return i.mode=r,new Fr(this,t,e,i,n);default:throw f.EEXIST(t)}},e.prototype.unlink=function(t,e){var r=this;this.checkInitAsync(e)&&!this.checkPathAsync(t,e)&&this.exists(t,(function(n){if(!n)return e(f.ENOENT(t));r._writable.exists(t,(function(n){if(n)return r._writable.unlink(t,(function(n){if(n)return e(n);r.exists(t,(function(n){n&&r.deletePath(t),e(null)}))}));r.deletePath(t),e(null)}))}))},e.prototype.unlinkSync=function(t){if(this.checkInitialized(),this.checkPath(t),!this.existsSync(t))throw f.ENOENT(t);this._writable.existsSync(t)&&this._writable.unlinkSync(t),this.existsSync(t)&&this.deletePath(t)},e.prototype.rmdir=function(t,e){var r=this;if(this.checkInitAsync(e)){var n=function(){r.readdir(t,(function(n,i){return n?e(n):i.length?e(f.ENOTEMPTY(t)):(r.deletePath(t),void e(null))}))};this.exists(t,(function(i){if(!i)return e(f.ENOENT(t));r._writable.exists(t,(function(i){i?r._writable.rmdir(t,(function(i){if(i)return e(i);r._readable.exists(t,(function(t){t?n():e()}))})):n()}))}))}},e.prototype.rmdirSync=function(t){if(this.checkInitialized(),!this.existsSync(t))throw f.ENOENT(t);if(this._writable.existsSync(t)&&this._writable.rmdirSync(t),this.existsSync(t)){if(this.readdirSync(t).length>0)throw f.ENOTEMPTY(t);this.deletePath(t)}},e.prototype.mkdir=function(t,e,r){var n=this;this.checkInitAsync(r)&&this.exists(t,(function(i){if(i)return r(f.EEXIST(t));n.createParentDirectoriesAsync(t,(function(i){if(i)return r(i);n._writable.mkdir(t,e,r)}))}))},e.prototype.mkdirSync=function(t,e){if(this.checkInitialized(),this.existsSync(t))throw f.EEXIST(t);this.createParentDirectories(t),this._writable.mkdirSync(t,e)},e.prototype.readdir=function(t,e){var r=this;this.checkInitAsync(e)&&this.stat(t,!1,(function(n,i){return n?e(n):i.isDirectory()?void r._writable.readdir(t,(function(n,i){if(n&&"ENOENT"!==n.code)return e(n);!n&&i||(i=[]),r._readable.readdir(t,(function(n,o){!n&&o||(o=[]);var a={},s=i.concat(o.filter((function(e){return!r._deletedFiles[t+"/"+e]}))).filter((function(t){var e=!a[t];return a[t]=!0,e}));e(null,s)}))})):e(f.ENOTDIR(t))}))},e.prototype.readdirSync=function(t){var e=this;if(this.checkInitialized(),!this.statSync(t,!1).isDirectory())throw f.ENOTDIR(t);var r=[];try{r=r.concat(this._writable.readdirSync(t))}catch(t){}try{r=r.concat(this._readable.readdirSync(t).filter((function(r){return!e._deletedFiles[t+"/"+r]})))}catch(t){}var n={};return r.filter((function(t){var e=!n[t];return n[t]=!0,e}))},e.prototype.exists=function(t,e){var r=this;this.checkInitialized(),this._writable.exists(t,(function(n){if(n)return e(!0);r._readable.exists(t,(function(n){e(n&&!0!==r._deletedFiles[t])}))}))},e.prototype.existsSync=function(t){return this.checkInitialized(),this._writable.existsSync(t)||this._readable.existsSync(t)&&!0!==this._deletedFiles[t]},e.prototype.chmod=function(t,e,r,n){var i=this;this.checkInitAsync(n)&&this.operateOnWritableAsync(t,(function(o){if(o)return n(o);i._writable.chmod(t,e,r,n)}))},e.prototype.chmodSync=function(t,e,r){var n=this;this.checkInitialized(),this.operateOnWritable(t,(function(){n._writable.chmodSync(t,e,r)}))},e.prototype.chown=function(t,e,r,n,i){var o=this;this.checkInitAsync(i)&&this.operateOnWritableAsync(t,(function(a){if(a)return i(a);o._writable.chown(t,e,r,n,i)}))},e.prototype.chownSync=function(t,e,r,n){var i=this;this.checkInitialized(),this.operateOnWritable(t,(function(){i._writable.chownSync(t,e,r,n)}))},e.prototype.utimes=function(t,e,r,n){var i=this;this.checkInitAsync(n)&&this.operateOnWritableAsync(t,(function(o){if(o)return n(o);i._writable.utimes(t,e,r,n)}))},e.prototype.utimesSync=function(t,e,r){var n=this;this.checkInitialized(),this.operateOnWritable(t,(function(){n._writable.utimesSync(t,e,r)}))},e.prototype.deletePath=function(t){this._deletedFiles[t]=!0,this.updateLog("d"+t+"\n")},e.prototype.updateLog=function(t){var e=this;this._deleteLog+=t,this._deleteLogUpdatePending?this._deleteLogUpdateNeeded=!0:(this._deleteLogUpdatePending=!0,this._writable.writeFile(xr,this._deleteLog,"utf8",p.getFileFlag("w"),420,(function(t){e._deleteLogUpdatePending=!1,t?e._deleteLogError=t:e._deleteLogUpdateNeeded&&(e._deleteLogUpdateNeeded=!1,e.updateLog(""))})))},e.prototype._reparseDeletionLog=function(){var t=this;this._deletedFiles={},this._deleteLog.split("\n").forEach((function(e){t._deletedFiles[e.slice(1)]="d"===e.slice(0,1)}))},e.prototype.checkInitialized=function(){if(!this._isInitialized)throw new f(a.EPERM,"OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");if(null!==this._deleteLogError){var t=this._deleteLogError;throw this._deleteLogError=null,t}},e.prototype.checkInitAsync=function(t){if(!this._isInitialized)return t(new f(a.EPERM,"OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.")),!1;if(null!==this._deleteLogError){var e=this._deleteLogError;return this._deleteLogError=null,t(e),!1}return!0},e.prototype.checkPath=function(t){if(t===xr)throw f.EPERM(t)},e.prototype.checkPathAsync=function(t,e){return t===xr&&(e(f.EPERM(t)),!0)},e.prototype.createParentDirectoriesAsync=function(t,e){var r=u.dirname(t),n=[],i=this;function o(){if(!n.length)return e();var t=n.pop();i._readable.stat(t,!1,(function(r,n){if(!n)return e();i._writable.mkdir(t,n.mode,(function(t){if(t)return e(t);o()}))}))}this._writable.stat(r,!1,(function t(e,a){e?(n.push(r),r=u.dirname(r),i._writable.stat(r,!1,t)):o()}))},e.prototype.createParentDirectories=function(t){for(var e=this,r=u.dirname(t),n=[];!this._writable.existsSync(r);)n.push(r),r=u.dirname(r);(n=n.reverse()).forEach((function(t){e._writable.mkdirSync(t,e.statSync(t,!1).mode)}))},e.prototype.operateOnWritable=function(t,e){if(!this.existsSync(t))throw f.ENOENT(t);this._writable.existsSync(t)||this.copyToWritable(t),e()},e.prototype.operateOnWritableAsync=function(t,e){var r=this;this.exists(t,(function(n){if(!n)return e(f.ENOENT(t));r._writable.exists(t,(function(n){if(!n)return r.copyToWritableAsync(t,e);e()}))}))},e.prototype.copyToWritable=function(t){var e=this.statSync(t,!1);e.isDirectory()?this._writable.mkdirSync(t,e.mode):this.writeFileSync(t,this._readable.readFileSync(t,null,Pr("r")),null,Pr("w"),this.statSync(t,!1).mode)},e.prototype.copyToWritableAsync=function(t,e){var r=this;this.stat(t,!1,(function(n,i){return n?e(n):i.isDirectory()?r._writable.mkdir(t,i.mode,e):void r._readable.readFile(t,null,Pr("r"),(function(n,o){if(n)return e(n);r.writeFile(t,o,null,Pr("w"),i.mode,e)}))}))},e}(Y),jr=function(t){function e(r,n,i){void 0===i&&(i=!0),t.call(this,new Mr(r,n)),I(i,e.Name,{readable:"readable file system",writable:"writable file system"})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){try{var n=new e(t.writable,t.readable,!1);n.initialize((function(t){r(t,n)}),!1)}catch(t){r(t)}},e.isAvailable=function(){return Mr.isAvailable()},e.prototype.initialize=function(e,r){void 0===r&&(r=!0),r&&console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances."),t.prototype.initialize.call(this,e)},e.prototype.getOverlayedFileSystems=function(){return t.prototype.getFSUnlocked.call(this).getOverlayedFileSystems()},e.prototype.unwrap=function(){return t.prototype.getFSUnlocked.call(this)},e}(Lr);jr.Name="OverlayFS",jr.Options={writable:{type:"object",description:"The file system to write modified files to."},readable:{type:"object",description:"The file system that initially populates this file system."}},function(t){t[t.CB=0]="CB",t[t.FD=1]="FD",t[t.API_ERROR=2]="API_ERROR",t[t.STATS=3]="STATS",t[t.PROBE=4]="PROBE",t[t.FILEFLAG=5]="FILEFLAG",t[t.BUFFER=6]="BUFFER",t[t.ERROR=7]="ERROR"}(Dr||(Dr={}));var Cr=function(){this._callbacks={},this._nextId=0};Cr.prototype.toRemoteArg=function(t){var e=this._nextId++;return this._callbacks[e]=t,{type:Dr.CB,id:e}},Cr.prototype.toLocalArg=function(t){var e=this._callbacks[t];return delete this._callbacks[t],e};var Ur=function(){this._fileDescriptors={},this._nextId=0};function Br(t){return{type:Dr.API_ERROR,errorData:Yr(t.writeToBuffer())}}function zr(t){return f.fromBuffer(Kr(t.errorData))}function qr(t){return{type:Dr.ERROR,name:t.name,message:t.message,stack:t.stack}}function Wr(t){var e=Ue[t.name];"function"!=typeof e&&(e=Error);var r=new e(t.message);return r.stack=t.stack,r}function Hr(t){return{type:Dr.STATS,statsData:Yr(t.toBuffer())}}function Gr(t){return y.fromBuffer(Kr(t.statsData))}function Zr(t){return{type:Dr.FILEFLAG,flagStr:t.getFlagString()}}function Vr(t){return p.getFileFlag(t.flagStr)}function Yr(t){return D(t)}function Kr(t){return C(t)}function Xr(t){return{type:Dr.BUFFER,data:Yr(t)}}function $r(t){return Kr(t.data)}Ur.prototype.toRemoteArg=function(e,r,n,i){var o,a,s=this._nextId++;this._fileDescriptors[s]=e,e.stat((function(u,c){u?i(u):(a=Yr(c.toBuffer()),n.isReadable()?e.read(t.alloc(c.size),0,c.size,0,(function(t,e,u){t?i(t):(o=Yr(u),i(null,{type:Dr.FD,id:s,data:o,stat:a,path:r,flag:n.getFlagString()}))})):i(null,{type:Dr.FD,id:s,data:new ArrayBuffer(0),stat:a,path:r,flag:n.getFlagString()}))}))},Ur.prototype.applyFdAPIRequest=function(t,e){var r=this,n=t.args[0];this._applyFdChanges(n,(function(i,o){i?e(i):o[t.method]((function(i){"close"===t.method&&delete r._fileDescriptors[n.id],e(i)}))}))},Ur.prototype._applyFdChanges=function(t,e){var r=this._fileDescriptors[t.id],n=Kr(t.data),i=y.fromBuffer(Kr(t.stat)),o=p.getFileFlag(t.flag);o.isWriteable()?r.write(n,0,n.length,o.isAppendable()?r.getPos():0,(function(t){function a(){r.stat((function(t,n){t?e(t):n.mode!==i.mode?r.chmod(i.mode,(function(t){e(t,r)})):e(t,r)}))}t?e(t):o.isAppendable()?a():r.truncate(n.length,(function(){a()}))})):e(null,r)};var Jr=function(t){function e(e,r,n,i,o,a){t.call(this,e,r,n,i,a),this._remoteFdId=o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getRemoteFdId=function(){return this._remoteFdId},e.prototype.toRemoteArg=function(){return{type:Dr.FD,id:this._remoteFdId,data:Yr(this.getBuffer()),stat:Yr(this.getStats().toBuffer()),path:this.getPath(),flag:this.getFlag().getFlagString()}},e.prototype.sync=function(t){this._syncClose("sync",t)},e.prototype.close=function(t){this._syncClose("close",t)},e.prototype._syncClose=function(t,e){var r=this;this.isDirty()?this._fs.syncClose(t,this,(function(t){t||r.resetDirty(),e(t)})):e()},e}($),Qr=function(e){function r(t,n){var i=this;void 0===n&&(n=!0),e.call(this),this._callbackConverter=new Cr,this._isInitialized=!1,this._isReadOnly=!1,this._supportLinks=!1,this._supportProps=!1,this._worker=t,I(n,r.Name,{worker:"Web Worker instance"}),this._worker.addEventListener("message",(function(t){var e,r=t.data;if((e=r)&&"object"==typeof e&&e.hasOwnProperty("browserfsMessage")&&e.browserfsMessage){var n,o=r.args,a=new Array(o.length);for(n=0;n<a.length;n++)a[n]=i._argRemote2Local(o[n]);i._callbackConverter.toLocalArg(r.cbId).apply(null,a)}}))}return e&&(r.__proto__=e),r.prototype=Object.create(e&&e.prototype),r.prototype.constructor=r,r.Create=function(t,e){var n=new r(t.worker,!1);n.initialize((function(){e(null,n)}))},r.isAvailable=function(){return"undefined"!=typeof importScripts||"undefined"!=typeof Worker},r.attachRemoteListener=function(e){var r=new Ur;function n(e,n,i){"object"==typeof e?e instanceof y?i(null,Hr(e)):e instanceof f?i(null,Br(e)):e instanceof X?i(null,r.toRemoteArg(e,n[0],n[1],i)):e instanceof p?i(null,Zr(e)):e instanceof t?i(null,Xr(e)):e instanceof Error?i(null,qr(e)):i(null,e):i(null,e)}function i(t,r){if(!t)return t;if("object"==typeof t){if("number"!=typeof t.type)return t;var i=t;switch(i.type){case Dr.CB:var o=t.id;return function(){var t,i,a=arguments,s=new Array(arguments.length),u=arguments.length;function c(t){u>0&&(u=-1,i={browserfsMessage:!0,cbId:o,args:[Br(t)]},e.postMessage(i))}for(t=0;t<arguments.length;t++)!function(t,a){n(a,r,(function(r,n){s[t]=n,r?c(r):0==--u&&(i={browserfsMessage:!0,cbId:o,args:s},e.postMessage(i))}))}(t,a[t]);0===arguments.length&&(i={browserfsMessage:!0,cbId:o,args:s},e.postMessage(i))};case Dr.API_ERROR:return zr(i);case Dr.STATS:return Gr(i);case Dr.FILEFLAG:return Vr(i);case Dr.BUFFER:return $r(i);case Dr.ERROR:return Wr(i);default:return t}}return t}e.addEventListener("message",(function(t){var n,o,a=t.data;if((o=a)&&"object"==typeof o&&o.hasOwnProperty("browserfsMessage")&&o.browserfsMessage){var s=a.args,u=new Array(s.length);switch(a.method){case"close":case"sync":n=s[1],r.applyFdAPIRequest(a,(function(t){var r={browserfsMessage:!0,cbId:n.id,args:t?[Br(t)]:[]};e.postMessage(r)}));break;case"probe":!function(){var t=k.getRootFS(),r=s[1],n={type:Dr.PROBE,isReadOnly:t.isReadOnly(),supportsLinks:t.supportsLinks(),supportsProps:t.supportsProps()},i={browserfsMessage:!0,cbId:r.id,args:[n]};e.postMessage(i)}();break;default:for(var c=0;c<s.length;c++)u[c]=i(s[c],u);var l=k.getRootFS();l[a.method].apply(l,u)}}}))},r.prototype.getName=function(){return r.Name},r.prototype.initialize=function(t){var e=this;if(this._isInitialized)t();else{var r={browserfsMessage:!0,method:"probe",args:[this._argLocal2Remote(z()),this._callbackConverter.toRemoteArg((function(r){e._isInitialized=!0,e._isReadOnly=r.isReadOnly,e._supportLinks=r.supportsLinks,e._supportProps=r.supportsProps,t()}))]};this._worker.postMessage(r)}},r.prototype.isReadOnly=function(){return this._isReadOnly},r.prototype.supportsSynch=function(){return!1},r.prototype.supportsLinks=function(){return this._supportLinks},r.prototype.supportsProps=function(){return this._supportProps},r.prototype.rename=function(t,e,r){this._rpc("rename",arguments)},r.prototype.stat=function(t,e,r){this._rpc("stat",arguments)},r.prototype.open=function(t,e,r,n){this._rpc("open",arguments)},r.prototype.unlink=function(t,e){this._rpc("unlink",arguments)},r.prototype.rmdir=function(t,e){this._rpc("rmdir",arguments)},r.prototype.mkdir=function(t,e,r){this._rpc("mkdir",arguments)},r.prototype.readdir=function(t,e){this._rpc("readdir",arguments)},r.prototype.exists=function(t,e){this._rpc("exists",arguments)},r.prototype.realpath=function(t,e,r){this._rpc("realpath",arguments)},r.prototype.truncate=function(t,e,r){this._rpc("truncate",arguments)},r.prototype.readFile=function(t,e,r,n){this._rpc("readFile",arguments)},r.prototype.writeFile=function(t,e,r,n,i,o){this._rpc("writeFile",arguments)},r.prototype.appendFile=function(t,e,r,n,i,o){this._rpc("appendFile",arguments)},r.prototype.chmod=function(t,e,r,n){this._rpc("chmod",arguments)},r.prototype.chown=function(t,e,r,n,i){this._rpc("chown",arguments)},r.prototype.utimes=function(t,e,r,n){this._rpc("utimes",arguments)},r.prototype.link=function(t,e,r){this._rpc("link",arguments)},r.prototype.symlink=function(t,e,r,n){this._rpc("symlink",arguments)},r.prototype.readlink=function(t,e){this._rpc("readlink",arguments)},r.prototype.syncClose=function(t,e,r){this._worker.postMessage({browserfsMessage:!0,method:t,args:[e.toRemoteArg(),this._callbackConverter.toRemoteArg(r)]})},r.prototype._argRemote2Local=function(t){if(!t)return t;if("object"==typeof t){if("number"!=typeof t.type)return t;var e=t;switch(e.type){case Dr.API_ERROR:return zr(e);case Dr.FD:var r=e;return new Jr(this,r.path,p.getFileFlag(r.flag),y.fromBuffer(Kr(r.stat)),r.id,Kr(r.data));case Dr.STATS:return Gr(e);case Dr.FILEFLAG:return Vr(e);case Dr.BUFFER:return $r(e);case Dr.ERROR:return Wr(e);default:return t}}return t},r.prototype._rpc=function(t,e){for(var r=new Array(e.length),n=0;n<e.length;n++)r[n]=this._argLocal2Remote(e[n]);var i={browserfsMessage:!0,method:t,args:r};this._worker.postMessage(i)},r.prototype._argLocal2Remote=function(e){if(!e)return e;switch(typeof e){case"object":return e instanceof y?Hr(e):e instanceof f?Br(e):e instanceof Jr?e.toRemoteArg():e instanceof p?Zr(e):e instanceof t?Xr(e):e instanceof Error?qr(e):"Unknown argument";case"function":return this._callbackConverter.toRemoteArg(e);default:return e}},r}(Y);function tn(t,e,r){var n=new XMLHttpRequest;n.open("HEAD",e,t),n.onreadystatechange=function(t){if(4===n.readyState){if(200!==n.status)return r(new f(n.status,"XHR HEAD error."));try{return r(null,parseInt(n.getResponseHeader("Content-Length")||"-1",10))}catch(t){return r(new f(a.EIO,"XHR HEAD error: Could not read content-length."))}}},n.send()}Qr.Name="WorkerFS",Qr.Options={worker:{type:"object",description:"The target worker that you want to connect to, or the current worker if in a worker context.",validator:function(t,e){t.postMessage?e():e(new f(a.EINVAL,"option must be a Web Worker instance."))}}};var en=function(e,r,n){var i=new XMLHttpRequest;i.open("GET",e,!0);var o=!0;switch(r){case"buffer":i.responseType="arraybuffer";break;case"json":try{i.responseType="json",o="json"===i.responseType}catch(t){o=!1}break;default:return n(new f(a.EINVAL,"Invalid download type: "+r))}i.onreadystatechange=function(e){if(4===i.readyState){if(200!==i.status)return n(new f(i.status,"XHR error."));switch(r){case"buffer":return n(null,i.response?t.from(i.response):z());case"json":return n(null,o?i.response:JSON.parse(i.responseText))}}},i.send()},rn=L&&"undefined"!=typeof Blob?function(e,r){var n,i,o=new XMLHttpRequest;switch(o.open("GET",e,!1),r){case"buffer":o.responseType="arraybuffer";break;case"json":break;default:throw new f(a.EINVAL,"Invalid download type: "+r)}if(o.onreadystatechange=function(e){if(4===o.readyState)if(200===o.status)switch(r){case"buffer":n=t.from(o.response);break;case"json":n=JSON.parse(o.response)}else i=new f(o.status,"XHR error.")},o.send(),i)throw i;return n}:function(e,r){var n=new XMLHttpRequest;n.open("GET",e,!1);var i=null,o=null;if(n.overrideMimeType("text/plain; charset=x-user-defined"),n.onreadystatechange=function(e){if(4===n.readyState){if(200!==n.status)return void(o=new f(n.status,"XHR error."));switch(r){case"buffer":var a=n.responseText;i=t.alloc(a.length);for(var s=0;s<a.length;s++)i[s]=a.charCodeAt(s);return;case"json":return void(i=JSON.parse(n.responseText))}}},n.send(),o)throw o;return i},nn=function(){this._index={},this.addPath("/",new an)};nn.fromListing=function(t){var e=new nn,r=new an;e._index["/"]=r;for(var n=[["",t,r]];n.length>0;){var i=void 0,o=n.pop(),a=o[0],s=o[1],u=o[2];for(var c in s)if(s.hasOwnProperty(c)){var l=s[c],f=a+"/"+c;l?(e._index[f]=i=new an,n.push([f,l,i])):i=new on(new y(d.FILE,-1,365)),u&&(u._ls[c]=i)}}return e},nn.prototype.fileIterator=function(t){var e=this;for(var r in e._index)if(e._index.hasOwnProperty(r))for(var n=e._index[r],i=0,o=n.getListing();i<o.length;i+=1){var a=o[i],s=n.getItem(a);sn(s)&&t(s.getData())}},nn.prototype.addPath=function(t,e){if(!e)throw new Error("Inode must be specified");if("/"!==t[0])throw new Error("Path must be absolute, got: "+t);if(this._index.hasOwnProperty(t))return this._index[t]===e;var r=this._split_path(t),n=r[0],i=r[1],o=this._index[n];return!(void 0===o&&"/"!==t&&(o=new an,!this.addPath(n,o))||"/"!==t&&!o.addItem(i,e)||(un(e)&&(this._index[t]=e),0))},nn.prototype.addPathFast=function(t,e){var r=t.lastIndexOf("/"),n=0===r?"/":t.substring(0,r),i=t.substring(r+1),o=this._index[n];return void 0===o&&(o=new an,this.addPathFast(n,o)),!!o.addItem(i,e)&&(e.isDir()&&(this._index[t]=e),!0)},nn.prototype.removePath=function(t){var e=this._split_path(t),r=e[0],n=e[1],i=this._index[r];if(void 0===i)return null;var o=i.remItem(n);if(null===o)return null;if(un(o)){for(var a=0,s=o.getListing();a<s.length;a+=1){var u=s[a];this.removePath(t+"/"+u)}"/"!==t&&delete this._index[t]}return o},nn.prototype.ls=function(t){var e=this._index[t];return void 0===e?null:e.getListing()},nn.prototype.getInode=function(t){var e=this._split_path(t),r=e[0],n=e[1],i=this._index[r];return void 0===i?null:r===t?i:i.getItem(n)},nn.prototype._split_path=function(t){var e=u.dirname(t);return[e,t.substr(e.length+("/"===e?0:1))]};var on=function(t){this.data=t};on.prototype.isFile=function(){return!0},on.prototype.isDir=function(){return!1},on.prototype.getData=function(){return this.data},on.prototype.setData=function(t){this.data=t};var an=function(t){void 0===t&&(t=null),this.data=t,this._ls={}};function sn(t){return!!t&&t.isFile()}function un(t){return!!t&&t.isDir()}an.prototype.isFile=function(){return!1},an.prototype.isDir=function(){return!0},an.prototype.getData=function(){return this.data},an.prototype.getStats=function(){return new y(d.DIRECTORY,4096,365)},an.prototype.getListing=function(){return Object.keys(this._ls)},an.prototype.getItem=function(t){return this._ls[t]||null},an.prototype.addItem=function(t,e){return!(t in this._ls)&&(this._ls[t]=e,!0)},an.prototype.remItem=function(t){var e=this._ls[t];return void 0===e?null:(delete this._ls[t],e)};var cn=function(t){function e(r,n,i){void 0===n&&(n=""),void 0===i&&(i=!0),t.call(this),r||(r="index.json"),n.length>0&&"/"!==n.charAt(n.length-1)&&(n+="/"),this.prefixUrl=n;var o=null;if("string"==typeof r){if(!(o=this._requestFileSync(r,"json")))throw new Error("Unable to find listing at URL: ${listingUrlOrObj}")}else o=r;I(i,e.Name,{index:"string"==typeof r?r:"file index as an object",baseUrl:n}),this._index=nn.fromListing(o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){void 0===t.index&&(t.index="index.json"),"string"==typeof t.index?e.FromURL(t.index,r,t.baseUrl,!1):r(null,new e(t.index,t.baseUrl,!1))},e.isAvailable=function(){return"undefined"!=typeof XMLHttpRequest&&null!==XMLHttpRequest},e.FromURL=function(t,r,n,i){void 0===n&&(n=t.slice(0,t.lastIndexOf("/")+1)),void 0===i&&(i=!0),i&&console.warn("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \""+t+'", baseUrl: "'+n+"\" }, cb)' instead."),en(t,"json",(function(t,i){t?r(t):r(null,new e(i,n,!1))}))},e.prototype.empty=function(){this._index.fileIterator((function(t){t.fileData=null}))},e.prototype.getName=function(){return e.Name},e.prototype.diskSpace=function(t,e){e(0,0)},e.prototype.isReadOnly=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.preloadFile=function(t,e){var r=this._index.getInode(t);if(!sn(r))throw f.EISDIR(t);if(null===r)throw f.ENOENT(t);var n=r.getData();n.size=e.length,n.fileData=e},e.prototype.stat=function(t,e,r){var n,i=this._index.getInode(t);if(null===i)return r(f.ENOENT(t));sn(i)?(n=i.getData()).size<0?this._requestFileSizeAsync(t,(function(t,e){if(t)return r(t);n.size=e,r(null,n.clone())})):r(null,n.clone()):un(i)?(n=i.getStats(),r(null,n)):r(f.FileError(a.EINVAL,t))},e.prototype.statSync=function(t,e){var r,n=this._index.getInode(t);if(null===n)throw f.ENOENT(t);if(sn(n))(r=n.getData()).size<0&&(r.size=this._requestFileSizeSync(t));else{if(!un(n))throw f.FileError(a.EINVAL,t);r=n.getStats()}return r},e.prototype.open=function(t,e,r,n){if(e.isWriteable())return n(new f(a.EPERM,t));var i=this,o=this._index.getInode(t);if(null===o)return n(f.ENOENT(t));if(!sn(o))return n(f.EISDIR(t));var s=o.getData();switch(e.pathExistsAction()){case l.THROW_EXCEPTION:case l.TRUNCATE_FILE:return n(f.EEXIST(t));case l.NOP:if(s.fileData)return n(null,new J(i,t,e,s.clone(),s.fileData));this._requestFileAsync(t,"buffer",(function(r,o){return r?n(r):(s.size=o.length,s.fileData=o,n(null,new J(i,t,e,s.clone(),o)))}));break;default:return n(new f(a.EINVAL,"Invalid FileMode object."))}},e.prototype.openSync=function(t,e,r){if(e.isWriteable())throw new f(a.EPERM,t);var n=this._index.getInode(t);if(null===n)throw f.ENOENT(t);if(!sn(n))throw f.EISDIR(t);var i=n.getData();switch(e.pathExistsAction()){case l.THROW_EXCEPTION:case l.TRUNCATE_FILE:throw f.EEXIST(t);case l.NOP:if(i.fileData)return new J(this,t,e,i.clone(),i.fileData);var o=this._requestFileSync(t,"buffer");return i.size=o.length,i.fileData=o,new J(this,t,e,i.clone(),o);default:throw new f(a.EINVAL,"Invalid FileMode object.")}},e.prototype.readdir=function(t,e){try{e(null,this.readdirSync(t))}catch(t){e(t)}},e.prototype.readdirSync=function(t){var e=this._index.getInode(t);if(null===e)throw f.ENOENT(t);if(un(e))return e.getListing();throw f.ENOTDIR(t)},e.prototype.readFile=function(t,e,r,n){var i=n;this.open(t,r,420,(function(t,r){if(t)return n(t);n=function(t,e){r.close((function(r){return t||(t=r),i(t,e)}))};var o=r.getBuffer();null===e?n(t,U(o)):function(t,e,r){try{r(null,t.toString(e))}catch(t){r(t)}}(o,e,n)}))},e.prototype.readFileSync=function(t,e,r){var n=this.openSync(t,r,420);try{var i=n.getBuffer();return null===e?U(i):i.toString(e)}finally{n.closeSync()}},e.prototype.getXhrPath=function(t){return"/"===t.charAt(0)&&(t=t.slice(1)),this.prefixUrl+t},e.prototype._requestFileAsync=function(t,e,r){en(this.getXhrPath(t),e,r)},e.prototype._requestFileSync=function(t,e){return rn(this.getXhrPath(t),e)},e.prototype._requestFileSizeAsync=function(t,e){!function(t,e){tn(!0,t,e)}(this.getXhrPath(t),e)},e.prototype._requestFileSizeSync=function(t){return e=this.getXhrPath(t),r=-1,tn(!1,e,(function(t,e){if(t)throw t;r=e})),r;var e,r},e}(Y);cn.Name="XmlHttpRequest",cn.Options={index:{type:["string","object"],optional:!0,description:"URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."},baseUrl:{type:"string",optional:!0,description:"Used as the URL prefix for fetched files. Default: Fetch files relative to the index."}};var ln=function(){};ln.str2byte=function(t,e){for(var r=t.length>e.length?e.length:t.length,n=0;n<r;n++){var i=t.charCodeAt(n);if(i>127){var o=ln.extendedChars.indexOf(t.charAt(n));o>-1&&(i=o+128)}e[i]=n}return r},ln.byte2str=function(t){for(var e=new Array(t.length),r=0;r<t.length;r++){var n=t[r];e[r]=n>127?ln.extendedChars[n-128]:String.fromCharCode(n)}return e.join("")},ln.byteLength=function(t){return t.length},ln.extendedChars=["Ç","ü","é","â","ä","à","å","ç","ê","ë","è","ï","î","ì","Ä","Å","É","æ","Æ","ô","ö","ò","û","ù","ÿ","Ö","Ü","ø","£","Ø","×","ƒ","á","í","ó","ú","ñ","Ñ","ª","º","¿","®","¬","½","¼","¡","«","»","_","_","_","¦","¦","Á","Â","À","©","¦","¦","+","+","¢","¥","+","+","-","-","+","-","+","ã","Ã","+","+","-","-","¦","-","+","¤","ð","Ð","Ê","Ë","È","i","Í","Î","Ï","+","+","_","_","¦","Ì","_","Ó","ß","Ô","Ò","õ","Õ","µ","þ","Þ","Ú","Û","Ù","ý","Ý","¯","´","­","±","_","¾","¶","§","÷","¸","°","¨","·","¹","³","²","_"," "];var fn,hn,dn=r(31).inflateRaw,pn={};function yn(t,e){return new Date(1980+(e>>9),(e>>5&15)-1,31&e,t>>11,t>>5&63,31&t)}function gn(t,e,r,n){return 0===n?"":e?t.toString("utf8",r,r+n):ln.byte2str(t.slice(r,r+n))}!function(t){t[t.MSDOS=0]="MSDOS",t[t.AMIGA=1]="AMIGA",t[t.OPENVMS=2]="OPENVMS",t[t.UNIX=3]="UNIX",t[t.VM_CMS=4]="VM_CMS",t[t.ATARI_ST=5]="ATARI_ST",t[t.OS2_HPFS=6]="OS2_HPFS",t[t.MAC=7]="MAC",t[t.Z_SYSTEM=8]="Z_SYSTEM",t[t.CP_M=9]="CP_M",t[t.NTFS=10]="NTFS",t[t.MVS=11]="MVS",t[t.VSE=12]="VSE",t[t.ACORN_RISC=13]="ACORN_RISC",t[t.VFAT=14]="VFAT",t[t.ALT_MVS=15]="ALT_MVS",t[t.BEOS=16]="BEOS",t[t.TANDEM=17]="TANDEM",t[t.OS_400=18]="OS_400",t[t.OSX=19]="OSX"}(fn||(fn={})),function(t){t[t.STORED=0]="STORED",t[t.SHRUNK=1]="SHRUNK",t[t.REDUCED_1=2]="REDUCED_1",t[t.REDUCED_2=3]="REDUCED_2",t[t.REDUCED_3=4]="REDUCED_3",t[t.REDUCED_4=5]="REDUCED_4",t[t.IMPLODE=6]="IMPLODE",t[t.DEFLATE=8]="DEFLATE",t[t.DEFLATE64=9]="DEFLATE64",t[t.TERSE_OLD=10]="TERSE_OLD",t[t.BZIP2=12]="BZIP2",t[t.LZMA=14]="LZMA",t[t.TERSE_NEW=18]="TERSE_NEW",t[t.LZ77=19]="LZ77",t[t.WAVPACK=97]="WAVPACK",t[t.PPMD=98]="PPMD"}(hn||(hn={}));var _n=function(t){if(this.data=t,67324752!==t.readUInt32LE(0))throw new f(a.EINVAL,"Invalid Zip file: Local file header has invalid signature: "+this.data.readUInt32LE(0))};_n.prototype.versionNeeded=function(){return this.data.readUInt16LE(4)},_n.prototype.flags=function(){return this.data.readUInt16LE(6)},_n.prototype.compressionMethod=function(){return this.data.readUInt16LE(8)},_n.prototype.lastModFileTime=function(){return yn(this.data.readUInt16LE(10),this.data.readUInt16LE(12))},_n.prototype.rawLastModFileTime=function(){return this.data.readUInt32LE(10)},_n.prototype.crc32=function(){return this.data.readUInt32LE(14)},_n.prototype.fileNameLength=function(){return this.data.readUInt16LE(26)},_n.prototype.extraFieldLength=function(){return this.data.readUInt16LE(28)},_n.prototype.fileName=function(){return gn(this.data,this.useUTF8(),30,this.fileNameLength())},_n.prototype.extraField=function(){var t=30+this.fileNameLength();return this.data.slice(t,t+this.extraFieldLength())},_n.prototype.totalSize=function(){return 30+this.fileNameLength()+this.extraFieldLength()},_n.prototype.useUTF8=function(){return 2048==(2048&this.flags())};var bn=function(t,e,r){this.header=t,this.record=e,this.data=r};bn.prototype.decompress=function(){var t=this.header.compressionMethod(),e=pn[t];if(e)return e(this.data,this.record.compressedSize(),this.record.uncompressedSize(),this.record.flag());var r=hn[t];throw r||(r="Unknown: "+t),new f(a.EINVAL,"Invalid compression method on file '"+this.header.fileName()+"': "+r)},bn.prototype.getHeader=function(){return this.header},bn.prototype.getRecord=function(){return this.record},bn.prototype.getRawData=function(){return this.data};var mn=function(t){this.data=t};mn.prototype.crc32=function(){return this.data.readUInt32LE(0)},mn.prototype.compressedSize=function(){return this.data.readUInt32LE(4)},mn.prototype.uncompressedSize=function(){return this.data.readUInt32LE(8)};var vn=function(t){if(this.data=t,134630224!==this.data.readUInt32LE(0))throw new f(a.EINVAL,"Invalid archive extra data record signature: "+this.data.readUInt32LE(0))};vn.prototype.length=function(){return this.data.readUInt32LE(4)},vn.prototype.extraFieldData=function(){return this.data.slice(8,8+this.length())};var wn=function(t){if(this.data=t,84233040!==this.data.readUInt32LE(0))throw new f(a.EINVAL,"Invalid digital signature signature: "+this.data.readUInt32LE(0))};wn.prototype.size=function(){return this.data.readUInt16LE(4)},wn.prototype.signatureData=function(){return this.data.slice(6,6+this.size())};var En=function(t,e){if(this.zipData=t,this.data=e,33639248!==this.data.readUInt32LE(0))throw new f(a.EINVAL,"Invalid Zip file: Central directory record has invalid signature: "+this.data.readUInt32LE(0));this._filename=this.produceFilename()};En.prototype.versionMadeBy=function(){return this.data.readUInt16LE(4)},En.prototype.versionNeeded=function(){return this.data.readUInt16LE(6)},En.prototype.flag=function(){return this.data.readUInt16LE(8)},En.prototype.compressionMethod=function(){return this.data.readUInt16LE(10)},En.prototype.lastModFileTime=function(){return yn(this.data.readUInt16LE(12),this.data.readUInt16LE(14))},En.prototype.rawLastModFileTime=function(){return this.data.readUInt32LE(12)},En.prototype.crc32=function(){return this.data.readUInt32LE(16)},En.prototype.compressedSize=function(){return this.data.readUInt32LE(20)},En.prototype.uncompressedSize=function(){return this.data.readUInt32LE(24)},En.prototype.fileNameLength=function(){return this.data.readUInt16LE(28)},En.prototype.extraFieldLength=function(){return this.data.readUInt16LE(30)},En.prototype.fileCommentLength=function(){return this.data.readUInt16LE(32)},En.prototype.diskNumberStart=function(){return this.data.readUInt16LE(34)},En.prototype.internalAttributes=function(){return this.data.readUInt16LE(36)},En.prototype.externalAttributes=function(){return this.data.readUInt32LE(38)},En.prototype.headerRelativeOffset=function(){return this.data.readUInt32LE(42)},En.prototype.produceFilename=function(){return gn(this.data,this.useUTF8(),46,this.fileNameLength()).replace(/\\/g,"/")},En.prototype.fileName=function(){return this._filename},En.prototype.rawFileName=function(){return this.data.slice(46,46+this.fileNameLength())},En.prototype.extraField=function(){var t=44+this.fileNameLength();return this.data.slice(t,t+this.extraFieldLength())},En.prototype.fileComment=function(){var t=46+this.fileNameLength()+this.extraFieldLength();return gn(this.data,this.useUTF8(),t,this.fileCommentLength())},En.prototype.rawFileComment=function(){var t=46+this.fileNameLength()+this.extraFieldLength();return this.data.slice(t,t+this.fileCommentLength())},En.prototype.totalSize=function(){return 46+this.fileNameLength()+this.extraFieldLength()+this.fileCommentLength()},En.prototype.isDirectory=function(){var t=this.fileName();return!!(16&this.externalAttributes())||"/"===t.charAt(t.length-1)},En.prototype.isFile=function(){return!this.isDirectory()},En.prototype.useUTF8=function(){return 2048==(2048&this.flag())},En.prototype.isEncrypted=function(){return 1==(1&this.flag())},En.prototype.getFileData=function(){var t=this.headerRelativeOffset(),e=new _n(this.zipData.slice(t));return new bn(e,this,this.zipData.slice(t+e.totalSize()))},En.prototype.getData=function(){return this.getFileData().decompress()},En.prototype.getRawData=function(){return this.getFileData().getRawData()},En.prototype.getStats=function(){return new y(d.FILE,this.uncompressedSize(),365,new Date,this.lastModFileTime())};var Sn=function(t){if(this.data=t,101010256!==this.data.readUInt32LE(0))throw new f(a.EINVAL,"Invalid Zip file: End of central directory record has invalid signature: "+this.data.readUInt32LE(0))};Sn.prototype.diskNumber=function(){return this.data.readUInt16LE(4)},Sn.prototype.cdDiskNumber=function(){return this.data.readUInt16LE(6)},Sn.prototype.cdDiskEntryCount=function(){return this.data.readUInt16LE(8)},Sn.prototype.cdTotalEntryCount=function(){return this.data.readUInt16LE(10)},Sn.prototype.cdSize=function(){return this.data.readUInt32LE(12)},Sn.prototype.cdOffset=function(){return this.data.readUInt32LE(16)},Sn.prototype.cdZipCommentLength=function(){return this.data.readUInt16LE(20)},Sn.prototype.cdZipComment=function(){return gn(this.data,!0,22,this.cdZipCommentLength())},Sn.prototype.rawCdZipComment=function(){return this.data.slice(22,22+this.cdZipCommentLength())};var Rn=function(t,e,r,n){this.index=t,this.directoryEntries=e,this.eocd=r,this.data=n},kn=function(t){function e(r,n,i){void 0===n&&(n=""),void 0===i&&(i=!0),t.call(this),this.name=n,this._index=new nn,this._directoryEntries=[],this._eocd=null,I(i,e.Name,{zipData:"zip data as a Buffer",name:n}),r instanceof Rn?(this._index=r.index,this._directoryEntries=r.directoryEntries,this._eocd=r.eocd,this.data=r.data):(this.data=r,this.populateIndex())}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){try{e.computeIndex(t.zipData,(function(n){var i=new e(n,t.name,!1);r(null,i)}),!1)}catch(t){r(t)}},e.isAvailable=function(){return!0},e.RegisterDecompressionMethod=function(t,e){pn[t]=e},e.computeIndex=function(t,r,n){void 0===n&&(n=!0),n&&console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");var i=new nn,o=e.getEOCD(t);if(o.diskNumber()!==o.cdDiskNumber())throw new f(a.EINVAL,"ZipFS does not support spanned zip files.");var s=o.cdOffset();if(4294967295===s)throw new f(a.EINVAL,"ZipFS does not support Zip64.");var u=s+o.cdSize();e.computeIndexResponsive(t,i,s,u,r,[],o)},e.getEOCD=function(t){for(var e=Math.min(65557,t.length-1),r=22;r<e;r++)if(101010256===t.readUInt32LE(t.length-r))return new Sn(t.slice(t.length-r));throw new f(a.EINVAL,"Invalid ZIP file: Could not locate End of Central Directory signature.")},e.addToIndex=function(t,e){var r=t.fileName();if("/"===r.charAt(0))throw new Error("WHY IS THIS ABSOLUTE");"/"===r.charAt(r.length-1)&&(r=r.substr(0,r.length-1)),t.isDirectory()?e.addPathFast("/"+r,new an(t)):e.addPathFast("/"+r,new on(t))},e.computeIndexResponsive=function(t,r,n,i,o,a,s){if(n<i){for(var u=0;u++<200&&n<i;){var c=new En(t,t.slice(n));e.addToIndex(c,r),n+=c.totalSize(),a.push(c)}Ar((function(){e.computeIndexResponsive(t,r,n,i,o,a,s)}))}else o(new Rn(r,a,s,t))},e.prototype.getName=function(){return e.Name+(""!==this.name?" "+this.name:"")},e.prototype.getCentralDirectoryEntry=function(t){var e=this._index.getInode(t);if(null===e)throw f.ENOENT(t);if(sn(e))return e.getData();if(un(e))return e.getData();throw f.EPERM("Invalid inode: "+e)},e.prototype.getCentralDirectoryEntryAt=function(t){var e=this._directoryEntries[t];if(!e)throw new RangeError("Invalid directory index: "+t+".");return e},e.prototype.getNumberOfCentralDirectoryEntries=function(){return this._directoryEntries.length},e.prototype.getEndOfCentralDirectory=function(){return this._eocd},e.prototype.diskSpace=function(t,e){e(this.data.length,0)},e.prototype.isReadOnly=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.statSync=function(t,e){var r,n=this._index.getInode(t);if(null===n)throw f.ENOENT(t);if(sn(n))r=n.getData().getStats();else{if(!un(n))throw new f(a.EINVAL,"Invalid inode.");r=n.getStats()}return r},e.prototype.openSync=function(t,e,r){if(e.isWriteable())throw new f(a.EPERM,t);var n=this._index.getInode(t);if(!n)throw f.ENOENT(t);if(!sn(n))throw f.EISDIR(t);var i=n.getData(),o=i.getStats();switch(e.pathExistsAction()){case l.THROW_EXCEPTION:case l.TRUNCATE_FILE:throw f.EEXIST(t);case l.NOP:return new J(this,t,e,o,i.getData());default:throw new f(a.EINVAL,"Invalid FileMode object.")}},e.prototype.readdirSync=function(t){var e=this._index.getInode(t);if(e){if(un(e))return e.getListing();throw f.ENOTDIR(t)}throw f.ENOENT(t)},e.prototype.readFileSync=function(t,e,r){var n=this.openSync(t,r,420);try{var i=n.getBuffer();return null===e?U(i):i.toString(e)}finally{n.closeSync()}},e.prototype.populateIndex=function(){var t=this,r=this._eocd=e.getEOCD(this.data);if(r.diskNumber()!==r.cdDiskNumber())throw new f(a.EINVAL,"ZipFS does not support spanned zip files.");var n=r.cdOffset();if(4294967295===n)throw new f(a.EINVAL,"ZipFS does not support Zip64.");for(var i=n+r.cdSize();n<i;){var o=new En(t.data,t.data.slice(n));n+=o.totalSize(),e.addToIndex(o,t._index),t._directoryEntries.push(o)}},e}(K);function On(t,e,r){return t.toString("ascii",e,e+r).trim()}function Tn(t,e,r){if(1===r)return String.fromCharCode(t[e]);for(var n=Math.floor(r/2),i=new Array(n),o=0;o<n;o++){var a=e+(o<<1);i[o]=String.fromCharCode(t[a+1]|t[a]<<8)}return i.join("")}function An(t,e){var r=parseInt(On(t,e,4),10),n=parseInt(On(t,e+4,2),10),i=parseInt(On(t,e+6,2),10),o=parseInt(On(t,e+8,2),10),a=parseInt(On(t,e+10,2),10),s=parseInt(On(t,e+12,2),10),u=parseInt(On(t,e+14,2),10);return new Date(r,n,i,o,a,s,100*u)}function In(t,e){var r=t[e],n=t[e+1],i=t[e+2],o=t[e+3],a=t[e+4],s=t[e+5];return new Date(r,n-1,i,o,a,s)}function Ln(t,e){var r=t.slice(e),n=new Un(r);switch(n.signatureWord()){case 17221:return new Bn(r);case 20548:return new zn(r);case 21328:return new qn(r);case 21332:return new Wn(r);case 17746:return new Hn(r);case 17747:return new Gn(r);case 20568:return new Vn(r);case 20558:return new Yn(r);case 21324:return new Kn(r);case 20045:return new $n(r);case 17228:return new Jn(r);case 20556:return new Qn(r);case 21061:return new ti(r);case 21574:return new ei(r);case 21318:return new ri(r);case 21074:return new Zn(r);default:return n}}function xn(t,e,r,n){r-=4;for(var i=new Array;e<r;){var o=Ln(t,e),a=o.length();if(0===a)return i;if(e+=a,o instanceof Wn)break;o instanceof Bn?i=i.concat(o.getEntries(n)):i.push(o)}return i}kn.Name="ZipFS",kn.Options={zipData:{type:"object",description:"The zip file as a Buffer object.",validator:q},name:{type:"string",optional:!0,description:"The name of the zip file (optional)."}},kn.CompressionMethod=hn,kn.RegisterDecompressionMethod(hn.DEFLATE,(function(t,e,r){return M(dn(t.slice(0,e),{chunkSize:r}))})),kn.RegisterDecompressionMethod(hn.STORED,(function(t,e,r){return U(t,0,r)}));var Nn=function(t){this._data=t};Nn.prototype.type=function(){return this._data[0]},Nn.prototype.standardIdentifier=function(){return On(this._data,1,5)},Nn.prototype.version=function(){return this._data[6]},Nn.prototype.data=function(){return this._data.slice(7,2048)};var Pn=function(t){function e(e){t.call(this,e),this._root=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.systemIdentifier=function(){return this._getString32(8)},e.prototype.volumeIdentifier=function(){return this._getString32(40)},e.prototype.volumeSpaceSize=function(){return this._data.readUInt32LE(80)},e.prototype.volumeSetSize=function(){return this._data.readUInt16LE(120)},e.prototype.volumeSequenceNumber=function(){return this._data.readUInt16LE(124)},e.prototype.logicalBlockSize=function(){return this._data.readUInt16LE(128)},e.prototype.pathTableSize=function(){return this._data.readUInt32LE(132)},e.prototype.locationOfTypeLPathTable=function(){return this._data.readUInt32LE(140)},e.prototype.locationOfOptionalTypeLPathTable=function(){return this._data.readUInt32LE(144)},e.prototype.locationOfTypeMPathTable=function(){return this._data.readUInt32BE(148)},e.prototype.locationOfOptionalTypeMPathTable=function(){return this._data.readUInt32BE(152)},e.prototype.rootDirectoryEntry=function(t){return null===this._root&&(this._root=this._constructRootDirectoryRecord(this._data.slice(156)),this._root.rootCheckForRockRidge(t)),this._root},e.prototype.volumeSetIdentifier=function(){return this._getString(190,128)},e.prototype.publisherIdentifier=function(){return this._getString(318,128)},e.prototype.dataPreparerIdentifier=function(){return this._getString(446,128)},e.prototype.applicationIdentifier=function(){return this._getString(574,128)},e.prototype.copyrightFileIdentifier=function(){return this._getString(702,38)},e.prototype.abstractFileIdentifier=function(){return this._getString(740,36)},e.prototype.bibliographicFileIdentifier=function(){return this._getString(776,37)},e.prototype.volumeCreationDate=function(){return An(this._data,813)},e.prototype.volumeModificationDate=function(){return An(this._data,830)},e.prototype.volumeExpirationDate=function(){return An(this._data,847)},e.prototype.volumeEffectiveDate=function(){return An(this._data,864)},e.prototype.fileStructureVersion=function(){return this._data[881]},e.prototype.applicationUsed=function(){return this._data.slice(883,1395)},e.prototype.reserved=function(){return this._data.slice(1395,2048)},e.prototype._getString32=function(t){return this._getString(t,32)},e}(Nn),Dn=function(t){function e(e){if(t.call(this,e),1!==this.type())throw new f(a.EIO,"Invalid primary volume descriptor.")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.name=function(){return"ISO9660"},e.prototype._constructRootDirectoryRecord=function(t){return new jn(t,-1)},e.prototype._getString=function(t,e){return this._getString(t,e)},e}(Pn),Fn=function(t){function e(e){if(t.call(this,e),2!==this.type())throw new f(a.EIO,"Invalid supplementary volume descriptor.");var r=this.escapeSequence(),n=r[2];if(37!==r[0]||47!==r[1]||64!==n&&67!==n&&69!==n)throw new f(a.EIO,"Unrecognized escape sequence for SupplementaryVolumeDescriptor: "+r.toString())}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.name=function(){return"Joliet"},e.prototype.escapeSequence=function(){return this._data.slice(88,120)},e.prototype._constructRootDirectoryRecord=function(t){return new Cn(t,-1)},e.prototype._getString=function(t,e){return Tn(this._data,t,e)},e}(Pn),Mn=function(t,e){this._suEntries=null,this._fileOrDir=null,this._data=t,this._rockRidgeOffset=e};Mn.prototype.hasRockRidge=function(){return this._rockRidgeOffset>-1},Mn.prototype.getRockRidgeOffset=function(){return this._rockRidgeOffset},Mn.prototype.rootCheckForRockRidge=function(t){var e=this.getDirectory(t);this._rockRidgeOffset=e.getDotEntry(t)._getRockRidgeOffset(t),this._rockRidgeOffset>-1&&(this._fileOrDir=null)},Mn.prototype.length=function(){return this._data[0]},Mn.prototype.extendedAttributeRecordLength=function(){return this._data[1]},Mn.prototype.lba=function(){return 2048*this._data.readUInt32LE(2)},Mn.prototype.dataLength=function(){return this._data.readUInt32LE(10)},Mn.prototype.recordingDate=function(){return In(this._data,18)},Mn.prototype.fileFlags=function(){return this._data[25]},Mn.prototype.fileUnitSize=function(){return this._data[26]},Mn.prototype.interleaveGapSize=function(){return this._data[27]},Mn.prototype.volumeSequenceNumber=function(){return this._data.readUInt16LE(28)},Mn.prototype.identifier=function(){return this._getString(33,this._data[32])},Mn.prototype.fileName=function(t){if(this.hasRockRidge()){var e=this._rockRidgeFilename(t);if(null!==e)return e}var r=this.identifier();if(this.isDirectory(t))return r;var n=r.indexOf(";");return-1===n?r:"."===r[n-1]?r.slice(0,n-1):r.slice(0,n)},Mn.prototype.isDirectory=function(t){var e=!!(2&this.fileFlags());return!e&&this.hasRockRidge()&&(e=this.getSUEntries(t).filter((function(t){return t instanceof Jn})).length>0),e},Mn.prototype.isSymlink=function(t){return this.hasRockRidge()&&this.getSUEntries(t).filter((function(t){return t instanceof Kn})).length>0},Mn.prototype.getSymlinkPath=function(t){for(var e="",r=this.getSUEntries(t),n=this._getGetString(),i=0,o=r;i<o.length;i+=1){var a=o[i];if(a instanceof Kn){for(var s=0,u=a.componentRecords();s<u.length;s+=1){var c=u[s],l=c.flags();2&l?e+="./":4&l?e+="../":8&l?e+="/":(e+=c.content(n),1&l||(e+="/"))}if(!a.continueFlag())break}}return e.length>1&&"/"===e[e.length-1]?e.slice(0,e.length-1):e},Mn.prototype.getFile=function(t){if(this.isDirectory(t))throw new Error("Tried to get a File from a directory.");return null===this._fileOrDir&&(this._fileOrDir=t.slice(this.lba(),this.lba()+this.dataLength())),this._fileOrDir},Mn.prototype.getDirectory=function(t){if(!this.isDirectory(t))throw new Error("Tried to get a Directory from a file.");return null===this._fileOrDir&&(this._fileOrDir=this._constructDirectory(t)),this._fileOrDir},Mn.prototype.getSUEntries=function(t){return this._suEntries||this._constructSUEntries(t),this._suEntries},Mn.prototype._rockRidgeFilename=function(t){var e=this.getSUEntries(t).filter((function(t){return t instanceof $n}));if(0===e.length||6&e[0].flags())return null;for(var r="",n=this._getGetString(),i=0,o=e;i<o.length;i+=1){var a=o[i];if(r+=a.name(n),!(1&a.flags()))break}return r},Mn.prototype._constructSUEntries=function(t){var e=33+this._data[32];e%2==1&&e++,e+=this._rockRidgeOffset,this._suEntries=xn(this._data,e,this.length(),t)},Mn.prototype._getRockRidgeOffset=function(t){this._rockRidgeOffset=0;var e=this.getSUEntries(t);if(e.length>0){var r=e[0];if(r instanceof qn&&r.checkBytesPass())for(var n=1;n<e.length;n++){var i=e[n];if(i instanceof Zn||i instanceof Hn&&"IEEE_P1282"===i.extensionIdentifier())return r.bytesSkipped()}}return this._rockRidgeOffset=-1,-1};var jn=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._getString=function(t,e){return On(this._data,t,e)},e.prototype._constructDirectory=function(t){return new ii(this,t)},e.prototype._getGetString=function(){return On},e}(Mn),Cn=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._getString=function(t,e){return Tn(this._data,t,e)},e.prototype._constructDirectory=function(t){return new oi(this,t)},e.prototype._getGetString=function(){return Tn},e}(Mn),Un=function(t){this._data=t};Un.prototype.signatureWord=function(){return this._data.readUInt16BE(0)},Un.prototype.signatureWordString=function(){return On(this._data,0,2)},Un.prototype.length=function(){return this._data[2]},Un.prototype.suVersion=function(){return this._data[3]};var Bn=function(t){function e(e){t.call(this,e),this._entries=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.continuationLba=function(){return this._data.readUInt32LE(4)},e.prototype.continuationLbaOffset=function(){return this._data.readUInt32LE(12)},e.prototype.continuationLength=function(){return this._data.readUInt32LE(20)},e.prototype.getEntries=function(t){if(!this._entries){var e=2048*this.continuationLba()+this.continuationLbaOffset();this._entries=xn(t,e,this.continuationLength(),t)}return this._entries},e}(Un),zn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Un),qn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.checkBytesPass=function(){return 190===this._data[4]&&239===this._data[5]},e.prototype.bytesSkipped=function(){return this._data[6]},e}(Un),Wn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Un),Hn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.identifierLength=function(){return this._data[4]},e.prototype.descriptorLength=function(){return this._data[5]},e.prototype.sourceLength=function(){return this._data[6]},e.prototype.extensionVersion=function(){return this._data[7]},e.prototype.extensionIdentifier=function(){return On(this._data,8,this.identifierLength())},e.prototype.extensionDescriptor=function(){return On(this._data,8+this.identifierLength(),this.descriptorLength())},e.prototype.extensionSource=function(){return On(this._data,8+this.identifierLength()+this.descriptorLength(),this.sourceLength())},e}(Un),Gn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.extensionSequence=function(){return this._data[4]},e}(Un),Zn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Un),Vn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.mode=function(){return this._data.readUInt32LE(4)},e.prototype.fileLinks=function(){return this._data.readUInt32LE(12)},e.prototype.uid=function(){return this._data.readUInt32LE(20)},e.prototype.gid=function(){return this._data.readUInt32LE(28)},e.prototype.inode=function(){return this._data.readUInt32LE(36)},e}(Un),Yn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.devTHigh=function(){return this._data.readUInt32LE(4)},e.prototype.devTLow=function(){return this._data.readUInt32LE(12)},e}(Un),Kn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flags=function(){return this._data[4]},e.prototype.continueFlag=function(){return 1&this.flags()},e.prototype.componentRecords=function(){for(var t=new Array,e=5;e<this.length();){var r=new Xn(this._data.slice(e));t.push(r),e+=r.length()}return t},e}(Un),Xn=function(t){this._data=t};Xn.prototype.flags=function(){return this._data[0]},Xn.prototype.length=function(){return 2+this.componentLength()},Xn.prototype.componentLength=function(){return this._data[1]},Xn.prototype.content=function(t){return t(this._data,2,this.componentLength())};var $n=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flags=function(){return this._data[4]},e.prototype.name=function(t){return t(this._data,5,this.length()-5)},e}(Un),Jn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.childDirectoryLba=function(){return this._data.readUInt32LE(4)},e}(Un),Qn=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parentDirectoryLba=function(){return this._data.readUInt32LE(4)},e}(Un),ti=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Un),ei=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flags=function(){return this._data[4]},e.prototype.creation=function(){return 1&this.flags()?this._longFormDates()?An(this._data,5):In(this._data,5):null},e.prototype.modify=function(){if(2&this.flags()){var t=1&this.flags()?1:0;return this._longFormDates?An(this._data,5+17*t):In(this._data,5+7*t)}return null},e.prototype.access=function(){if(4&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,this._longFormDates?An(this._data,5+17*t):In(this._data,5+7*t)}return null},e.prototype.backup=function(){if(16&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,t+=4&this.flags()?1:0,this._longFormDates?An(this._data,5+17*t):In(this._data,5+7*t)}return null},e.prototype.expiration=function(){if(32&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,t+=4&this.flags()?1:0,t+=16&this.flags()?1:0,this._longFormDates?An(this._data,5+17*t):In(this._data,5+7*t)}return null},e.prototype.effective=function(){if(64&this.flags()){var t=1&this.flags()?1:0;return t+=2&this.flags()?1:0,t+=4&this.flags()?1:0,t+=16&this.flags()?1:0,t+=32&this.flags()?1:0,this._longFormDates?An(this._data,5+17*t):In(this._data,5+7*t)}return null},e.prototype._longFormDates=function(){return!!this.flags()},e}(Un),ri=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.virtualSizeHigh=function(){return this._data.readUInt32LE(4)},e.prototype.virtualSizeLow=function(){return this._data.readUInt32LE(12)},e.prototype.tableDepth=function(){return this._data[20]},e}(Un),ni=function(t,e){var r=this;this._fileList=[],this._fileMap={},this._record=t;var n=t.lba(),i=n+t.dataLength();for(2&t.fileFlags()||(n=2048*t.getSUEntries(e).filter((function(t){return t instanceof Jn}))[0].childDirectoryLba(),i=1/0);n<i;)if(0!==e[n]){var o=r._constructDirectoryRecord(e.slice(n)),a=o.fileName(e);"\0"!==a&&""!==a?o.hasRockRidge()&&0!==o.getSUEntries(e).filter((function(t){return t instanceof ti})).length||(r._fileMap[a]=o,r._fileList.push(a)):i===1/0&&(i=n+o.dataLength()),n+=o.length()}else n++};ni.prototype.getRecord=function(t){return this._fileMap[t]},ni.prototype.getFileList=function(){return this._fileList},ni.prototype.getDotEntry=function(t){return this._constructDirectoryRecord(t.slice(this._record.lba()))};var ii=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._constructDirectoryRecord=function(t){return new jn(t,this._record.getRockRidgeOffset())},e}(ni),oi=function(t){function e(e,r){t.call(this,e,r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype._constructDirectoryRecord=function(t){return new Cn(t,this._record.getRockRidgeOffset())},e}(ni),ai=function(t){function e(r,n,i){var o=this;void 0===n&&(n=""),void 0===i&&(i=!0),t.call(this),this._data=r,I(i,e.Name,{data:"ISO data as a Buffer",name:n});for(var s=!1,u=32768,c=new Array;!s;){var l=r.slice(u);switch(new Nn(l).type()){case 1:c.push(new Dn(l));break;case 2:c.push(new Fn(l));break;case 255:s=!0}u+=2048}if(0===c.length)throw new f(a.EIO,"Unable to find a suitable volume descriptor.");c.forEach((function(t){o._pvd&&2===o._pvd.type()||(o._pvd=t)})),this._root=this._pvd.rootDirectoryEntry(r),this._name=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.Create=function(t,r){var n;try{n=new e(t.data,t.name,!1)}catch(t){}finally{r(void 0,n)}},e.isAvailable=function(){return!0},e.prototype.getName=function(){var t="IsoFS"+this._name+(this._pvd?"-"+this._pvd.name():"");return this._root&&this._root.hasRockRidge()&&(t+="-RockRidge"),t},e.prototype.diskSpace=function(t,e){e(this._data.length,0)},e.prototype.isReadOnly=function(){return!0},e.prototype.supportsLinks=function(){return!1},e.prototype.supportsProps=function(){return!1},e.prototype.supportsSynch=function(){return!0},e.prototype.statSync=function(t,e){var r=this._getDirectoryRecord(t);if(null===r)throw f.ENOENT(t);return this._getStats(t,r)},e.prototype.openSync=function(t,e,r){if(e.isWriteable())throw new f(a.EPERM,t);var n=this._getDirectoryRecord(t);if(!n)throw f.ENOENT(t);if(n.isSymlink(this._data))return this.openSync(u.resolve(t,n.getSymlinkPath(this._data)),e,r);if(n.isDirectory(this._data))throw f.EISDIR(t);var i=n.getFile(this._data),o=this._getStats(t,n);switch(e.pathExistsAction()){case l.THROW_EXCEPTION:case l.TRUNCATE_FILE:throw f.EEXIST(t);case l.NOP:return new J(this,t,e,o,i);default:throw new f(a.EINVAL,"Invalid FileMode object.")}},e.prototype.readdirSync=function(t){var e=this._getDirectoryRecord(t);if(e){if(e.isDirectory(this._data))return e.getDirectory(this._data).getFileList().slice(0);throw f.ENOTDIR(t)}throw f.ENOENT(t)},e.prototype.readFileSync=function(t,e,r){var n=this.openSync(t,r,420);try{var i=n.getBuffer();return null===e?U(i):i.toString(e)}finally{n.closeSync()}},e.prototype._getDirectoryRecord=function(t){if("/"===t)return this._root;for(var e=t.split("/").slice(1),r=this._root,n=0,i=e;n<i.length;n+=1){var o=i[n];if(!r.isDirectory(this._data))return null;if(!(r=r.getDirectory(this._data).getRecord(o)))return null}return r},e.prototype._getStats=function(t,e){if(e.isSymlink(this._data)){var r=u.resolve(t,e.getSymlinkPath(this._data)),n=this._getDirectoryRecord(r);return n?this._getStats(r,n):null}var i=e.dataLength(),o=365,a=e.recordingDate(),s=a,c=a,l=a;if(e.hasRockRidge())for(var f=0,h=e.getSUEntries(this._data);f<h.length;f+=1){var p=h[f];if(p instanceof Vn)o=p.mode();else if(p instanceof ei){var g=p.flags();4&g&&(s=p.access()),2&g&&(c=p.modify()),1&g&&(l=p.creation())}}return o&=365,new y(e.isDirectory(this._data)?d.DIRECTORY:d.FILE,i,o,s,c,l)},e}(K);ai.Name="IsoFS",ai.Options={data:{type:"object",description:"The ISO file in a buffer",validator:q}},[tt,Ne,Fe,Me,We,nr,lr,ai,pr,yr,jr,Qr,cn,kn].forEach((function(t){var e=t.Create;t.Create=function(r,n){var i="function"==typeof r,o=i?r:n,a=i?{}:r;W(t,a,(function(r){r?o(r):e.call(t,a,o)}))}}));var si,ui={AsyncMirror:tt,Dropbox:Ne,Emscripten:Fe,FolderAdapter:Me,HTML5FS:We,InMemory:nr,IndexedDB:lr,IsoFS:ai,LocalStorage:pr,MountableFileSystem:yr,OverlayFS:jr,WorkerFS:Qr,XmlHttpRequest:cn,ZipFS:kn};function ci(t){switch(t){case"fs":return k;case"path":return u;case"buffer":return s;case"process":return o;case"bfs_utils":return H;default:return ui[t]}}function li(t){return k.initialize(t)}function fi(t,e){var r=t.fs;if(!r)return e(new f(a.EPERM,'Missing "fs" property on configuration object.'));var n=t.options,i=0,o=!1;function s(){if(!o){o=!0;var t=ui[r];t?t.Create(n,e):e(new f(a.EPERM,"File system "+r+" is not available in BrowserFS."))}}if(null!==n&&"object"==typeof n){var u=!1;Object.keys(n).filter((function(t){return"fs"!==t})).forEach((function(t){var r=n[t];null!==r&&"object"==typeof r&&r.fs&&(i++,fi(r,(function(r,a){if(i--,r){if(o)return;o=!0,e(r)}else n[t]=a,0===i&&u&&s()})))})),u=!0}0===i&&s()}o.initializeTTYs&&o.initializeTTYs(),"b"!=="ab".substr(-1)&&(String.prototype.substr=(si=String.prototype.substr,function(t,e){return t<0&&(t=this.length+t),si.call(this,t,e)})),"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array&&(Uint8Array.prototype.slice||(Uint8Array.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.length),t<0&&(t=this.length+t)<0&&(t=0),e<0&&(e=this.length+e)<0&&(e=0),e<t&&(e=t),new Uint8Array(this.buffer,this.byteOffset+t,e-t)})),e.install=function(e){e.Buffer=t,e.process=o;var r=e.require?e.require:null;e.require=function(t){return ci(t)||r.apply(null,Array.prototype.slice.call(arguments,0))}},e.registerFileSystem=function(t,e){ui[t]=e},e.BFSRequire=ci,e.initialize=li,e.configure=function(t,e){fi(t,(function(t,r){r?(li(r),e()):e(t)}))},e.getFileSystem=fi,e.EmscriptenFS=V,e.FileSystem=ui,e.Errors=h,e.setImmediate=Ar}).call(e,r(1),function(){return this}(),r(5)(t),r(6))},function(t,e,r){t.exports=r(2).Buffer},function(t,e,r){(function(t){"use strict";var n=r(3),i=r(4);e.Buffer=t,e.SlowBuffer=function(e){return+e!=e&&(e=0),t.alloc(+e)},e.INSPECT_MAX_BYTES=50;var o=2147483647;function a(e){if(e>o)throw new RangeError("Invalid typed array length");var r=new Uint8Array(e);return r.__proto__=t.prototype,r}function t(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return c(t)}return s(t,e,r)}function s(e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return U(e)?function(e,r,n){if(r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");var i;return(i=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n)).__proto__=t.prototype,i}(e,r,n):"string"==typeof e?function(e,r){if("string"==typeof r&&""!==r||(r="utf8"),!t.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|h(e,r),i=a(n),o=i.write(e,r);return o!==n&&(i=i.slice(0,o)),i}(e,r):function(e){if(t.isBuffer(e)){var r=0|f(e.length),n=a(r);return 0===n.length||e.copy(n,0,0,r),n}if(e){if(B(e)||"length"in e)return"number"!=typeof e.length||z(e.length)?a(0):l(e);if("Buffer"===e.type&&Array.isArray(e.data))return l(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t){return u(t),a(t<0?0:0|f(t))}function l(t){for(var e=t.length<0?0:0|f(t.length),r=a(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function f(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function h(e,r){if(t.isBuffer(e))return e.length;if(B(e)||U(e))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var i=!1;;)switch(r){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return M(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return j(e).length;default:if(i)return M(e).length;r=(""+r).toLowerCase(),i=!0}}function d(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,r);case"utf8":case"utf-8":return R(this,e,r);case"ascii":return O(this,e,r);case"latin1":case"binary":return T(this,e,r);case"base64":return S(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function p(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(e,r,n,i,o){if(0===e.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),z(n=+n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof r&&(r=t.from(r,i)),t.isBuffer(r))return 0===r.length?-1:g(e,r,n,i,o);if("number"==typeof r)return r&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,r,n):Uint8Array.prototype.lastIndexOf.call(e,r,n):g(e,[r],n,i,o);throw new TypeError("val must be string, number or Buffer")}function g(t,e,r,n,i){var o,a=1,s=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var l=-1;for(o=r;o<s;o++)if(c(t,o)===c(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*a}else-1!==l&&(o-=o-l),l=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var f=!0,h=0;h<u;h++)if(c(t,o+h)!==c(e,h)){f=!1;break}if(f)return o}return-1}function _(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(e.substr(2*a,2),16);if(z(s))return a;t[r+a]=s}return a}function b(t,e,r,n){return C(M(e,t.length-r),t,r,n)}function m(t,e,r,n){return C(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function v(t,e,r,n){return m(t,e,r,n)}function w(t,e,r,n){return C(j(e),t,r,n)}function E(t,e,r,n){return C(function(t,e){for(var r,n,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=(r=t.charCodeAt(a))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function S(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function R(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,a,s,u,c=t[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=r)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&c)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=f}return function(t){var e=t.length;if(e<=k)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=k));return r}(n)}e.kMaxLength=o,t.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(t){return!1}}(),t.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),"undefined"!=typeof Symbol&&Symbol.species&&t[Symbol.species]===t&&Object.defineProperty(t,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),t.poolSize=8192,t.from=function(t,e,r){return s(t,e,r)},t.prototype.__proto__=Uint8Array.prototype,t.__proto__=Uint8Array,t.alloc=function(t,e,r){return function(t,e,r){return u(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},t.allocUnsafe=function(t){return c(t)},t.allocUnsafeSlow=function(t){return c(t)},t.isBuffer=function(t){return null!=t&&!0===t._isBuffer},t.compare=function(e,r){if(!t.isBuffer(e)||!t.isBuffer(r))throw new TypeError("Arguments must be Buffers");if(e===r)return 0;for(var n=e.length,i=r.length,o=0,a=Math.min(n,i);o<a;++o)if(e[o]!==r[o]){n=e[o],i=r[o];break}return n<i?-1:i<n?1:0},t.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},t.concat=function(e,r){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return t.alloc(0);var n;if(void 0===r)for(r=0,n=0;n<e.length;++n)r+=e[n].length;var i=t.allocUnsafe(r),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!t.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,o),o+=a.length}return i},t.byteLength=h,t.prototype._isBuffer=!0,t.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)p(this,e,e+1);return this},t.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)p(this,e,e+3),p(this,e+1,e+2);return this},t.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)p(this,e,e+7),p(this,e+1,e+6),p(this,e+2,e+5),p(this,e+3,e+4);return this},t.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?R(this,0,t):d.apply(this,arguments)},t.prototype.equals=function(e){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===t.compare(this,e)},t.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},t.prototype.compare=function(e,r,n,i,o){if(!t.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),r<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&r>=n)return 0;if(i>=o)return-1;if(r>=n)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(i>>>=0),s=(n>>>=0)-(r>>>=0),u=Math.min(a,s),c=this.slice(i,o),l=e.slice(r,n),f=0;f<u;++f)if(c[f]!==l[f]){a=c[f],s=l[f];break}return a<s?-1:s<a?1:0},t.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},t.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},t.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},t.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return _(this,t,e,r);case"utf8":case"utf-8":return b(this,t,e,r);case"ascii":return m(this,t,e,r);case"latin1":case"binary":return v(this,t,e,r);case"base64":return w(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},t.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function O(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function A(t,e,r){var n,i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var o="",a=e;a<r;++a)o+=(n=t[a])<16?"0"+n.toString(16):n.toString(16);return o}function I(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function L(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function x(e,r,n,i,o,a){if(!t.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>o||r<a)throw new RangeError('"value" argument is out of bounds');if(n+i>e.length)throw new RangeError("Index out of range")}function N(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function P(t,e,r,n,o){return e=+e,r>>>=0,o||N(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,o){return e=+e,r>>>=0,o||N(t,0,r,8),i.write(t,e,r,n,52,8),r+8}t.prototype.slice=function(e,r){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(r=void 0===r?n:~~r)<0?(r+=n)<0&&(r=0):r>n&&(r=n),r<e&&(r=e);var i=this.subarray(e,r);return i.__proto__=t.prototype,i},t.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||L(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},t.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||L(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},t.prototype.readUInt8=function(t,e){return t>>>=0,e||L(t,1,this.length),this[t]},t.prototype.readUInt16LE=function(t,e){return t>>>=0,e||L(t,2,this.length),this[t]|this[t+1]<<8},t.prototype.readUInt16BE=function(t,e){return t>>>=0,e||L(t,2,this.length),this[t]<<8|this[t+1]},t.prototype.readUInt32LE=function(t,e){return t>>>=0,e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},t.prototype.readUInt32BE=function(t,e){return t>>>=0,e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},t.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||L(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},t.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||L(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},t.prototype.readInt8=function(t,e){return t>>>=0,e||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},t.prototype.readInt16LE=function(t,e){t>>>=0,e||L(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},t.prototype.readInt16BE=function(t,e){t>>>=0,e||L(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},t.prototype.readInt32LE=function(t,e){return t>>>=0,e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},t.prototype.readInt32BE=function(t,e){return t>>>=0,e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},t.prototype.readFloatLE=function(t,e){return t>>>=0,e||L(t,4,this.length),i.read(this,t,!0,23,4)},t.prototype.readFloatBE=function(t,e){return t>>>=0,e||L(t,4,this.length),i.read(this,t,!1,23,4)},t.prototype.readDoubleLE=function(t,e){return t>>>=0,e||L(t,8,this.length),i.read(this,t,!0,52,8)},t.prototype.readDoubleBE=function(t,e){return t>>>=0,e||L(t,8,this.length),i.read(this,t,!1,52,8)},t.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||x(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},t.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||x(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},t.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,1,255,0),this[e]=255&t,e+1},t.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},t.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},t.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},t.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},t.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);x(this,t,e,r,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<r&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},t.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);x(this,t,e,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},t.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},t.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},t.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},t.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},t.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||x(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},t.prototype.writeFloatLE=function(t,e,r){return P(this,t,e,!0,r)},t.prototype.writeFloatBE=function(t,e,r){return P(this,t,e,!1,r)},t.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},t.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},t.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},t.prototype.fill=function(e,r,n,i){if("string"==typeof e){if("string"==typeof r?(i=r,r=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!t.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;var a;if(r>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=r;a<n;++a)this[a]=e;else{var s=t.isBuffer(e)?e:new t(e,i),u=s.length;for(a=0;a<n-r;++a)this[a+r]=s[a%u]}return this};var F=/[^+/0-9A-Za-z-_]/g;function M(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function j(t){return n.toByteArray(function(t){if((t=t.trim().replace(F,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function C(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function U(t){return t instanceof ArrayBuffer||null!=t&&null!=t.constructor&&"ArrayBuffer"===t.constructor.name&&"number"==typeof t.byteLength}function B(t){return"function"==typeof ArrayBuffer.isView&&ArrayBuffer.isView(t)}function z(t){return t!=t}}).call(e,r(1))},function(t,e){"use strict";e.byteLength=function(t){return 3*t.length/4-u(t)},e.toByteArray=function(t){var e,r,o,a,s,c,l=t.length;s=u(t),c=new i(3*l/4-s),o=s>0?l-4:l;var f=0;for(e=0,r=0;e<o;e+=4,r+=3)a=n[t.charCodeAt(e)]<<18|n[t.charCodeAt(e+1)]<<12|n[t.charCodeAt(e+2)]<<6|n[t.charCodeAt(e+3)],c[f++]=a>>16&255,c[f++]=a>>8&255,c[f++]=255&a;return 2===s?(a=n[t.charCodeAt(e)]<<2|n[t.charCodeAt(e+1)]>>4,c[f++]=255&a):1===s&&(a=n[t.charCodeAt(e)]<<10|n[t.charCodeAt(e+1)]<<4|n[t.charCodeAt(e+2)]>>2,c[f++]=a>>8&255,c[f++]=255&a),c},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o="",a=[],s=16383,u=0,l=n-i;u<l;u+=s)a.push(c(t,u,u+s>l?l:u+s));return 1===i?(e=t[n-1],o+=r[e>>2],o+=r[e<<4&63],o+="=="):2===i&&(e=(t[n-2]<<8)+t[n-1],o+=r[e>>10],o+=r[e>>4&63],o+=r[e<<2&63],o+="="),a.push(o),a.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=o.length;a<s;++a)r[a]=o[a],n[o.charCodeAt(a)]=a;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");return"="===t[e-2]?2:"="===t[e-1]?1:0}function c(t,e,n){for(var i,o,a=[],s=e;s<n;s+=3)i=(t[s]<<16)+(t[s+1]<<8)+t[s+2],a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,c=u>>1,l=-7,f=r?i-1:0,h=r?-1:1,d=t[e+f];for(f+=h,o=d&(1<<-l)-1,d>>=-l,l+=s;l>0;o=256*o+t[e+f],f+=h,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=n;l>0;a=256*a+t[e+f],f+=h,l-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),o-=c}return(d?-1:1)*a*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var a,s,u,c=8*o-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=l?(s=0,a=l):a+f>=1?(s=(e*u-1)*Math.pow(2,i),a+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;t[r+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;t[r+d]=255&a,d+=p,a/=256,c-=8);t[r+d-p]|=128*y}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e,r){"use strict";var n=new(r(7)),i={};function o(t){i[t]||("function"==typeof n[t]?i[t]=function(){return n[t].apply(n,arguments)}:i[t]=n[t])}for(var a in n)o(a);i.initializeTTYs=function(){null===n.stdin&&(n.initializeTTYs(),i.stdin=n.stdin,i.stdout=n.stdout,i.stderr=n.stderr)},n.nextTick((function(){i.initializeTTYs()})),t.exports=i},function(t,e,r){(function(e){"use strict";var n=this&&this.__extends||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);function n(){this.constructor=t}t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=r(8),o=null,a=function(){function t(t,e){this.fun=t,this.array=e}return t.prototype.run=function(){this.fun.apply(null,this.array)},t}(),s=function(){function t(){this._queue=[],this._draining=!1,this._currentQueue=null,this._queueIndex=-1}return t.prototype.push=function(t){var e=this;1!==this._queue.push(t)||this._draining||setTimeout((function(){return e._drainQueue()}),0)},t.prototype._cleanUpNextTick=function(){this._draining=!1,this._currentQueue&&this._currentQueue.length?this._queue=this._currentQueue.concat(this._queue):this._queueIndex=-1,this._queue.length&&this._drainQueue()},t.prototype._drainQueue=function(){var t=this;if(!this._draining){var e=setTimeout((function(){return t._cleanUpNextTick()}));this._draining=!0;for(var r=this._queue.length;r;){for(this._currentQueue=this._queue,this._queue=[];++this._queueIndex<r;)this._currentQueue&&this._currentQueue[this._queueIndex].run();this._queueIndex=-1,r=this._queue.length}this._currentQueue=null,this._draining=!1,clearTimeout(e)}},t}(),u=function(t){function i(){t.apply(this,arguments),this.startTime=Date.now(),this._cwd="/",this.platform="browser",this.argv=[],this.execArgv=[],this.stdout=null,this.stderr=null,this.stdin=null,this.domain=null,this._queue=new s,this.execPath=e,this.env={},this.exitCode=0,this._gid=1,this._uid=1,this.version="v5.0",this.versions={http_parser:"0.0",node:"5.0",v8:"0.0",uv:"0.0",zlib:"0.0",ares:"0.0",icu:"0.0",modules:"0",openssl:"0.0"},this.config={target_defaults:{cflags:[],default_configuration:"Release",defines:[],include_dirs:[],libraries:[]},variables:{clang:0,host_arch:"x32",node_install_npm:!1,node_install_waf:!1,node_prefix:"",node_shared_cares:!1,node_shared_http_parser:!1,node_shared_libuv:!1,node_shared_zlib:!1,node_shared_v8:!1,node_use_dtrace:!1,node_use_etw:!1,node_use_openssl:!1,node_shared_openssl:!1,strict_aliasing:!1,target_arch:"x32",v8_use_snapshot:!1,v8_no_strict_aliasing:0,visibility:""}},this.pid=1e3*Math.random()|0,this.title="node",this.arch="x32",this._mask=18,this.connected=void 0}return n(i,t),i.prototype.chdir=function(t){null===o&&(o=r(9)),this._cwd=o.resolve(t)},i.prototype.cwd=function(){return this._cwd},i.prototype.uptime=function(){return(Date.now()-this.startTime)/1e3|0},i.prototype.nextTick=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];this._queue.push(new a(t,e))},i.prototype.abort=function(){this.emit("abort")},i.prototype.exit=function(t){this.exitCode=t,this.emit("exit",[t])},i.prototype.getgid=function(){return this._gid},i.prototype.setgid=function(t){this._gid="number"==typeof t?t:1},i.prototype.getuid=function(){return this._uid},i.prototype.setuid=function(t){this._uid="number"==typeof t?t:1},i.prototype.kill=function(t,e){this.emit("kill",[t,e])},i.prototype.memoryUsage=function(){return{rss:0,heapTotal:0,heapUsed:0}},i.prototype.umask=function(t){void 0===t&&(t=this._mask);var e=this._mask;return this._mask=t,this.emit("umask",[t]),e},i.prototype.hrtime=function(){var t,e=(t="undefined"!=typeof performance?performance.now():Date.now?Date.now():(new Date).getTime())/1e3|0;return[e,t=1e6*(t-=1e3*e)|0]},i.prototype.initializeTTYs=function(){if(null===this.stdout){var t=r(10);this.stdout=new t,this.stderr=new t,this.stdin=new t}},i.prototype.disconnect=function(){},i}(i.EventEmitter);t.exports=u}).call(e,"/")},function(t,e){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},r.prototype.emit=function(t){var e,r,a,s,u,c;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var l=new Error('Uncaught, unspecified "error" event. ('+e+")");throw l.context=e,l}if(o(r=this._events[t]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),a=(c=r.slice()).length,u=0;u<a;u++)c[u].apply(this,s);return!0},r.prototype.addListener=function(t,e){var a;if(!n(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,n(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(a=o(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[t].length>a&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(t,e){if(!n(e))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(t,i),r||(r=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},r.prototype.removeListener=function(t,e){var r,o,a,s;if(!n(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(a=(r=this._events[t]).length,o=-1,r===e||n(r.listener)&&r.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(r)){for(s=a;s-- >0;)if(r[s]===e||r[s].listener&&r[s].listener===e){o=s;break}if(o<0)return this;1===r.length?(r.length=0,delete this._events[t]):r.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},r.prototype.removeAllListeners=function(t){var e,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[t]))this.removeListener(t,r);else if(r)for(;r.length;)this.removeListener(t,r[r.length-1]);return delete this._events[t],this},r.prototype.listeners=function(t){return this._events&&this._events[t]?n(this._events[t])?[this._events[t]]:this._events[t].slice():[]},r.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(n(e))return 1;if(e)return e.length}return 0},r.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,r){(function(e){"use strict";var r=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,n=function(){function t(){}return t.normalize=function(e){""===e&&(e=".");for(var r=e.charAt(0)===t.sep,n=(e=t._removeDuplicateSeps(e)).split(t.sep),i=[],o=0;o<n.length;o++){var a=n[o];"."!==a&&(".."===a&&(r||!r&&i.length>0&&".."!==i[0])?i.pop():i.push(a))}return!r&&i.length<2&&(1===i.length?""===i[0]&&i.unshift("."):i.push(".")),e=i.join(t.sep),r&&e.charAt(0)!==t.sep&&(e=t.sep+e),e},t.join=function(){for(var e=[],r=0;r<arguments.length;r++)e[r-0]=arguments[r];for(var n=[],i=0;i<e.length;i++){var o=e[i];if("string"!=typeof o)throw new TypeError("Invalid argument type to path.join: "+typeof o);""!==o&&n.push(o)}return t.normalize(n.join(t.sep))},t.resolve=function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];for(var i=[],o=0;o<r.length;o++){var a=r[o];if("string"!=typeof a)throw new TypeError("Invalid argument type to path.join: "+typeof a);""!==a&&(a.charAt(0)===t.sep&&(i=[]),i.push(a))}var s=t.normalize(i.join(t.sep));if(s.length>1&&s.charAt(s.length-1)===t.sep)return s.substr(0,s.length-1);if(s.charAt(0)!==t.sep){"."!==s.charAt(0)||1!==s.length&&s.charAt(1)!==t.sep||(s=1===s.length?"":s.substr(2));var u=e.cwd();s=""!==s?this.normalize(u+("/"!==u?t.sep:"")+s):u}return s},t.relative=function(e,r){var n;e=t.resolve(e),r=t.resolve(r);var i=e.split(t.sep),o=r.split(t.sep);o.shift(),i.shift();var a=0,s=[];for(n=0;n<i.length;n++)if(i[n]!==o[n]){a=i.length-n;break}s=o.slice(n),1===i.length&&""===i[0]&&(a=0),a>i.length&&(a=i.length);var u="";for(n=0;n<a;n++)u+="../";return(u+=s.join(t.sep)).length>1&&u.charAt(u.length-1)===t.sep&&(u=u.substr(0,u.length-1)),u},t.dirname=function(e){var r=(e=t._removeDuplicateSeps(e)).charAt(0)===t.sep,n=e.split(t.sep);return""===n.pop()&&n.length>0&&n.pop(),n.length>1||1===n.length&&!r?n.join(t.sep):r?t.sep:"."},t.basename=function(e,r){if(void 0===r&&(r=""),""===e)return e;var n=(e=t.normalize(e)).split(t.sep),i=n[n.length-1];return""===i&&n.length>1?n[n.length-2]:r.length>0&&i.substr(i.length-r.length)===r?i.substr(0,i.length-r.length):i},t.extname=function(e){var r=(e=t.normalize(e)).split(t.sep);if(""===(e=r.pop())&&r.length>0&&(e=r.pop()),".."===e)return"";var n=e.lastIndexOf(".");return-1===n||0===n?"":e.substr(n)},t.isAbsolute=function(e){return e.length>0&&e.charAt(0)===t.sep},t._makeLong=function(t){return t},t.parse=function(t){var e,n,i=(e=t,(n=r.exec(e)).shift(),n);return{root:i[0],dir:i[0]+i[1].slice(0,-1),base:i[2],ext:i[3],name:i[2].slice(0,i[2].length-i[3].length)}},t.format=function(e){if(null===e||"object"!=typeof e)throw new TypeError("Parameter 'pathObject' must be an object, not "+typeof e);if("string"!=typeof(e.root||""))throw new TypeError("'pathObject.root' must be a string or undefined, not "+typeof e.root);return(e.dir?e.dir+t.sep:"")+(e.base||"")},t._removeDuplicateSeps=function(t){return t.replace(this._replaceRegex,this.sep)},t.sep="/",t._replaceRegex=new RegExp("//+","g"),t.delimiter=":",t.posix=t,t.win32=t,t}();t.exports=n}).call(e,r(6))},function(t,e,r){(function(e){"use strict";var n=this&&this.__extends||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);function n(){this.constructor=t}t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},i=function(t){function r(){t.call(this),this.isRaw=!1,this.columns=80,this.rows=120,this.isTTY=!0,this._bufferedWrites=[],this._waitingForWrites=!1}return n(r,t),r.prototype.setRawMode=function(t){this.isRaw!==t&&(this.isRaw=t,this.emit("modeChange"))},r.prototype.changeColumns=function(t){t!==this.columns&&(this.columns=t,this.emit("resize"))},r.prototype.changeRows=function(t){t!==this.rows&&(this.rows=t,this.emit("resize"))},r.isatty=function(t){return t&&t instanceof r},r.prototype._write=function(t,r,n){var i;try{var o;o="string"==typeof t?new e(t,r):t,this._bufferedWrites.push(o),this._waitingForWrites&&this._read(1024)}catch(t){i=t}finally{n(i)}},r.prototype._read=function(t){if(0===this._bufferedWrites.length)this._waitingForWrites=!0;else for(;this._bufferedWrites.length>0&&(this._waitingForWrites=this.push(this._bufferedWrites.shift()),this._waitingForWrites););},r}(r(11).Duplex);t.exports=i}).call(e,r(1))},function(t,e,r){t.exports=i;var n=r(8).EventEmitter;function i(){n.call(this)}r(12)(i,n),i.Readable=r(13),i.Writable=r(27),i.Duplex=r(28),i.Transform=r(29),i.PassThrough=r(30),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",s),r.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(l(),0===n.listenerCount(this,"error"))throw t}function l(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",u),r.removeListener("error",c),t.removeListener("error",c),r.removeListener("end",l),r.removeListener("close",l),t.removeListener("close",l)}return r.on("error",c),t.on("error",c),r.on("end",l),r.on("close",l),t.on("close",l),t.emit("pipe",r),t}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){(function(n){var i=function(){try{return r(11)}catch(t){}}();(e=t.exports=r(14)).Stream=i||e,e.Readable=e,e.Writable=r(22),e.Duplex=r(21),e.Transform=r(25),e.PassThrough=r(26),!n.browser&&"disable"===n.env.READABLE_STREAM&&i&&(t.exports=i)}).call(e,r(6))},function(t,e,r){(function(e){"use strict";t.exports=g;var n,i=r(15),o=r(16);g.ReadableState=y,r(8).EventEmitter;var a,s=function(t,e){return t.listeners(e).length};!function(){try{a=r(11)}catch(t){}finally{a||(a=r(8).EventEmitter)}}();var u=r(2).Buffer,c=r(17),l=r(18);l.inherits=r(12);var f=r(19),h=void 0;h=f&&f.debuglog?f.debuglog("stream"):function(){};var d,p=r(20);function y(t,e){n=n||r(21),t=t||{},this.objectMode=!!t.objectMode,e instanceof n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:o,this.highWaterMark=~~this.highWaterMark,this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=r(24).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function g(t){if(n=n||r(21),!(this instanceof g))return new g(t);this._readableState=new y(t,this),this.readable=!0,t&&"function"==typeof t.read&&(this._read=t.read),a.call(this)}function _(t,e,r,n,o){var a=function(t,e){var r=null;return u.isBuffer(e)||"string"==typeof e||null==e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(e,r);if(a)t.emit("error",a);else if(null===r)e.reading=!1,function(t,e){if(!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,v(t)}}(t,e);else if(e.objectMode||r&&r.length>0)if(e.ended&&!o){var s=new Error("stream.push() after EOF");t.emit("error",s)}else if(e.endEmitted&&o){var c=new Error("stream.unshift() after end event");t.emit("error",c)}else{var l;!e.decoder||o||n||(r=e.decoder.write(r),l=!e.objectMode&&0===r.length),o||(e.reading=!1),l||(e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,o?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&v(t))),function(t,e){e.readingMore||(e.readingMore=!0,i(E,t,e))}(t,e)}else o||(e.reading=!1);return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(e)}l.inherits(g,a),g.prototype.push=function(t,e){var r=this._readableState;return r.objectMode||"string"!=typeof t||(e=e||r.defaultEncoding)!==r.encoding&&(t=c.from(t,e),e=""),_(this,r,t,e,!1)},g.prototype.unshift=function(t){return _(this,this._readableState,t,"",!0)},g.prototype.isPaused=function(){return!1===this._readableState.flowing},g.prototype.setEncoding=function(t){return d||(d=r(24).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var b=8388608;function m(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=b?t=b:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function v(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(h("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i(w,t):w(t))}function w(t){h("emit readable"),t.emit("readable"),k(t)}function E(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(h("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function S(t){h("readable nexttick read 0"),t.read(0)}function R(t,e){e.reading||(h("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),k(t),e.flowing&&!e.reading&&t.read(0)}function k(t){var e=t._readableState;for(h("flow",e.flowing);e.flowing&&null!==t.read(););}function O(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;return t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;for(t-=i.length;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0==(t-=a)){a===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=c.allocUnsafe(t),n=e.head,i=1;for(n.data.copy(r),t-=n.data.length;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,a),0==(t-=a)){a===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++i}return e.length-=i,r}(t,e),n}(t,e.buffer,e.decoder),r);var r}function T(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i(A,e,t))}function A(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function I(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}g.prototype.read=function(t){h("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return h("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?T(this):v(this),null;if(0===(t=m(t,e))&&e.ended)return 0===e.length&&T(this),null;var n,i=e.needReadable;return h("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&h("length less than watermark",i=!0),e.ended||e.reading?h("reading or ended",i=!1):i&&(h("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=m(r,e))),null===(n=t>0?O(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&T(this)),null!==n&&this.emit("data",n),n},g.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},g.prototype.pipe=function(t,r){var n=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=t;break;case 1:a.pipes=[a.pipes,t];break;default:a.pipes.push(t)}a.pipesCount+=1,h("pipe count=%d opts=%j",a.pipesCount,r);var u=r&&!1===r.end||t===e.stdout||t===e.stderr?p:l;function c(t){h("onunpipe"),t===n&&p()}function l(){h("onend"),t.end()}a.endEmitted?i(u):n.once("end",u),t.on("unpipe",c);var f=function(t){return function(){var e=t._readableState;h("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,k(t))}}(n);t.on("drain",f);var d=!1;function p(){h("cleanup"),t.removeListener("close",b),t.removeListener("finish",m),t.removeListener("drain",f),t.removeListener("error",_),t.removeListener("unpipe",c),n.removeListener("end",l),n.removeListener("end",p),n.removeListener("data",g),d=!0,!a.awaitDrain||t._writableState&&!t._writableState.needDrain||f()}var y=!1;function g(e){h("ondata"),y=!1,!1!==t.write(e)||y||((1===a.pipesCount&&a.pipes===t||a.pipesCount>1&&-1!==I(a.pipes,t))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,y=!0),n.pause())}function _(e){h("onerror",e),v(),t.removeListener("error",_),0===s(t,"error")&&t.emit("error",e)}function b(){t.removeListener("finish",m),v()}function m(){h("onfinish"),t.removeListener("close",b),v()}function v(){h("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?o(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",_),t.once("close",b),t.once("finish",m),t.emit("pipe",n),a.flowing||(h("pipe resume"),n.resume()),t},g.prototype.unpipe=function(t){var e=this._readableState;if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var i=0;i<n;i++)r[i].emit("unpipe",this);return this}var o=I(e.pipes,t);return-1===o||(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this)),this},g.prototype.on=function(t,e){var r=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&v(this):i(S,this))}return r},g.prototype.addListener=g.prototype.on,g.prototype.resume=function(){var t=this._readableState;return t.flowing||(h("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i(R,t,e))}(this,t)),this},g.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},g.prototype.wrap=function(t){var e=this._readableState,r=!1,n=this;for(var i in t.on("end",(function(){if(h("wrapped end"),e.decoder&&!e.ended){var t=e.decoder.end();t&&t.length&&n.push(t)}n.push(null)})),t.on("data",(function(i){h("wrapped data"),e.decoder&&(i=e.decoder.write(i)),e.objectMode&&null==i||(e.objectMode||i&&i.length)&&(n.push(i)||(r=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));return function(e,r){for(var i=0,o=e.length;i<o;i++)a=e[i],t.on(a,n.emit.bind(n,a));var a}(["error","close","destroy","pause","resume"]),n._read=function(e){h("wrapped _read",e),r&&(r=!1,t.resume())},n},g._fromList=O}).call(e,r(6))},function(t,e,r){(function(e){"use strict";!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports=function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r)}));case 3:return e.nextTick((function(){t.call(null,r,n)}));case 4:return e.nextTick((function(){t.call(null,r,n,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o)}))}}:t.exports=e.nextTick}).call(e,r(6))},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){(function(t){"use strict";var n=r(2),i=n.Buffer,o=n.SlowBuffer,a=n.kMaxLength||2147483647;e.alloc=function(t,e,r){if("function"==typeof i.alloc)return i.alloc(t,e,r);if("number"==typeof r)throw new TypeError("encoding must not be number");if("number"!=typeof t)throw new TypeError("size must be a number");if(t>a)throw new RangeError("size is too large");var n=r,o=e;void 0===o&&(n=void 0,o=0);var s=new i(t);if("string"==typeof o)for(var u=new i(o,n),c=u.length,l=-1;++l<t;)s[l]=u[l%c];else s.fill(o);return s},e.allocUnsafe=function(t){if("function"==typeof i.allocUnsafe)return i.allocUnsafe(t);if("number"!=typeof t)throw new TypeError("size must be a number");if(t>a)throw new RangeError("size is too large");return new i(t)},e.from=function(e,r,n){if("function"==typeof i.from&&(!t.Uint8Array||Uint8Array.from!==i.from))return i.from(e,r,n);if("number"==typeof e)throw new TypeError('"value" argument must not be a number');if("string"==typeof e)return new i(e,r);if("undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer){var o=r;if(1===arguments.length)return new i(e);void 0===o&&(o=0);var a=n;if(void 0===a&&(a=e.byteLength-o),o>=e.byteLength)throw new RangeError("'offset' is out of bounds");if(a>e.byteLength-o)throw new RangeError("'length' is out of bounds");return new i(e.slice(o,o+a))}if(i.isBuffer(e)){var s=new i(e.length);return e.copy(s,0,0,e.length),s}if(e){if(Array.isArray(e)||"undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return new i(e);if("Buffer"===e.type&&Array.isArray(e.data))return new i(e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")},e.allocUnsafeSlow=function(t){if("function"==typeof i.allocUnsafeSlow)return i.allocUnsafeSlow(t);if("number"!=typeof t)throw new TypeError("size must be a number");if(t>=a)throw new RangeError("size is too large");return new o(t)}}).call(e,function(){return this}())},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(e,r(1))},function(t,e){},function(t,e,r){"use strict";r(2).Buffer;var n=r(17);function i(){this.head=null,this.tail=null,this.length=0}t.exports=i,i.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},i.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},i.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},i.prototype.clear=function(){this.head=this.tail=null,this.length=0},i.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},i.prototype.concat=function(t){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var e=n.allocUnsafe(t>>>0),r=this.head,i=0;r;)r.data.copy(e,i),i+=r.data.length,r=r.next;return e}},function(t,e,r){"use strict";var n=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=f;var i=r(15),o=r(18);o.inherits=r(12);var a=r(14),s=r(22);o.inherits(f,a);for(var u=n(s.prototype),c=0;c<u.length;c++){var l=u[c];f.prototype[l]||(f.prototype[l]=s.prototype[l])}function f(t){if(!(this instanceof f))return new f(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||i(d,this)}function d(t){t.end()}},function(t,e,r){(function(e){"use strict";t.exports=y;var n,i=r(15),o=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?setImmediate:i;y.WritableState=p;var a=r(18);a.inherits=r(12);var s,u={deprecate:r(23)};!function(){try{s=r(11)}catch(t){}finally{s||(s=r(8).EventEmitter)}}();var c,l=r(2).Buffer,f=r(17);function h(){}function d(t,e,r){this.chunk=t,this.encoding=e,this.callback=r,this.next=null}function p(t,e){n=n||r(21),t=t||{},this.objectMode=!!t.objectMode,e instanceof n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var a=t.highWaterMark,s=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:s,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var u=!1===t.decodeStrings;this.decodeStrings=!u,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,a=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,o){--e.pendingcb,r?i(o,n):o(n),t._writableState.errorEmitted=!0,t.emit("error",n)}(t,r,n,e,a);else{var s=m(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||b(t,r),n?o(_,t,r,s,a):_(t,r,s,a)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new E(this)}function y(t){if(n=n||r(21),!(c.call(y,this)||this instanceof n))return new y(t);this._writableState=new p(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev)),s.call(this)}function g(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function _(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),w(t,e)}function b(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),o=e.corkedRequestsFree;o.entry=r;for(var a=0;r;)i[a]=r,r=r.next,a+=1;g(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new E(e)}else{for(;r;){var s=r.chunk,u=r.encoding,c=r.callback;if(g(t,e,!1,e.objectMode?1:s.length,s,u,c),r=r.next,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequestCount=0,e.bufferedRequest=r,e.bufferProcessing=!1}function m(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function v(t,e){e.prefinished||(e.prefinished=!0,t.emit("prefinish"))}function w(t,e){var r=m(e);return r&&(0===e.pendingcb?(v(t,e),e.finished=!0,t.emit("finish")):v(t,e)),r}function E(t){var e=this;this.next=null,this.entry=null,this.finish=function(r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}}a.inherits(y,s),p.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(p.prototype,"buffer",{get:u.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(c=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(t){return!!c.call(this,t)||t&&t._writableState instanceof p}})):c=function(t){return t instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(t,e,r){var n=this._writableState,o=!1,a=l.isBuffer(t);return"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=h),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),i(e,r)}(this,r):(a||function(t,e,r,n){var o=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),i(n,a),o=!1),o}(this,n,t,r))&&(n.pendingcb++,o=function(t,e,r,n,i,o){r||(n=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=f.from(e,r)),e}(e,n,i),l.isBuffer(n)&&(i="buffer"));var a=e.objectMode?1:n.length;e.length+=a;var s=e.length<e.highWaterMark;if(s||(e.needDrain=!0),e.writing||e.corked){var u=e.lastBufferedRequest;e.lastBufferedRequest=new d(n,i,o),u?u.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else g(t,e,!1,a,n,i,o);return s}(this,n,a,t,e,r)),o},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||b(this,t))},y.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},y.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,w(t,e),r&&(e.finished?i(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,n,r)}}).call(e,r(6))},function(t,e){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(e,function(){return this}())},function(t,e,r){var n=r(2).Buffer,i=n.isEncoding||function(t){switch(t&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}},o=e.StringDecoder=function(t){switch(this.encoding=(t||"utf8").toLowerCase().replace(/[-_]/,""),function(t){if(t&&!i(t))throw new Error("Unknown encoding: "+t)}(t),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=s;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=u;break;default:return void(this.write=a)}this.charBuffer=new n(6),this.charReceived=0,this.charLength=0};function a(t){return t.toString(this.encoding)}function s(t){this.charReceived=t.length%2,this.charLength=this.charReceived?2:0}function u(t){this.charReceived=t.length%3,this.charLength=this.charReceived?3:0}o.prototype.write=function(t){for(var e="";this.charLength;){var r=t.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:t.length;if(t.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";if(t=t.slice(r,t.length),!((n=(e=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(e.length-1))>=55296&&n<=56319)){if(this.charReceived=this.charLength=0,0===t.length)return e;break}this.charLength+=this.surrogateSize,e=""}this.detectIncompleteChar(t);var n,i=t.length;if(this.charLength&&(t.copy(this.charBuffer,0,t.length-this.charReceived,i),i-=this.charReceived),i=(e+=t.toString(this.encoding,0,i)).length-1,(n=e.charCodeAt(i))>=55296&&n<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),t.copy(this.charBuffer,0,0,o),e.substring(0,i)}return e},o.prototype.detectIncompleteChar=function(t){for(var e=t.length>=3?3:t.length;e>0;e--){var r=t[t.length-e];if(1==e&&r>>5==6){this.charLength=2;break}if(e<=2&&r>>4==14){this.charLength=3;break}if(e<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=e},o.prototype.end=function(t){var e="";if(t&&t.length&&(e=this.write(t)),this.charReceived){var r=this.charReceived,n=this.charBuffer,i=this.encoding;e+=n.slice(0,r).toString(i)}return e}},function(t,e,r){"use strict";t.exports=a;var n=r(21),i=r(18);function o(t){this.afterTransform=function(e,r){return function(t,e,r){var n=t._transformState;n.transforming=!1;var i=n.writecb;if(!i)return t.emit("error",new Error("no writecb in Transform class"));n.writechunk=null,n.writecb=null,null!=r&&t.push(r),i(e);var o=t._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&t._read(o.highWaterMark)}(t,e,r)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function a(t){if(!(this instanceof a))return new a(t);n.call(this,t),this._transformState=new o(this);var e=this;this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(t,r){s(e,t,r)})):s(e)}))}function s(t,e,r){if(e)return t.emit("error",e);null!=r&&t.push(r);var n=t._writableState,i=t._transformState;if(n.length)throw new Error("Calling transform done when ws.length != 0");if(i.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(12),i.inherits(a,n),a.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},a.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0}},function(t,e,r){"use strict";t.exports=o;var n=r(25),i=r(18);function o(t){if(!(this instanceof o))return new o(t);n.call(this,t)}i.inherits=r(12),i.inherits(o,n),o.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){t.exports=r(22)},function(t,e,r){t.exports=r(21)},function(t,e,r){t.exports=r(25)},function(t,e,r){t.exports=r(26)},function(t,e,r){"use strict";var n=r(32),i=r(33),o=r(38),a=r(39),s=r(40),u=r(41),c=r(42),l=Object.prototype.toString;function f(t){if(!(this instanceof f))return new f(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==a.Z_OK)throw new Error(s[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function h(t,e){var r=new f(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}f.prototype.push=function(t,e){var r,s,u,c,f,h,d=this.strm,p=this.options.chunkSize,y=this.options.dictionary,g=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?d.input=o.binstring2buf(t):"[object ArrayBuffer]"===l.call(t)?d.input=new Uint8Array(t):d.input=t,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new i.Buf8(p),d.next_out=0,d.avail_out=p),(r=n.inflate(d,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&y&&(h="string"==typeof y?o.string2buf(y):"[object ArrayBuffer]"===l.call(y)?new Uint8Array(y):y,r=n.inflateSetDictionary(this.strm,h)),r===a.Z_BUF_ERROR&&!0===g&&(r=a.Z_OK,g=!1),r!==a.Z_STREAM_END&&r!==a.Z_OK)return this.onEnd(r),this.ended=!0,!1;d.next_out&&(0!==d.avail_out&&r!==a.Z_STREAM_END&&(0!==d.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(d.output,d.next_out),c=d.next_out-u,f=o.buf2string(d.output,u),d.next_out=c,d.avail_out=p-c,c&&i.arraySet(d.output,d.output,u,c,0),this.onData(f)):this.onData(i.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(g=!0)}while((d.avail_in>0||0===d.avail_out)&&r!==a.Z_STREAM_END);return r===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),d.avail_out=0,!0)},f.prototype.onData=function(t){this.chunks.push(t)},f.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=f,e.inflate=h,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,h(t,e)},e.ungzip=h},function(t,e,r){"use strict";var n=r(33),i=r(34),o=r(35),a=r(36),s=r(37),u=1,c=2,l=0,f=-2,h=1,d=12,p=30,y=852,g=592;function _(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function b(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function m(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=h,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(y),e.distcode=e.distdyn=new n.Buf32(g),e.sane=1,e.back=-1,l):f}function v(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,m(t)):f}function w(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?f:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,v(t))):f}function E(t,e){var r,n;return t?(n=new b,t.state=n,n.window=null,(r=w(t,e))!==l&&(t.state=null),r):f}var S,R,k=!0;function O(t){if(k){var e;for(S=new n.Buf32(512),R=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(u,t.lens,0,288,S,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(c,t.lens,0,32,R,0,t.work,{bits:5}),k=!1}t.lencode=S,t.lenbits=9,t.distcode=R,t.distbits=5}function T(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=v,e.inflateReset2=w,e.inflateResetKeep=m,e.inflateInit=function(t){return E(t,15)},e.inflateInit2=E,e.inflate=function(t,e){var r,y,g,b,m,v,w,E,S,R,k,A,I,L,x,N,P,D,F,M,j,C,U,B,z=0,q=new n.Buf8(4),W=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return f;(r=t.state).mode===d&&(r.mode=13),m=t.next_out,g=t.output,w=t.avail_out,b=t.next_in,y=t.input,v=t.avail_in,E=r.hold,S=r.bits,R=v,k=w,C=l;t:for(;;)switch(r.mode){case h:if(0===r.wrap){r.mode=13;break}for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(2&r.wrap&&35615===E){r.check=0,q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0),E=0,S=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&E)<<8)+(E>>8))%31){t.msg="incorrect header check",r.mode=p;break}if(8!=(15&E)){t.msg="unknown compression method",r.mode=p;break}if(S-=4,j=8+(15&(E>>>=4)),0===r.wbits)r.wbits=j;else if(j>r.wbits){t.msg="invalid window size",r.mode=p;break}r.dmax=1<<j,t.adler=r.check=1,r.mode=512&E?10:d,E=0,S=0;break;case 2:for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(r.flags=E,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=p;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=p;break}r.head&&(r.head.text=E>>8&1),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0)),E=0,S=0,r.mode=3;case 3:for(;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.head&&(r.head.time=E),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,q[2]=E>>>16&255,q[3]=E>>>24&255,r.check=o(r.check,q,4,0)),E=0,S=0,r.mode=4;case 4:for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.head&&(r.head.xflags=255&E,r.head.os=E>>8),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0)),E=0,S=0,r.mode=5;case 5:if(1024&r.flags){for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.length=E,r.head&&(r.head.extra_len=E),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0)),E=0,S=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((A=r.length)>v&&(A=v),A&&(r.head&&(j=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,y,b,A,j)),512&r.flags&&(r.check=o(r.check,y,A,b)),v-=A,b+=A,r.length-=A),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===v)break t;A=0;do{j=y[b+A++],r.head&&j&&r.length<65536&&(r.head.name+=String.fromCharCode(j))}while(j&&A<v);if(512&r.flags&&(r.check=o(r.check,y,A,b)),v-=A,b+=A,j)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===v)break t;A=0;do{j=y[b+A++],r.head&&j&&r.length<65536&&(r.head.comment+=String.fromCharCode(j))}while(j&&A<v);if(512&r.flags&&(r.check=o(r.check,y,A,b)),v-=A,b+=A,j)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(E!==(65535&r.check)){t.msg="header crc mismatch",r.mode=p;break}E=0,S=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=d;break;case 10:for(;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}t.adler=r.check=_(E),E=0,S=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=m,t.avail_out=w,t.next_in=b,t.avail_in=v,r.hold=E,r.bits=S,2;t.adler=r.check=1,r.mode=d;case d:if(5===e||6===e)break t;case 13:if(r.last){E>>>=7&S,S-=7&S,r.mode=27;break}for(;S<3;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}switch(r.last=1&E,S-=1,3&(E>>>=1)){case 0:r.mode=14;break;case 1:if(O(r),r.mode=20,6===e){E>>>=2,S-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=p}E>>>=2,S-=2;break;case 14:for(E>>>=7&S,S-=7&S;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if((65535&E)!=(E>>>16^65535)){t.msg="invalid stored block lengths",r.mode=p;break}if(r.length=65535&E,E=0,S=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(A=r.length){if(A>v&&(A=v),A>w&&(A=w),0===A)break t;n.arraySet(g,y,b,A,m),v-=A,b+=A,w-=A,m+=A,r.length-=A;break}r.mode=d;break;case 17:for(;S<14;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(r.nlen=257+(31&E),E>>>=5,S-=5,r.ndist=1+(31&E),E>>>=5,S-=5,r.ncode=4+(15&E),E>>>=4,S-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=p;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;S<3;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.lens[W[r.have++]]=7&E,E>>>=3,S-=3}for(;r.have<19;)r.lens[W[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,U={bits:r.lenbits},C=s(0,r.lens,0,19,r.lencode,0,r.work,U),r.lenbits=U.bits,C){t.msg="invalid code lengths set",r.mode=p;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;N=(z=r.lencode[E&(1<<r.lenbits)-1])>>>16&255,P=65535&z,!((x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(P<16)E>>>=x,S-=x,r.lens[r.have++]=P;else{if(16===P){for(B=x+2;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(E>>>=x,S-=x,0===r.have){t.msg="invalid bit length repeat",r.mode=p;break}j=r.lens[r.have-1],A=3+(3&E),E>>>=2,S-=2}else if(17===P){for(B=x+3;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}S-=x,j=0,A=3+(7&(E>>>=x)),E>>>=3,S-=3}else{for(B=x+7;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}S-=x,j=0,A=11+(127&(E>>>=x)),E>>>=7,S-=7}if(r.have+A>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=p;break}for(;A--;)r.lens[r.have++]=j}}if(r.mode===p)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=p;break}if(r.lenbits=9,U={bits:r.lenbits},C=s(u,r.lens,0,r.nlen,r.lencode,0,r.work,U),r.lenbits=U.bits,C){t.msg="invalid literal/lengths set",r.mode=p;break}if(r.distbits=6,r.distcode=r.distdyn,U={bits:r.distbits},C=s(c,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,U),r.distbits=U.bits,C){t.msg="invalid distances set",r.mode=p;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(v>=6&&w>=258){t.next_out=m,t.avail_out=w,t.next_in=b,t.avail_in=v,r.hold=E,r.bits=S,a(t,k),m=t.next_out,g=t.output,w=t.avail_out,b=t.next_in,y=t.input,v=t.avail_in,E=r.hold,S=r.bits,r.mode===d&&(r.back=-1);break}for(r.back=0;N=(z=r.lencode[E&(1<<r.lenbits)-1])>>>16&255,P=65535&z,!((x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(N&&0==(240&N)){for(D=x,F=N,M=P;N=(z=r.lencode[M+((E&(1<<D+F)-1)>>D)])>>>16&255,P=65535&z,!(D+(x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}E>>>=D,S-=D,r.back+=D}if(E>>>=x,S-=x,r.back+=x,r.length=P,0===N){r.mode=26;break}if(32&N){r.back=-1,r.mode=d;break}if(64&N){t.msg="invalid literal/length code",r.mode=p;break}r.extra=15&N,r.mode=22;case 22:if(r.extra){for(B=r.extra;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.length+=E&(1<<r.extra)-1,E>>>=r.extra,S-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;N=(z=r.distcode[E&(1<<r.distbits)-1])>>>16&255,P=65535&z,!((x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(0==(240&N)){for(D=x,F=N,M=P;N=(z=r.distcode[M+((E&(1<<D+F)-1)>>D)])>>>16&255,P=65535&z,!(D+(x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}E>>>=D,S-=D,r.back+=D}if(E>>>=x,S-=x,r.back+=x,64&N){t.msg="invalid distance code",r.mode=p;break}r.offset=P,r.extra=15&N,r.mode=24;case 24:if(r.extra){for(B=r.extra;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.offset+=E&(1<<r.extra)-1,E>>>=r.extra,S-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=p;break}r.mode=25;case 25:if(0===w)break t;if(A=k-w,r.offset>A){if((A=r.offset-A)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=p;break}A>r.wnext?(A-=r.wnext,I=r.wsize-A):I=r.wnext-A,A>r.length&&(A=r.length),L=r.window}else L=g,I=m-r.offset,A=r.length;A>w&&(A=w),w-=A,r.length-=A;do{g[m++]=L[I++]}while(--A);0===r.length&&(r.mode=21);break;case 26:if(0===w)break t;g[m++]=r.length,w--,r.mode=21;break;case 27:if(r.wrap){for(;S<32;){if(0===v)break t;v--,E|=y[b++]<<S,S+=8}if(k-=w,t.total_out+=k,r.total+=k,k&&(t.adler=r.check=r.flags?o(r.check,g,k,m-k):i(r.check,g,k,m-k)),k=w,(r.flags?E:_(E))!==r.check){t.msg="incorrect data check",r.mode=p;break}E=0,S=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(E!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=p;break}E=0,S=0}r.mode=29;case 29:C=1;break t;case p:C=-3;break t;case 31:return-4;default:return f}return t.next_out=m,t.avail_out=w,t.next_in=b,t.avail_in=v,r.hold=E,r.bits=S,(r.wsize||k!==t.avail_out&&r.mode<p&&(r.mode<27||4!==e))&&T(t,t.output,t.next_out,k-t.avail_out)?(r.mode=31,-4):(R-=t.avail_in,k-=t.avail_out,t.total_in+=R,t.total_out+=k,r.total+=k,r.wrap&&k&&(t.adler=r.check=r.flags?o(r.check,g,k,t.next_out-k):i(r.check,g,k,t.next_out-k)),t.data_type=r.bits+(r.last?64:0)+(r.mode===d?128:0)+(20===r.mode||15===r.mode?256:0),(0===R&&0===k||4===e)&&C===l&&(C=-5),C)},e.inflateEnd=function(t){if(!t||!t.state)return f;var e=t.state;return e.window&&(e.window=null),t.state=null,l},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?f:(r.head=e,e.done=!1,l):f},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?f:11===r.mode&&i(1,e,n,0)!==r.check?-3:T(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,l):f},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),i=0,e=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},i={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,n)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,i))},e.setTyped(r)},function(t,e){"use strict";t.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{o=o+(i=i+e[n++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},function(t,e){"use strict";var r=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,e,n,i){var o=r,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},function(t,e){"use strict";t.exports=function(t,e){var r,n,i,o,a,s,u,c,l,f,h,d,p,y,g,_,b,m,v,w,E,S,R,k,O;r=t.state,n=t.next_in,k=t.input,i=n+(t.avail_in-5),o=t.next_out,O=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,f=r.wnext,h=r.window,d=r.hold,p=r.bits,y=r.lencode,g=r.distcode,_=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(d+=k[n++]<<p,p+=8,d+=k[n++]<<p,p+=8),m=y[d&_];e:for(;;){if(d>>>=v=m>>>24,p-=v,0==(v=m>>>16&255))O[o++]=65535&m;else{if(!(16&v)){if(0==(64&v)){m=y[(65535&m)+(d&(1<<v)-1)];continue e}if(32&v){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&m,(v&=15)&&(p<v&&(d+=k[n++]<<p,p+=8),w+=d&(1<<v)-1,d>>>=v,p-=v),p<15&&(d+=k[n++]<<p,p+=8,d+=k[n++]<<p,p+=8),m=g[d&b];r:for(;;){if(d>>>=v=m>>>24,p-=v,!(16&(v=m>>>16&255))){if(0==(64&v)){m=g[(65535&m)+(d&(1<<v)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(E=65535&m,p<(v&=15)&&(d+=k[n++]<<p,(p+=8)<v&&(d+=k[n++]<<p,p+=8)),(E+=d&(1<<v)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=v,p-=v,E>(v=o-a)){if((v=E-v)>l&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=0,R=h,0===f){if(S+=c-v,v<w){w-=v;do{O[o++]=h[S++]}while(--v);S=o-E,R=O}}else if(f<v){if(S+=c+f-v,(v-=f)<w){w-=v;do{O[o++]=h[S++]}while(--v);if(S=0,f<w){w-=v=f;do{O[o++]=h[S++]}while(--v);S=o-E,R=O}}}else if(S+=f-v,v<w){w-=v;do{O[o++]=h[S++]}while(--v);S=o-E,R=O}for(;w>2;)O[o++]=R[S++],O[o++]=R[S++],O[o++]=R[S++],w-=3;w&&(O[o++]=R[S++],w>1&&(O[o++]=R[S++]))}else{S=o-E;do{O[o++]=O[S++],O[o++]=O[S++],O[o++]=O[S++],w-=3}while(w>2);w&&(O[o++]=O[S++],w>1&&(O[o++]=O[S++]))}break}}break}}while(n<i&&o<s);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}},function(t,e,r){"use strict";var n=r(33),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,l,f,h){var d,p,y,g,_,b,m,v,w,E=h.bits,S=0,R=0,k=0,O=0,T=0,A=0,I=0,L=0,x=0,N=0,P=null,D=0,F=new n.Buf16(16),M=new n.Buf16(16),j=null,C=0;for(S=0;S<=15;S++)F[S]=0;for(R=0;R<u;R++)F[e[r+R]]++;for(T=E,O=15;O>=1&&0===F[O];O--);if(T>O&&(T=O),0===O)return c[l++]=20971520,c[l++]=20971520,h.bits=1,0;for(k=1;k<O&&0===F[k];k++);for(T<k&&(T=k),L=1,S=1;S<=15;S++)if(L<<=1,(L-=F[S])<0)return-1;if(L>0&&(0===t||1!==O))return-1;for(M[1]=0,S=1;S<15;S++)M[S+1]=M[S]+F[S];for(R=0;R<u;R++)0!==e[r+R]&&(f[M[e[r+R]]++]=R);if(0===t?(P=j=f,b=19):1===t?(P=i,D-=257,j=o,C-=257,b=256):(P=a,j=s,b=-1),N=0,R=0,S=k,_=l,A=T,I=0,y=-1,g=(x=1<<T)-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){m=S-I,f[R]<b?(v=0,w=f[R]):f[R]>b?(v=j[C+f[R]],w=P[D+f[R]]):(v=96,w=0),d=1<<S-I,k=p=1<<A;do{c[_+(N>>I)+(p-=d)]=m<<24|v<<16|w|0}while(0!==p);for(d=1<<S-1;N&d;)d>>=1;if(0!==d?(N&=d-1,N+=d):N=0,R++,0==--F[S]){if(S===O)break;S=e[r+f[R]]}if(S>T&&(N&g)!==y){for(0===I&&(I=T),_+=k,L=1<<(A=S-I);A+I<O&&!((L-=F[A+I])<=0);)A++,L<<=1;if(x+=1<<A,1===t&&x>852||2===t&&x>592)return 1;c[y=N&g]=T<<24|A<<16|_-l|0}}return 0!==N&&(c[_+N]=S-I<<24|64<<16|0),h.bits=T,0}},function(t,e,r){"use strict";var n=r(33),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new n.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65537&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",a=0;a<e;a++)r+=String.fromCharCode(t[a]);return r}a[254]=a[254]=1,e.string2buf=function(t){var e,r,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),u+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(u),a=0,o=0;a<u;o++)55296==(64512&(r=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(i-56320),o++),r<128?e[a++]=r:r<2048?(e[a++]=192|r>>>6,e[a++]=128|63&r):r<65536?(e[a++]=224|r>>>12,e[a++]=128|r>>>6&63,e[a++]=128|63&r):(e[a++]=240|r>>>18,e[a++]=128|r>>>12&63,e[a++]=128|r>>>6&63,e[a++]=128|63&r);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,n,i,o,s=e||t.length,c=new Array(2*s);for(n=0,r=0;r<s;)if((i=t[r++])<128)c[n++]=i;else if((o=a[i])>4)c[n++]=65533,r+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&r<s;)i=i<<6|63&t[r++],o--;o>1?c[n++]=65533:i<65536?c[n++]=i:(i-=65536,c[n++]=55296|i>>10&1023,c[n++]=56320|1023&i)}return u(c,n)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}},function(t,e){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}}])},"object"==typeof e&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof e?e.BrowserFS=r():this.BrowserFS=r()},8609:(t,e,r)=>{var n=r(3229);t.exports=n.BFSRequire("buffer")},9649:(t,e,r)=>{var n=r(3229);t.exports=n.BFSRequire("buffer").Buffer},978:(t,e,r)=>{var n=r(3229);t.exports=n.BFSRequire("fs")},1679:(t,e,r)=>{var n=r(3229);t.exports=n.BFSRequire("path")},1624:(t,e,r)=>{var n=r(3229);t.exports=n.BFSRequire("process")},4505:(t,e,r)=>{"use strict";var n=r(9649),i=r(1624),o=r(9282),a=r(2292),s=r(405),u=r(7948),c=r(1619);for(var l in c)e[l]=c[l];function f(t){if("number"!=typeof t||t<e.DEFLATE||t>e.UNZIP)throw new TypeError("Bad argument");this.dictionary=null,this.err=0,this.flush=0,this.init_done=!1,this.level=0,this.memLevel=0,this.mode=t,this.strategy=0,this.windowBits=0,this.write_in_progress=!1,this.pending_close=!1,this.gzip_id_bytes_read=0}e.NONE=0,e.DEFLATE=1,e.INFLATE=2,e.GZIP=3,e.GUNZIP=4,e.DEFLATERAW=5,e.INFLATERAW=6,e.UNZIP=7,f.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,o(this.init_done,"close before init"),o(this.mode<=e.UNZIP),this.mode===e.DEFLATE||this.mode===e.GZIP||this.mode===e.DEFLATERAW?s.deflateEnd(this.strm):this.mode!==e.INFLATE&&this.mode!==e.GUNZIP&&this.mode!==e.INFLATERAW&&this.mode!==e.UNZIP||u.inflateEnd(this.strm),this.mode=e.NONE,this.dictionary=null)},f.prototype.write=function(t,e,r,n,i,o,a){return this._write(!0,t,e,r,n,i,o,a)},f.prototype.writeSync=function(t,e,r,n,i,o,a){return this._write(!1,t,e,r,n,i,o,a)},f.prototype._write=function(t,r,a,s,u,c,l,f){if(o.equal(arguments.length,8),o(this.init_done,"write before init"),o(this.mode!==e.NONE,"already finalized"),o.equal(!1,this.write_in_progress,"write already in progress"),o.equal(!1,this.pending_close,"close is pending"),this.write_in_progress=!0,o.equal(!1,void 0===r,"must provide flush value"),this.write_in_progress=!0,r!==e.Z_NO_FLUSH&&r!==e.Z_PARTIAL_FLUSH&&r!==e.Z_SYNC_FLUSH&&r!==e.Z_FULL_FLUSH&&r!==e.Z_FINISH&&r!==e.Z_BLOCK)throw new Error("Invalid flush value");if(null==a&&(a=n.alloc(0),u=0,s=0),this.strm.avail_in=u,this.strm.input=a,this.strm.next_in=s,this.strm.avail_out=f,this.strm.output=c,this.strm.next_out=l,this.flush=r,!t)return this._process(),this._checkError()?this._afterSync():void 0;var h=this;return i.nextTick((function(){h._process(),h._after()})),this},f.prototype._afterSync=function(){var t=this.strm.avail_out,e=this.strm.avail_in;return this.write_in_progress=!1,[e,t]},f.prototype._process=function(){var t=null;switch(this.mode){case e.DEFLATE:case e.GZIP:case e.DEFLATERAW:this.err=s.deflate(this.strm,this.flush);break;case e.UNZIP:switch(this.strm.avail_in>0&&(t=this.strm.next_in),this.gzip_id_bytes_read){case 0:if(null===t)break;if(31!==this.strm.input[t]){this.mode=e.INFLATE;break}if(this.gzip_id_bytes_read=1,t++,1===this.strm.avail_in)break;case 1:if(null===t)break;139===this.strm.input[t]?(this.gzip_id_bytes_read=2,this.mode=e.GUNZIP):this.mode=e.INFLATE;break;default:throw new Error("invalid number of gzip magic number bytes read")}case e.INFLATE:case e.GUNZIP:case e.INFLATERAW:for(this.err=u.inflate(this.strm,this.flush),this.err===e.Z_NEED_DICT&&this.dictionary&&(this.err=u.inflateSetDictionary(this.strm,this.dictionary),this.err===e.Z_OK?this.err=u.inflate(this.strm,this.flush):this.err===e.Z_DATA_ERROR&&(this.err=e.Z_NEED_DICT));this.strm.avail_in>0&&this.mode===e.GUNZIP&&this.err===e.Z_STREAM_END&&0!==this.strm.next_in[0];)this.reset(),this.err=u.inflate(this.strm,this.flush);break;default:throw new Error("Unknown mode "+this.mode)}},f.prototype._checkError=function(){switch(this.err){case e.Z_OK:case e.Z_BUF_ERROR:if(0!==this.strm.avail_out&&this.flush===e.Z_FINISH)return this._error("unexpected end of file"),!1;break;case e.Z_STREAM_END:break;case e.Z_NEED_DICT:return null==this.dictionary?this._error("Missing dictionary"):this._error("Bad dictionary"),!1;default:return this._error("Zlib error"),!1}return!0},f.prototype._after=function(){if(this._checkError()){var t=this.strm.avail_out,e=this.strm.avail_in;this.write_in_progress=!1,this.callback(e,t),this.pending_close&&this.close()}},f.prototype._error=function(t){this.strm.msg&&(t=this.strm.msg),this.onerror(t,this.err),this.write_in_progress=!1,this.pending_close&&this.close()},f.prototype.init=function(t,r,n,i,a){o(4===arguments.length||5===arguments.length,"init(windowBits, level, memLevel, strategy, [dictionary])"),o(t>=8&&t<=15,"invalid windowBits"),o(r>=-1&&r<=9,"invalid compression level"),o(n>=1&&n<=9,"invalid memlevel"),o(i===e.Z_FILTERED||i===e.Z_HUFFMAN_ONLY||i===e.Z_RLE||i===e.Z_FIXED||i===e.Z_DEFAULT_STRATEGY,"invalid strategy"),this._init(r,t,n,i,a),this._setDictionary()},f.prototype.params=function(){throw new Error("deflateParams Not supported")},f.prototype.reset=function(){this._reset(),this._setDictionary()},f.prototype._init=function(t,r,n,i,o){switch(this.level=t,this.windowBits=r,this.memLevel=n,this.strategy=i,this.flush=e.Z_NO_FLUSH,this.err=e.Z_OK,this.mode!==e.GZIP&&this.mode!==e.GUNZIP||(this.windowBits+=16),this.mode===e.UNZIP&&(this.windowBits+=32),this.mode!==e.DEFLATERAW&&this.mode!==e.INFLATERAW||(this.windowBits=-1*this.windowBits),this.strm=new a,this.mode){case e.DEFLATE:case e.GZIP:case e.DEFLATERAW:this.err=s.deflateInit2(this.strm,this.level,e.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case e.INFLATE:case e.GUNZIP:case e.INFLATERAW:case e.UNZIP:this.err=u.inflateInit2(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}this.err!==e.Z_OK&&this._error("Init error"),this.dictionary=o,this.write_in_progress=!1,this.init_done=!0},f.prototype._setDictionary=function(){if(null!=this.dictionary){switch(this.err=e.Z_OK,this.mode){case e.DEFLATE:case e.DEFLATERAW:this.err=s.deflateSetDictionary(this.strm,this.dictionary)}this.err!==e.Z_OK&&this._error("Failed to set dictionary")}},f.prototype._reset=function(){switch(this.err=e.Z_OK,this.mode){case e.DEFLATE:case e.DEFLATERAW:case e.GZIP:this.err=s.deflateReset(this.strm);break;case e.INFLATE:case e.INFLATERAW:case e.GUNZIP:this.err=u.inflateReset(this.strm)}this.err!==e.Z_OK&&this._error("Failed to reset stream")},e.Zlib=f},2635:(t,e,r)=>{"use strict";var n=r(1624),i=r(8609).Buffer,o=r(2830).Transform,a=r(4505),s=r(9539),u=r(9282).ok,c=r(8609).kMaxLength,l="Cannot create final Buffer. It would be larger than 0x"+c.toString(16)+" bytes";a.Z_MIN_WINDOWBITS=8,a.Z_MAX_WINDOWBITS=15,a.Z_DEFAULT_WINDOWBITS=15,a.Z_MIN_CHUNK=64,a.Z_MAX_CHUNK=1/0,a.Z_DEFAULT_CHUNK=16384,a.Z_MIN_MEMLEVEL=1,a.Z_MAX_MEMLEVEL=9,a.Z_DEFAULT_MEMLEVEL=8,a.Z_MIN_LEVEL=-1,a.Z_MAX_LEVEL=9,a.Z_DEFAULT_LEVEL=a.Z_DEFAULT_COMPRESSION;for(var f=Object.keys(a),h=0;h<f.length;h++){var d=f[h];d.match(/^Z/)&&Object.defineProperty(e,d,{enumerable:!0,value:a[d],writable:!1})}for(var p={Z_OK:a.Z_OK,Z_STREAM_END:a.Z_STREAM_END,Z_NEED_DICT:a.Z_NEED_DICT,Z_ERRNO:a.Z_ERRNO,Z_STREAM_ERROR:a.Z_STREAM_ERROR,Z_DATA_ERROR:a.Z_DATA_ERROR,Z_MEM_ERROR:a.Z_MEM_ERROR,Z_BUF_ERROR:a.Z_BUF_ERROR,Z_VERSION_ERROR:a.Z_VERSION_ERROR},y=Object.keys(p),g=0;g<y.length;g++){var _=y[g];p[p[_]]=_}function b(t,e,r){var n=[],o=0;function a(){for(var e;null!==(e=t.read());)n.push(e),o+=e.length;t.once("readable",a)}function s(){var e,a=null;o>=c?a=new RangeError(l):e=i.concat(n,o),n=[],t.close(),r(a,e)}t.on("error",(function(e){t.removeListener("end",s),t.removeListener("readable",a),r(e)})),t.on("end",s),t.end(e),a()}function m(t,e){if("string"==typeof e&&(e=i.from(e)),!i.isBuffer(e))throw new TypeError("Not a string or buffer");var r=t._finishFlushFlag;return t._processChunk(e,r)}function v(t){if(!(this instanceof v))return new v(t);A.call(this,t,a.DEFLATE)}function w(t){if(!(this instanceof w))return new w(t);A.call(this,t,a.INFLATE)}function E(t){if(!(this instanceof E))return new E(t);A.call(this,t,a.GZIP)}function S(t){if(!(this instanceof S))return new S(t);A.call(this,t,a.GUNZIP)}function R(t){if(!(this instanceof R))return new R(t);A.call(this,t,a.DEFLATERAW)}function k(t){if(!(this instanceof k))return new k(t);A.call(this,t,a.INFLATERAW)}function O(t){if(!(this instanceof O))return new O(t);A.call(this,t,a.UNZIP)}function T(t){return t===a.Z_NO_FLUSH||t===a.Z_PARTIAL_FLUSH||t===a.Z_SYNC_FLUSH||t===a.Z_FULL_FLUSH||t===a.Z_FINISH||t===a.Z_BLOCK}function A(t,r){var n=this;if(this._opts=t=t||{},this._chunkSize=t.chunkSize||e.Z_DEFAULT_CHUNK,o.call(this,t),t.flush&&!T(t.flush))throw new Error("Invalid flush flag: "+t.flush);if(t.finishFlush&&!T(t.finishFlush))throw new Error("Invalid flush flag: "+t.finishFlush);if(this._flushFlag=t.flush||a.Z_NO_FLUSH,this._finishFlushFlag=void 0!==t.finishFlush?t.finishFlush:a.Z_FINISH,t.chunkSize&&(t.chunkSize<e.Z_MIN_CHUNK||t.chunkSize>e.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+t.chunkSize);if(t.windowBits&&(t.windowBits<e.Z_MIN_WINDOWBITS||t.windowBits>e.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+t.windowBits);if(t.level&&(t.level<e.Z_MIN_LEVEL||t.level>e.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+t.level);if(t.memLevel&&(t.memLevel<e.Z_MIN_MEMLEVEL||t.memLevel>e.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+t.memLevel);if(t.strategy&&t.strategy!=e.Z_FILTERED&&t.strategy!=e.Z_HUFFMAN_ONLY&&t.strategy!=e.Z_RLE&&t.strategy!=e.Z_FIXED&&t.strategy!=e.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+t.strategy);if(t.dictionary&&!i.isBuffer(t.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._handle=new a.Zlib(r);var s=this;this._hadError=!1,this._handle.onerror=function(t,r){I(s),s._hadError=!0;var n=new Error(t);n.errno=r,n.code=e.codes[r],s.emit("error",n)};var u=e.Z_DEFAULT_COMPRESSION;"number"==typeof t.level&&(u=t.level);var c=e.Z_DEFAULT_STRATEGY;"number"==typeof t.strategy&&(c=t.strategy),this._handle.init(t.windowBits||e.Z_DEFAULT_WINDOWBITS,u,t.memLevel||e.Z_DEFAULT_MEMLEVEL,c,t.dictionary),this._buffer=i.allocUnsafe(this._chunkSize),this._offset=0,this._level=u,this._strategy=c,this.once("end",this.close),Object.defineProperty(this,"_closed",{get:function(){return!n._handle},configurable:!0,enumerable:!0})}function I(t,e){e&&n.nextTick(e),t._handle&&(t._handle.close(),t._handle=null)}function L(t){t.emit("close")}Object.defineProperty(e,"codes",{enumerable:!0,value:Object.freeze(p),writable:!1}),e.Deflate=v,e.Inflate=w,e.Gzip=E,e.Gunzip=S,e.DeflateRaw=R,e.InflateRaw=k,e.Unzip=O,e.createDeflate=function(t){return new v(t)},e.createInflate=function(t){return new w(t)},e.createDeflateRaw=function(t){return new R(t)},e.createInflateRaw=function(t){return new k(t)},e.createGzip=function(t){return new E(t)},e.createGunzip=function(t){return new S(t)},e.createUnzip=function(t){return new O(t)},e.deflate=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new v(e),t,r)},e.deflateSync=function(t,e){return m(new v(e),t)},e.gzip=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new E(e),t,r)},e.gzipSync=function(t,e){return m(new E(e),t)},e.deflateRaw=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new R(e),t,r)},e.deflateRawSync=function(t,e){return m(new R(e),t)},e.unzip=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new O(e),t,r)},e.unzipSync=function(t,e){return m(new O(e),t)},e.inflate=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new w(e),t,r)},e.inflateSync=function(t,e){return m(new w(e),t)},e.gunzip=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new S(e),t,r)},e.gunzipSync=function(t,e){return m(new S(e),t)},e.inflateRaw=function(t,e,r){return"function"==typeof e&&(r=e,e={}),b(new k(e),t,r)},e.inflateRawSync=function(t,e){return m(new k(e),t)},s.inherits(A,o),A.prototype.params=function(t,r,i){if(t<e.Z_MIN_LEVEL||t>e.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+t);if(r!=e.Z_FILTERED&&r!=e.Z_HUFFMAN_ONLY&&r!=e.Z_RLE&&r!=e.Z_FIXED&&r!=e.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+r);if(this._level!==t||this._strategy!==r){var o=this;this.flush(a.Z_SYNC_FLUSH,(function(){u(o._handle,"zlib binding closed"),o._handle.params(t,r),o._hadError||(o._level=t,o._strategy=r,i&&i())}))}else n.nextTick(i)},A.prototype.reset=function(){return u(this._handle,"zlib binding closed"),this._handle.reset()},A.prototype._flush=function(t){this._transform(i.alloc(0),"",t)},A.prototype.flush=function(t,e){var r=this,o=this._writableState;("function"==typeof t||void 0===t&&!e)&&(e=t,t=a.Z_FULL_FLUSH),o.ended?e&&n.nextTick(e):o.ending?e&&this.once("end",e):o.needDrain?e&&this.once("drain",(function(){return r.flush(t,e)})):(this._flushFlag=t,this.write(i.alloc(0),"",e))},A.prototype.close=function(t){I(this,t),n.nextTick(L,this)},A.prototype._transform=function(t,e,r){var n,o=this._writableState,s=(o.ending||o.ended)&&(!t||o.length===t.length);return null===t||i.isBuffer(t)?this._handle?(s?n=this._finishFlushFlag:(n=this._flushFlag,t.length>=o.length&&(this._flushFlag=this._opts.flush||a.Z_NO_FLUSH)),void this._processChunk(t,n,r)):r(new Error("zlib binding closed")):r(new Error("invalid input"))},A.prototype._processChunk=function(t,e,r){var n=t&&t.length,o=this._chunkSize-this._offset,a=0,s=this,f="function"==typeof r;if(!f){var h,d=[],p=0;this.on("error",(function(t){h=t})),u(this._handle,"zlib binding closed");do{var y=this._handle.writeSync(e,t,a,n,this._buffer,this._offset,o)}while(!this._hadError&&b(y[0],y[1]));if(this._hadError)throw h;if(p>=c)throw I(this),new RangeError(l);var g=i.concat(d,p);return I(this),g}u(this._handle,"zlib binding closed");var _=this._handle.write(e,t,a,n,this._buffer,this._offset,o);function b(c,l){if(this&&(this.buffer=null,this.callback=null),!s._hadError){var h=o-l;if(u(h>=0,"have should not go down"),h>0){var y=s._buffer.slice(s._offset,s._offset+h);s._offset+=h,f?s.push(y):(d.push(y),p+=y.length)}if((0===l||s._offset>=s._chunkSize)&&(o=s._chunkSize,s._offset=0,s._buffer=i.allocUnsafe(s._chunkSize)),0===l){if(a+=n-c,n=c,!f)return!0;var g=s._handle.write(e,t,a,n,s._buffer,s._offset,s._chunkSize);return g.callback=b,void(g.buffer=t)}if(!f)return!1;r()}}_.buffer=t,_.callback=b},s.inherits(v,A),s.inherits(w,A),s.inherits(E,A),s.inherits(S,A),s.inherits(R,A),s.inherits(k,A),s.inherits(O,A)},584:t=>{t.exports={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",208:"Already Reported",226:"IM Used",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",308:"Permanent Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",421:"Misdirected Request",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",451:"Unavailable For Legal Reasons",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",508:"Loop Detected",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},1924:(t,e,r)=>{"use strict";var n=r(210),i=r(5559),o=i(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&o(t,".prototype.")>-1?i(r):r}},5559:(t,e,r)=>{"use strict";var n=r(8612),i=r(210),o=i("%Function.prototype.apply%"),a=i("%Function.prototype.call%"),s=i("%Reflect.apply%",!0)||n.call(a,o),u=i("%Object.getOwnPropertyDescriptor%",!0),c=i("%Object.defineProperty%",!0),l=i("%Math.max%");if(c)try{c({},"a",{value:1})}catch(t){c=null}t.exports=function(t){var e=s(n,a,arguments);return u&&c&&u(e,"length").configurable&&c(e,"length",{value:1+l(0,t.length-(arguments.length-1))}),e};var f=function(){return s(n,o,arguments)};c?c(t.exports,"apply",{value:f}):t.exports.apply=f},9019:(t,e,r)=>{"use strict";var n=r(1624);const i=r(978),o=r(1679),a=i.lchown?"lchown":"chown",s=i.lchownSync?"lchownSync":"chownSync",u=i.lchown&&!n.version.match(/v1[1-9]+\./)&&!n.version.match(/v10\.[6-9]/),c=(t,e,r)=>{try{return i[s](t,e,r)}catch(t){if("ENOENT"!==t.code)throw t}},l=u?(t,e,r,n)=>o=>{o&&"EISDIR"===o.code?i.chown(t,e,r,n):n(o)}:(t,e,r,n)=>n,f=u?(t,e,r)=>{try{return c(t,e,r)}catch(n){if("EISDIR"!==n.code)throw n;((t,e,r)=>{try{return i.chownSync(t,e,r)}catch(t){if("ENOENT"!==t.code)throw t}})(t,e,r)}}:(t,e,r)=>c(t,e,r),h=n.version;let d=(t,e,r)=>i.readdir(t,e,r);/^v4\./.test(h)&&(d=(t,e,r)=>i.readdir(t,r));const p=(t,e,r,n)=>{i[a](t,e,r,l(t,e,r,(t=>{n(t&&"ENOENT"!==t.code?t:null)})))},y=(t,e,r,n,a)=>{if("string"==typeof e)return i.lstat(o.resolve(t,e),((i,o)=>{if(i)return a("ENOENT"!==i.code?i:null);o.name=e,y(t,o,r,n,a)}));if(e.isDirectory())g(o.resolve(t,e.name),r,n,(i=>{if(i)return a(i);const s=o.resolve(t,e.name);p(s,r,n,a)}));else{const i=o.resolve(t,e.name);p(i,r,n,a)}},g=(t,e,r,n)=>{d(t,{withFileTypes:!0},((i,o)=>{if(i){if("ENOENT"===i.code)return n();if("ENOTDIR"!==i.code&&"ENOTSUP"!==i.code)return n(i)}if(i||!o.length)return p(t,e,r,n);let a=o.length,s=null;const u=i=>{if(!s)return i?n(s=i):0==--a?p(t,e,r,n):void 0};o.forEach((n=>y(t,n,e,r,u)))}))},_=(t,e,r)=>{let n;try{n=((t,e)=>i.readdirSync(t,{withFileTypes:!0}))(t)}catch(n){if("ENOENT"===n.code)return;if("ENOTDIR"===n.code||"ENOTSUP"===n.code)return f(t,e,r);throw n}return n&&n.length&&n.forEach((n=>((t,e,r,n)=>{if("string"==typeof e)try{const r=i.lstatSync(o.resolve(t,e));r.name=e,e=r}catch(t){if("ENOENT"===t.code)return;throw t}e.isDirectory()&&_(o.resolve(t,e.name),r,n),f(o.resolve(t,e.name),r,n)})(t,n,e,r))),f(t,e,r)};t.exports=g,g.sync=_},5108:(t,e,r)=>{var n=r(9539),i=r(9282);function o(){return(new Date).getTime()}var a,s=Array.prototype.slice,u={};a="undefined"!=typeof global&&global.console?global.console:"undefined"!=typeof window&&window.console?window.console:{};for(var c=[[function(){},"log"],[function(){a.log.apply(a,arguments)},"info"],[function(){a.log.apply(a,arguments)},"warn"],[function(){a.warn.apply(a,arguments)},"error"],[function(t){u[t]=o()},"time"],[function(t){var e=u[t];if(!e)throw new Error("No such label: "+t);delete u[t];var r=o()-e;a.log(t+": "+r+"ms")},"timeEnd"],[function(){var t=new Error;t.name="Trace",t.message=n.format.apply(null,arguments),a.error(t.stack)},"trace"],[function(t){a.log(n.inspect(t)+"\n")},"dir"],[function(t){if(!t){var e=s.call(arguments,1);i.ok(!1,n.format.apply(null,e))}},"assert"]],l=0;l<c.length;l++){var f=c[l],h=f[0],d=f[1];a[d]||(a[d]=h)}t.exports=a},4289:(t,e,r)=>{"use strict";var n=r(2215),i="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,a=Array.prototype.concat,s=Object.defineProperty,u=r(1044)(),c=s&&u,l=function(t,e,r,n){if(e in t)if(!0===n){if(t[e]===r)return}else if("function"!=typeof(i=n)||"[object Function]"!==o.call(i)||!n())return;var i;c?s(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r},f=function(t,e){var r=arguments.length>2?arguments[2]:{},o=n(e);i&&(o=a.call(o,Object.getOwnPropertySymbols(e)));for(var s=0;s<o.length;s+=1)l(t,o[s],e[o[s]],r[o[s]])};f.supportsDescriptors=!!c,t.exports=f},2840:(t,e,r)=>{var n=r(1624),i=r(778),o=function(){},a=function(t,e,r){if("function"==typeof e)return a(t,null,e);e||(e={}),r=i(r||o);var s=t._writableState,u=t._readableState,c=e.readable||!1!==e.readable&&t.readable,l=e.writable||!1!==e.writable&&t.writable,f=!1,h=function(){t.writable||d()},d=function(){l=!1,c||r.call(t)},p=function(){c=!1,l||r.call(t)},y=function(e){r.call(t,e?new Error("exited with error code: "+e):null)},g=function(e){r.call(t,e)},_=function(){n.nextTick(b)},b=function(){if(!f)return(!c||u&&u.ended&&!u.destroyed)&&(!l||s&&s.ended&&!s.destroyed)?void 0:r.call(t,new Error("premature close"))},m=function(){t.req.on("finish",d)};return function(t){return t.setHeader&&"function"==typeof t.abort}(t)?(t.on("complete",d),t.on("abort",_),t.req?m():t.on("request",m)):l&&!s&&(t.on("end",h),t.on("close",h)),function(t){return t.stdio&&Array.isArray(t.stdio)&&3===t.stdio.length}(t)&&t.on("exit",y),t.on("end",p),t.on("finish",d),!1!==e.error&&t.on("error",g),t.on("close",_),function(){f=!0,t.removeListener("complete",d),t.removeListener("abort",_),t.removeListener("request",m),t.req&&t.req.removeListener("finish",d),t.removeListener("end",h),t.removeListener("close",h),t.removeListener("finish",d),t.removeListener("exit",y),t.removeListener("end",p),t.removeListener("error",g),t.removeListener("close",_)}};t.exports=a},8091:t=>{"use strict";function e(t,e){if(null==t)throw new TypeError("Cannot convert first argument to object");for(var r=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var o=Object.keys(Object(i)),a=0,s=o.length;a<s;a++){var u=o[a],c=Object.getOwnPropertyDescriptor(i,u);void 0!==c&&c.enumerable&&(r[u]=i[u])}}return r}t.exports={assign:e,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:e})}}},7187:(t,e,r)=>{"use strict";var n,i=r(5108),o="object"==typeof Reflect?Reflect:null,a=o&&"function"==typeof o.apply?o.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function u(){u.init.call(this)}t.exports=u,t.exports.once=function(t,e){return new Promise((function(r,n){function i(r){t.removeListener(e,o),n(r)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",i),r([].slice.call(arguments))}b(t,e,o,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&b(t,"error",e,{once:!0})}(t,i)}))},u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function l(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function f(t){return void 0===t._maxListeners?u.defaultMaxListeners:t._maxListeners}function h(t,e,r,n){var o,a,s,u;if(l(r),void 0===(a=t._events)?(a=t._events=Object.create(null),t._eventsCount=0):(void 0!==a.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),a=t._events),s=a[e]),void 0===s)s=a[e]=r,++t._eventsCount;else if("function"==typeof s?s=a[e]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(o=f(t))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=t,c.type=e,c.count=s.length,u=c,i&&i.warn&&i.warn(u)}return t}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=d.bind(n);return i.listener=r,n.wrapFn=i,i}function y(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):_(i,i.length)}function g(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function _(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function b(t,e,r,n){if("function"==typeof t.on)n.once?t.once(e,r):t.on(e,r);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function i(o){n.once&&t.removeEventListener(e,i),r(o)}))}}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");c=t}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)a(u,this,e);else{var c=u.length,l=_(u,c);for(r=0;r<c;++r)a(l[r],this,e)}return!0},u.prototype.addListener=function(t,e){return h(this,t,e,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(t,e){return h(this,t,e,!0)},u.prototype.once=function(t,e){return l(e),this.on(t,p(this,t,e)),this},u.prototype.prependOnceListener=function(t,e){return l(e),this.prependListener(t,p(this,t,e)),this},u.prototype.removeListener=function(t,e){var r,n,i,o,a;if(l(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,a||e)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},u.prototype.listeners=function(t){return y(this,t,!0)},u.prototype.rawListeners=function(t){return y(this,t,!1)},u.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):g.call(t,e)},u.prototype.listenerCount=g,u.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},2261:(t,e,r)=>{var n;t.exports=function(){if(!n){try{n=r(Object(function(){var t=new Error("Cannot find module 'debug'");throw t.code="MODULE_NOT_FOUND",t}()))("follow-redirects")}catch(t){}"function"!=typeof n&&(n=function(){})}n.apply(null,arguments)}},938:(t,e,r)=>{var n=r(8575),i=n.URL,o=r(8501),a=r(9267),s=r(2830).Writable,u=r(9282),c=r(2261),l=["abort","aborted","connect","error","socket","timeout"],f=Object.create(null);l.forEach((function(t){f[t]=function(e,r,n){this._redirectable.emit(t,e,r,n)}}));var h=E("ERR_INVALID_URL","Invalid URL",TypeError),d=E("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),p=E("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),y=E("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),g=E("ERR_STREAM_WRITE_AFTER_END","write after end");function _(t,e){s.call(this),this._sanitizeOptions(t),this._options=t,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],e&&this.on("response",e);var r=this;this._onNativeResponse=function(t){r._processResponse(t)},this._performRequest()}function b(t){var e={maxRedirects:21,maxBodyLength:10485760},r={};return Object.keys(t).forEach((function(o){var a=o+":",s=r[a]=t[o],l=e[o]=Object.create(s);Object.defineProperties(l,{request:{value:function(t,o,s){if(R(t)){var l;try{l=v(new i(t))}catch(e){l=n.parse(t)}if(!R(l.protocol))throw new h({input:t});t=l}else i&&t instanceof i?t=v(t):(s=o,o=t,t={protocol:a});return k(o)&&(s=o,o=null),(o=Object.assign({maxRedirects:e.maxRedirects,maxBodyLength:e.maxBodyLength},t,o)).nativeProtocols=r,R(o.host)||R(o.hostname)||(o.hostname="::1"),u.equal(o.protocol,a,"protocol mismatch"),c("options",o),new _(o,s)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(t,e,r){var n=l.request(t,e,r);return n.end(),n},configurable:!0,enumerable:!0,writable:!0}})})),e}function m(){}function v(t){var e={protocol:t.protocol,hostname:t.hostname.startsWith("[")?t.hostname.slice(1,-1):t.hostname,hash:t.hash,search:t.search,pathname:t.pathname,path:t.pathname+t.search,href:t.href};return""!==t.port&&(e.port=Number(t.port)),e}function w(t,e){var r;for(var n in e)t.test(n)&&(r=e[n],delete e[n]);return null==r?void 0:String(r).trim()}function E(t,e,r){function n(r){Error.captureStackTrace(this,this.constructor),Object.assign(this,r||{}),this.code=t,this.message=this.cause?e+": "+this.cause.message:e}return n.prototype=new(r||Error),n.prototype.constructor=n,n.prototype.name="Error ["+t+"]",n}function S(t){for(var e of l)t.removeListener(e,f[e]);t.on("error",m),t.abort()}function R(t){return"string"==typeof t||t instanceof String}function k(t){return"function"==typeof t}_.prototype=Object.create(s.prototype),_.prototype.abort=function(){S(this._currentRequest),this.emit("abort")},_.prototype.write=function(t,e,r){if(this._ending)throw new g;if(!(R(t)||"object"==typeof(n=t)&&"length"in n))throw new TypeError("data should be a string, Buffer or Uint8Array");var n;k(e)&&(r=e,e=null),0!==t.length?this._requestBodyLength+t.length<=this._options.maxBodyLength?(this._requestBodyLength+=t.length,this._requestBodyBuffers.push({data:t,encoding:e}),this._currentRequest.write(t,e,r)):(this.emit("error",new y),this.abort()):r&&r()},_.prototype.end=function(t,e,r){if(k(t)?(r=t,t=e=null):k(e)&&(r=e,e=null),t){var n=this,i=this._currentRequest;this.write(t,e,(function(){n._ended=!0,i.end(null,null,r)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,r)},_.prototype.setHeader=function(t,e){this._options.headers[t]=e,this._currentRequest.setHeader(t,e)},_.prototype.removeHeader=function(t){delete this._options.headers[t],this._currentRequest.removeHeader(t)},_.prototype.setTimeout=function(t,e){var r=this;function n(e){e.setTimeout(t),e.removeListener("timeout",e.destroy),e.addListener("timeout",e.destroy)}function i(e){r._timeout&&clearTimeout(r._timeout),r._timeout=setTimeout((function(){r.emit("timeout"),o()}),t),n(e)}function o(){r._timeout&&(clearTimeout(r._timeout),r._timeout=null),r.removeListener("abort",o),r.removeListener("error",o),r.removeListener("response",o),e&&r.removeListener("timeout",e),r.socket||r._currentRequest.removeListener("socket",i)}return e&&this.on("timeout",e),this.socket?i(this.socket):this._currentRequest.once("socket",i),this.on("socket",n),this.on("abort",o),this.on("error",o),this.on("response",o),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(t){_.prototype[t]=function(e,r){return this._currentRequest[t](e,r)}})),["aborted","connection","socket"].forEach((function(t){Object.defineProperty(_.prototype,t,{get:function(){return this._currentRequest[t]}})})),_.prototype._sanitizeOptions=function(t){if(t.headers||(t.headers={}),t.host&&(t.hostname||(t.hostname=t.host),delete t.host),!t.pathname&&t.path){var e=t.path.indexOf("?");e<0?t.pathname=t.path:(t.pathname=t.path.substring(0,e),t.search=t.path.substring(e))}},_.prototype._performRequest=function(){var t=this._options.protocol,e=this._options.nativeProtocols[t];if(e){if(this._options.agents){var r=t.slice(0,-1);this._options.agent=this._options.agents[r]}var i=this._currentRequest=e.request(this._options,this._onNativeResponse);for(var o of(i._redirectable=this,l))i.on(o,f[o]);if(this._currentUrl=/^\//.test(this._options.path)?n.format(this._options):this._options.path,this._isRedirect){var a=0,s=this,u=this._requestBodyBuffers;!function t(e){if(i===s._currentRequest)if(e)s.emit("error",e);else if(a<u.length){var r=u[a++];i.finished||i.write(r.data,r.encoding,t)}else s._ended&&i.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+t))},_.prototype._processResponse=function(t){var e=t.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:t.headers,statusCode:e});var r=t.headers.location;if(!r||!1===this._options.followRedirects||e<300||e>=400)return t.responseUrl=this._currentUrl,t.redirects=this._redirects,this.emit("response",t),void(this._requestBodyBuffers=[]);if(S(this._currentRequest),t.destroy(),++this._redirectCount>this._options.maxRedirects)this.emit("error",new p);else{var i,o=this._options.beforeRedirect;o&&(i=Object.assign({Host:t.req.getHeader("host")},this._options.headers));var a=this._options.method;((301===e||302===e)&&"POST"===this._options.method||303===e&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],w(/^content-/i,this._options.headers));var s,l=w(/^host$/i,this._options.headers),f=n.parse(this._currentUrl),h=l||f.host,y=/^\w+:/.test(r)?this._currentUrl:n.format(Object.assign(f,{host:h}));try{s=n.resolve(y,r)}catch(t){return void this.emit("error",new d({cause:t}))}c("redirecting to",s),this._isRedirect=!0;var g=n.parse(s);if(Object.assign(this._options,g),(g.protocol!==f.protocol&&"https:"!==g.protocol||g.host!==h&&!function(t,e){u(R(t)&&R(e));var r=t.length-e.length-1;return r>0&&"."===t[r]&&t.endsWith(e)}(g.host,h))&&w(/^(?:authorization|cookie)$/i,this._options.headers),k(o)){var _={headers:t.headers,statusCode:e},b={url:y,method:a,headers:i};try{o(this._options,_,b)}catch(t){return void this.emit("error",t)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(t){this.emit("error",new d({cause:t}))}}},t.exports=b({http:o,https:a}),t.exports.wrap=b},4029:(t,e,r)=>{"use strict";var n=r(5320),i=Object.prototype.toString,o=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){if(!n(e))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=r),"[object Array]"===i.call(t)?function(t,e,r){for(var n=0,i=t.length;n<i;n++)o.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a):"string"==typeof t?function(t,e,r){for(var n=0,i=t.length;n<i;n++)null==r?e(t.charAt(n),n,t):e.call(r,t.charAt(n),n,t)}(t,e,a):function(t,e,r){for(var n in t)o.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a)}},5210:(t,e,r)=>{t.exports=r(3208)},7648:t=>{"use strict";var e=Array.prototype.slice,r=Object.prototype.toString;t.exports=function(t){var n=this;if("function"!=typeof n||"[object Function]"!==r.call(n))throw new TypeError("Function.prototype.bind called on incompatible "+n);for(var i,o=e.call(arguments,1),a=Math.max(0,n.length-o.length),s=[],u=0;u<a;u++)s.push("$"+u);if(i=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var r=n.apply(this,o.concat(e.call(arguments)));return Object(r)===r?r:this}return n.apply(t,o.concat(e.call(arguments)))})),n.prototype){var c=function(){};c.prototype=n.prototype,i.prototype=new c,c.prototype=null}return i}},8612:(t,e,r)=>{"use strict";var n=r(7648);t.exports=Function.prototype.bind||n},210:(t,e,r)=>{"use strict";var n,i=SyntaxError,o=Function,a=TypeError,s=function(t){try{return o('"use strict"; return ('+t+").constructor;")()}catch(t){}},u=Object.getOwnPropertyDescriptor;if(u)try{u({},"")}catch(t){u=null}var c=function(){throw new a},l=u?function(){try{return c}catch(t){try{return u(arguments,"callee").get}catch(t){return c}}}():c,f=r(1405)(),h=Object.getPrototypeOf||function(t){return t.__proto__},d={},p="undefined"==typeof Uint8Array?n:h(Uint8Array),y={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":f?h([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?h(h([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?h((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?h((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?h(""[Symbol.iterator]()):n,"%Symbol%":f?Symbol:n,"%SyntaxError%":i,"%ThrowTypeError%":l,"%TypedArray%":p,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};try{null.error}catch(t){var g=h(h(t));y["%Error.prototype%"]=g}var _=function t(e){var r;if("%AsyncFunction%"===e)r=s("async function () {}");else if("%GeneratorFunction%"===e)r=s("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=s("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var i=t("%AsyncGenerator%");i&&(r=h(i.prototype))}return y[e]=r,r},b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},m=r(8612),v=r(7642),w=m.call(Function.call,Array.prototype.concat),E=m.call(Function.apply,Array.prototype.splice),S=m.call(Function.call,String.prototype.replace),R=m.call(Function.call,String.prototype.slice),k=m.call(Function.call,RegExp.prototype.exec),O=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,T=/\\(\\)?/g,A=function(t,e){var r,n=t;if(v(b,n)&&(n="%"+(r=b[n])[0]+"%"),v(y,n)){var o=y[n];if(o===d&&(o=_(n)),void 0===o&&!e)throw new a("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new i("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new a('"allowMissing" argument must be a boolean');if(null===k(/^%?[^%]*%?$/,t))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=R(t,0,1),r=R(t,-1);if("%"===e&&"%"!==r)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new i("invalid intrinsic syntax, expected opening `%`");var n=[];return S(t,O,(function(t,e,r,i){n[n.length]=r?S(i,T,"$1"):e||t})),n}(t),n=r.length>0?r[0]:"",o=A("%"+n+"%",e),s=o.name,c=o.value,l=!1,f=o.alias;f&&(n=f[0],E(r,w([0,1],f)));for(var h=1,d=!0;h<r.length;h+=1){var p=r[h],g=R(p,0,1),_=R(p,-1);if(('"'===g||"'"===g||"`"===g||'"'===_||"'"===_||"`"===_)&&g!==_)throw new i("property names with quotes must have matching quotes");if("constructor"!==p&&d||(l=!0),v(y,s="%"+(n+="."+p)+"%"))c=y[s];else if(null!=c){if(!(p in c)){if(!e)throw new a("base intrinsic for "+t+" exists, but the property is not available.");return}if(u&&h+1>=r.length){var b=u(c,p);c=(d=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:c[p]}else d=v(c,p),c=c[p];d&&!l&&(y[s]=c)}}return c}},7296:(t,e,r)=>{"use strict";var n=r(210)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},1044:(t,e,r)=>{"use strict";var n=r(210)("%Object.defineProperty%",!0),i=function(){if(n)try{return n({},"a",{value:1}),!0}catch(t){return!1}return!1};i.hasArrayLengthDefineBug=function(){if(!i())return null;try{return 1!==n([],"length",{value:1}).length}catch(t){return!0}},t.exports=i},1405:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,i=r(5419);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&i()}},5419:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},6410:(t,e,r)=>{"use strict";var n=r(5419);t.exports=function(){return n()&&!!Symbol.toStringTag}},7642:(t,e,r)=>{"use strict";var n=r(8612);t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},9267:(t,e,r)=>{var n=r(8501),i=r(8575),o=t.exports;for(var a in n)n.hasOwnProperty(a)&&(o[a]=n[a]);function s(t){if("string"==typeof t&&(t=i.parse(t)),t.protocol||(t.protocol="https:"),"https:"!==t.protocol)throw new Error('Protocol "'+t.protocol+'" not supported. Expected "https:"');return t}o.request=function(t,e){return t=s(t),n.request.call(this,t,e)},o.get=function(t,e){return t=s(t),n.get.call(this,t,e)}},5717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},2584:(t,e,r)=>{"use strict";var n=r(6410)(),i=r(1924)("Object.prototype.toString"),o=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i(t)},a=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i(t)&&"[object Function]"===i(t.callee)},s=function(){return o(arguments)}();o.isLegacyArguments=a,t.exports=s?o:a},5320:t=>{"use strict";var e,r,n=Function.prototype.toString,i="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof i&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw r}}),r={},i((function(){throw 42}),null,e)}catch(t){t!==r&&(i=null)}else i=null;var o=/^\s*class\b/,a=function(t){try{var e=n.call(t);return o.test(e)}catch(t){return!1}},s=function(t){try{return!a(t)&&(n.call(t),!0)}catch(t){return!1}},u=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,l=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var h=document.all;u.call(h)===u.call(document.all)&&(f=function(t){if((l||!t)&&(void 0===t||"object"==typeof t))try{var e=u.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=i?function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{i(t,null,e)}catch(t){if(t!==r)return!1}return!a(t)&&s(t)}:function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(c)return s(t);if(a(t))return!1;var e=u.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&s(t)}},8662:(t,e,r)=>{"use strict";var n,i=Object.prototype.toString,o=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(6410)(),u=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(a.test(o.call(t)))return!0;if(!s)return"[object GeneratorFunction]"===i.call(t);if(!u)return!1;if(void 0===n){var e=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&u(e)}return u(t)===n}},8611:t=>{"use strict";t.exports=function(t){return t!=t}},360:(t,e,r)=>{"use strict";var n=r(5559),i=r(4289),o=r(8611),a=r(9415),s=r(3194),u=n(a(),Number);i(u,{getPolyfill:a,implementation:o,shim:s}),t.exports=u},9415:(t,e,r)=>{"use strict";var n=r(8611);t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},3194:(t,e,r)=>{"use strict";var n=r(4289),i=r(9415);t.exports=function(){var t=i();return n(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}},5692:(t,e,r)=>{"use strict";var n=r(4029),i=r(3083),o=r(1924),a=o("Object.prototype.toString"),s=r(6410)(),u=r(7296),c="undefined"==typeof globalThis?global:globalThis,l=i(),f=o("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},h=o("String.prototype.slice"),d={},p=Object.getPrototypeOf;s&&u&&p&&n(l,(function(t){var e=new c[t];if(Symbol.toStringTag in e){var r=p(e),n=u(r,Symbol.toStringTag);if(!n){var i=p(r);n=u(i,Symbol.toStringTag)}d[t]=n.get}})),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!s||!(Symbol.toStringTag in t)){var e=h(a(t),8,-1);return f(l,e)>-1}return!!u&&function(t){var e=!1;return n(d,(function(r,n){if(!e)try{e=r.call(t)===n}catch(t){}})),e}(t)}},2986:(t,e,r)=>{var n=r(1624),i=r(1679),o=r(978),a=parseInt("0777",8);function s(t,e,r,u){"function"==typeof e?(r=e,e={}):e&&"object"==typeof e||(e={mode:e});var c=e.mode,l=e.fs||o;void 0===c&&(c=a&~n.umask()),u||(u=null);var f=r||function(){};t=i.resolve(t),l.mkdir(t,c,(function(r){if(!r)return f(null,u=u||t);"ENOENT"===r.code?s(i.dirname(t),e,(function(r,n){r?f(r,n):s(t,e,f,n)})):l.stat(t,(function(t,e){t||!e.isDirectory()?f(r,u):f(null,u)}))}))}t.exports=s.mkdirp=s.mkdirP=s,s.sync=function t(e,r,s){r&&"object"==typeof r||(r={mode:r});var u=r.mode,c=r.fs||o;void 0===u&&(u=a&~n.umask()),s||(s=null),e=i.resolve(e);try{c.mkdirSync(e,u),s=s||e}catch(n){if("ENOENT"===n.code)s=t(i.dirname(e),r,s),t(e,r,s);else{var l;try{l=c.statSync(e)}catch(t){throw n}if(!l.isDirectory())throw n}}return s}},4244:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,r){return 0===t&&0===r?1/t==1/r:t===r||!(!e(t)||!e(r))}},609:(t,e,r)=>{"use strict";var n=r(4289),i=r(5559),o=r(4244),a=r(5624),s=r(2281),u=i(a(),Object);n(u,{getPolyfill:a,implementation:o,shim:s}),t.exports=u},5624:(t,e,r)=>{"use strict";var n=r(4244);t.exports=function(){return"function"==typeof Object.is?Object.is:n}},2281:(t,e,r)=>{"use strict";var n=r(5624),i=r(4289);t.exports=function(){var t=n();return i(Object,{is:t},{is:function(){return Object.is!==t}}),t}},8987:(t,e,r)=>{"use strict";var n;if(!Object.keys){var i=Object.prototype.hasOwnProperty,o=Object.prototype.toString,a=r(1414),s=Object.prototype.propertyIsEnumerable,u=!s.call({toString:null},"toString"),c=s.call((function(){}),"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},h={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},d=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!h["$"+t]&&i.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===o.call(t),n=a(t),s=e&&"[object String]"===o.call(t),h=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var p=c&&r;if(s&&t.length>0&&!i.call(t,0))for(var y=0;y<t.length;++y)h.push(String(y));if(n&&t.length>0)for(var g=0;g<t.length;++g)h.push(String(g));else for(var _ in t)p&&"prototype"===_||!i.call(t,_)||h.push(String(_));if(u)for(var b=function(t){if("undefined"==typeof window||!d)return f(t);try{return f(t)}catch(t){return!1}}(t),m=0;m<l.length;++m)b&&"constructor"===l[m]||!i.call(t,l[m])||h.push(l[m]);return h}}t.exports=n},2215:(t,e,r)=>{"use strict";var n=Array.prototype.slice,i=r(1414),o=Object.keys,a=o?function(t){return o(t)}:r(8987),s=Object.keys;a.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return i(t)?s(n.call(t)):s(t)})}else Object.keys=a;return Object.keys||a},t.exports=a},1414:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var r=e.call(t),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),n}},778:(t,e,r)=>{var n=r(2479);function i(t){var e=function(){return e.called?e.value:(e.called=!0,e.value=t.apply(this,arguments))};return e.called=!1,e}function o(t){var e=function(){if(e.called)throw new Error(e.onceError);return e.called=!0,e.value=t.apply(this,arguments)},r=t.name||"Function wrapped with `once`";return e.onceError=r+" shouldn't be called more than once",e.called=!1,e}t.exports=n(i),t.exports.strict=n(o),i.proto=i((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return i(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return o(this)},configurable:!0})}))},7435:(t,e)=>{e.endianness=function(){return"LE"},e.hostname=function(){return"undefined"!=typeof location?location.hostname:""},e.loadavg=function(){return[]},e.uptime=function(){return 0},e.freemem=function(){return Number.MAX_VALUE},e.totalmem=function(){return Number.MAX_VALUE},e.cpus=function(){return[]},e.type=function(){return"Browser"},e.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},e.networkInterfaces=e.getNetworkInterfaces=function(){return{}},e.arch=function(){return"javascript"},e.platform=function(){return"browser"},e.tmpdir=e.tmpDir=function(){return"/tmp"},e.EOL="\n",e.homedir=function(){return"/"}},4236:(t,e)=>{"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)n(r,i)&&(t[i]=r[i])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var i={arraySet:function(t,e,r,n,i){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),i);else for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){var e,r,n,i,o,a;for(n=0,e=0,r=t.length;e<r;e++)n+=t[e].length;for(a=new Uint8Array(n),i=0,e=0,r=t.length;e<r;e++)o=t[e],a.set(o,i),i+=o.length;return a}},o={arraySet:function(t,e,r,n,i){for(var o=0;o<n;o++)t[i+o]=e[r+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,i)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,o))},e.setTyped(r)},6069:t=>{"use strict";t.exports=function(t,e,r,n){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{o=o+(i=i+e[n++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},1619:t=>{"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},2869:t=>{"use strict";var e=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,r,n,i){var o=e,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^r[s])];return-1^t}},405:(t,e,r)=>{"use strict";var n,i=r(4236),o=r(342),a=r(6069),s=r(2869),u=r(8898),c=0,l=4,f=0,h=-2,d=-1,p=1,y=4,g=2,_=8,b=9,m=286,v=30,w=19,E=2*m+1,S=15,R=3,k=258,O=k+R+1,T=42,A=103,I=113,L=666,x=1,N=2,P=3,D=4;function F(t,e){return t.msg=u[e],e}function M(t){return(t<<1)-(t>4?9:0)}function j(t){for(var e=t.length;--e>=0;)t[e]=0}function C(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(i.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function U(t,e){o._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,C(t.strm)}function B(t,e){t.pending_buf[t.pending++]=e}function z(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function q(t,e){var r,n,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-O?t.strstart-(t.w_size-O):0,c=t.window,l=t.w_mask,f=t.prev,h=t.strstart+k,d=c[o+a-1],p=c[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(c[(r=e)+a]===p&&c[r+a-1]===d&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<h);if(n=k-(h-o),o=h-k,n>a){if(t.match_start=e,a=n,n>=s)break;d=c[o+a-1],p=c[o+a]}}}while((e=f[e&l])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function W(t){var e,r,n,o,u,c,l,f,h,d,p=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=p+(p-O)){i.arraySet(t.window,t.window,p,p,0),t.match_start-=p,t.strstart-=p,t.block_start-=p,e=r=t.hash_size;do{n=t.head[--e],t.head[e]=n>=p?n-p:0}while(--r);e=r=p;do{n=t.prev[--e],t.prev[e]=n>=p?n-p:0}while(--r);o+=p}if(0===t.strm.avail_in)break;if(c=t.strm,l=t.window,f=t.strstart+t.lookahead,h=o,d=void 0,(d=c.avail_in)>h&&(d=h),r=0===d?0:(c.avail_in-=d,i.arraySet(l,c.input,c.next_in,d,f),1===c.state.wrap?c.adler=a(c.adler,l,d,f):2===c.state.wrap&&(c.adler=s(c.adler,l,d,f)),c.next_in+=d,c.total_in+=d,d),t.lookahead+=r,t.lookahead+t.insert>=R)for(u=t.strstart-t.insert,t.ins_h=t.window[u],t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[u+R-1])&t.hash_mask,t.prev[u&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=u,u++,t.insert--,!(t.lookahead+t.insert<R)););}while(t.lookahead<O&&0!==t.strm.avail_in)}function H(t,e){for(var r,n;;){if(t.lookahead<O){if(W(t),t.lookahead<O&&e===c)return x;if(0===t.lookahead)break}if(r=0,t.lookahead>=R&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+R-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-O&&(t.match_length=q(t,r)),t.match_length>=R)if(n=o._tr_tally(t,t.strstart-t.match_start,t.match_length-R),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=R){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+R-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(U(t,!1),0===t.strm.avail_out))return x}return t.insert=t.strstart<R-1?t.strstart:R-1,e===l?(U(t,!0),0===t.strm.avail_out?P:D):t.last_lit&&(U(t,!1),0===t.strm.avail_out)?x:N}function G(t,e){for(var r,n,i;;){if(t.lookahead<O){if(W(t),t.lookahead<O&&e===c)return x;if(0===t.lookahead)break}if(r=0,t.lookahead>=R&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+R-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=R-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-O&&(t.match_length=q(t,r),t.match_length<=5&&(t.strategy===p||t.match_length===R&&t.strstart-t.match_start>4096)&&(t.match_length=R-1)),t.prev_length>=R&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-R,n=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-R),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+R-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=R-1,t.strstart++,n&&(U(t,!1),0===t.strm.avail_out))return x}else if(t.match_available){if((n=o._tr_tally(t,0,t.window[t.strstart-1]))&&U(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return x}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<R-1?t.strstart:R-1,e===l?(U(t,!0),0===t.strm.avail_out?P:D):t.last_lit&&(U(t,!1),0===t.strm.avail_out)?x:N}function Z(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i}function V(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*E),this.dyn_dtree=new i.Buf16(2*(2*v+1)),this.bl_tree=new i.Buf16(2*(2*w+1)),j(this.dyn_ltree),j(this.dyn_dtree),j(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(S+1),this.heap=new i.Buf16(2*m+1),j(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*m+1),j(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Y(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=g,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?T:I,t.adler=2===e.wrap?0:1,e.last_flush=c,o._tr_init(e),f):F(t,h)}function K(t){var e,r=Y(t);return r===f&&((e=t.state).window_size=2*e.w_size,j(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=R-1,e.match_available=0,e.ins_h=0),r}function X(t,e,r,n,o,a){if(!t)return h;var s=1;if(e===d&&(e=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),o<1||o>b||r!==_||n<8||n>15||e<0||e>9||a<0||a>y)return F(t,h);8===n&&(n=9);var u=new V;return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+R-1)/R),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=r,K(t)}n=[new Z(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(W(t),0===t.lookahead&&e===c)return x;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,U(t,!1),0===t.strm.avail_out))return x;if(t.strstart-t.block_start>=t.w_size-O&&(U(t,!1),0===t.strm.avail_out))return x}return t.insert=0,e===l?(U(t,!0),0===t.strm.avail_out?P:D):(t.strstart>t.block_start&&(U(t,!1),t.strm.avail_out),x)})),new Z(4,4,8,4,H),new Z(4,5,16,8,H),new Z(4,6,32,32,H),new Z(4,4,16,16,G),new Z(8,16,32,32,G),new Z(8,16,128,128,G),new Z(8,32,128,256,G),new Z(32,128,258,1024,G),new Z(32,258,258,4096,G)],e.deflateInit=function(t,e){return X(t,e,_,15,8,0)},e.deflateInit2=X,e.deflateReset=K,e.deflateResetKeep=Y,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?h:(t.state.gzhead=e,f):h},e.deflate=function(t,e){var r,i,a,u;if(!t||!t.state||e>5||e<0)return t?F(t,h):h;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||i.status===L&&e!==l)return F(t,0===t.avail_out?-5:h);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===T)if(2===i.wrap)t.adler=0,B(i,31),B(i,139),B(i,8),i.gzhead?(B(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),B(i,255&i.gzhead.time),B(i,i.gzhead.time>>8&255),B(i,i.gzhead.time>>16&255),B(i,i.gzhead.time>>24&255),B(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),B(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(B(i,255&i.gzhead.extra.length),B(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(B(i,0),B(i,0),B(i,0),B(i,0),B(i,0),B(i,9===i.level?2:i.strategy>=2||i.level<2?4:0),B(i,3),i.status=I);else{var d=_+(i.w_bits-8<<4)<<8;d|=(i.strategy>=2||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(d|=32),d+=31-d%31,i.status=I,z(i,d),0!==i.strstart&&(z(i,t.adler>>>16),z(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),C(t),a=i.pending,i.pending!==i.pending_buf_size));)B(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),C(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,B(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),C(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,B(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=A)}else i.status=A;if(i.status===A&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&C(t),i.pending+2<=i.pending_buf_size&&(B(i,255&t.adler),B(i,t.adler>>8&255),t.adler=0,i.status=I)):i.status=I),0!==i.pending){if(C(t),0===t.avail_out)return i.last_flush=-1,f}else if(0===t.avail_in&&M(e)<=M(r)&&e!==l)return F(t,-5);if(i.status===L&&0!==t.avail_in)return F(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==c&&i.status!==L){var p=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(W(t),0===t.lookahead)){if(e===c)return x;break}if(t.match_length=0,r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(U(t,!1),0===t.strm.avail_out))return x}return t.insert=0,e===l?(U(t,!0),0===t.strm.avail_out?P:D):t.last_lit&&(U(t,!1),0===t.strm.avail_out)?x:N}(i,e):3===i.strategy?function(t,e){for(var r,n,i,a,s=t.window;;){if(t.lookahead<=k){if(W(t),t.lookahead<=k&&e===c)return x;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=R&&t.strstart>0&&(n=s[i=t.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){a=t.strstart+k;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<a);t.match_length=k-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=R?(r=o._tr_tally(t,1,t.match_length-R),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(U(t,!1),0===t.strm.avail_out))return x}return t.insert=0,e===l?(U(t,!0),0===t.strm.avail_out?P:D):t.last_lit&&(U(t,!1),0===t.strm.avail_out)?x:N}(i,e):n[i.level].func(i,e);if(p!==P&&p!==D||(i.status=L),p===x||p===P)return 0===t.avail_out&&(i.last_flush=-1),f;if(p===N&&(1===e?o._tr_align(i):5!==e&&(o._tr_stored_block(i,0,0,!1),3===e&&(j(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),C(t),0===t.avail_out))return i.last_flush=-1,f}return e!==l?f:i.wrap<=0?1:(2===i.wrap?(B(i,255&t.adler),B(i,t.adler>>8&255),B(i,t.adler>>16&255),B(i,t.adler>>24&255),B(i,255&t.total_in),B(i,t.total_in>>8&255),B(i,t.total_in>>16&255),B(i,t.total_in>>24&255)):(z(i,t.adler>>>16),z(i,65535&t.adler)),C(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?f:1)},e.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==T&&69!==e&&73!==e&&91!==e&&e!==A&&e!==I&&e!==L?F(t,h):(t.state=null,e===I?F(t,-3):f):h},e.deflateSetDictionary=function(t,e){var r,n,o,s,u,c,l,d,p=e.length;if(!t||!t.state)return h;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==T||r.lookahead)return h;for(1===s&&(t.adler=a(t.adler,e,p,0)),r.wrap=0,p>=r.w_size&&(0===s&&(j(r.head),r.strstart=0,r.block_start=0,r.insert=0),d=new i.Buf8(r.w_size),i.arraySet(d,e,p-r.w_size,r.w_size,0),e=d,p=r.w_size),u=t.avail_in,c=t.next_in,l=t.input,t.avail_in=p,t.next_in=0,t.input=e,W(r);r.lookahead>=R;){n=r.strstart,o=r.lookahead-(R-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+R-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--o);r.strstart=n,r.lookahead=R-1,W(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=R-1,r.match_available=0,t.next_in=c,t.input=l,t.avail_in=u,r.wrap=s,f},e.deflateInfo="pako deflate (from Nodeca project)"},4264:t=>{"use strict";t.exports=function(t,e){var r,n,i,o,a,s,u,c,l,f,h,d,p,y,g,_,b,m,v,w,E,S,R,k,O;r=t.state,n=t.next_in,k=t.input,i=n+(t.avail_in-5),o=t.next_out,O=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,f=r.wnext,h=r.window,d=r.hold,p=r.bits,y=r.lencode,g=r.distcode,_=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(d+=k[n++]<<p,p+=8,d+=k[n++]<<p,p+=8),m=y[d&_];e:for(;;){if(d>>>=v=m>>>24,p-=v,0==(v=m>>>16&255))O[o++]=65535&m;else{if(!(16&v)){if(0==(64&v)){m=y[(65535&m)+(d&(1<<v)-1)];continue e}if(32&v){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&m,(v&=15)&&(p<v&&(d+=k[n++]<<p,p+=8),w+=d&(1<<v)-1,d>>>=v,p-=v),p<15&&(d+=k[n++]<<p,p+=8,d+=k[n++]<<p,p+=8),m=g[d&b];r:for(;;){if(d>>>=v=m>>>24,p-=v,!(16&(v=m>>>16&255))){if(0==(64&v)){m=g[(65535&m)+(d&(1<<v)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(E=65535&m,p<(v&=15)&&(d+=k[n++]<<p,(p+=8)<v&&(d+=k[n++]<<p,p+=8)),(E+=d&(1<<v)-1)>u){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=v,p-=v,E>(v=o-a)){if((v=E-v)>l&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=0,R=h,0===f){if(S+=c-v,v<w){w-=v;do{O[o++]=h[S++]}while(--v);S=o-E,R=O}}else if(f<v){if(S+=c+f-v,(v-=f)<w){w-=v;do{O[o++]=h[S++]}while(--v);if(S=0,f<w){w-=v=f;do{O[o++]=h[S++]}while(--v);S=o-E,R=O}}}else if(S+=f-v,v<w){w-=v;do{O[o++]=h[S++]}while(--v);S=o-E,R=O}for(;w>2;)O[o++]=R[S++],O[o++]=R[S++],O[o++]=R[S++],w-=3;w&&(O[o++]=R[S++],w>1&&(O[o++]=R[S++]))}else{S=o-E;do{O[o++]=O[S++],O[o++]=O[S++],O[o++]=O[S++],w-=3}while(w>2);w&&(O[o++]=O[S++],w>1&&(O[o++]=O[S++]))}break}}break}}while(n<i&&o<s);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,t.next_in=n,t.next_out=o,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}},7948:(t,e,r)=>{"use strict";var n=r(4236),i=r(6069),o=r(2869),a=r(4264),s=r(9241),u=1,c=2,l=0,f=-2,h=1,d=12,p=30,y=852,g=592;function _(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function b(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function m(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=h,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(y),e.distcode=e.distdyn=new n.Buf32(g),e.sane=1,e.back=-1,l):f}function v(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,m(t)):f}function w(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?f:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,v(t))):f}function E(t,e){var r,n;return t?(n=new b,t.state=n,n.window=null,(r=w(t,e))!==l&&(t.state=null),r):f}var S,R,k=!0;function O(t){if(k){var e;for(S=new n.Buf32(512),R=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(u,t.lens,0,288,S,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(c,t.lens,0,32,R,0,t.work,{bits:5}),k=!1}t.lencode=S,t.lenbits=9,t.distcode=R,t.distbits=5}function T(t,e,r,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new n.Buf8(a.wsize)),i>=a.wsize?(n.arraySet(a.window,e,r-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),n.arraySet(a.window,e,r-i,o,a.wnext),(i-=o)?(n.arraySet(a.window,e,r-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=v,e.inflateReset2=w,e.inflateResetKeep=m,e.inflateInit=function(t){return E(t,15)},e.inflateInit2=E,e.inflate=function(t,e){var r,y,g,b,m,v,w,E,S,R,k,A,I,L,x,N,P,D,F,M,j,C,U,B,z=0,q=new n.Buf8(4),W=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return f;(r=t.state).mode===d&&(r.mode=13),m=t.next_out,g=t.output,w=t.avail_out,b=t.next_in,y=t.input,v=t.avail_in,E=r.hold,S=r.bits,R=v,k=w,C=l;t:for(;;)switch(r.mode){case h:if(0===r.wrap){r.mode=13;break}for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(2&r.wrap&&35615===E){r.check=0,q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0),E=0,S=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&E)<<8)+(E>>8))%31){t.msg="incorrect header check",r.mode=p;break}if(8!=(15&E)){t.msg="unknown compression method",r.mode=p;break}if(S-=4,j=8+(15&(E>>>=4)),0===r.wbits)r.wbits=j;else if(j>r.wbits){t.msg="invalid window size",r.mode=p;break}r.dmax=1<<j,t.adler=r.check=1,r.mode=512&E?10:d,E=0,S=0;break;case 2:for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(r.flags=E,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=p;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=p;break}r.head&&(r.head.text=E>>8&1),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0)),E=0,S=0,r.mode=3;case 3:for(;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.head&&(r.head.time=E),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,q[2]=E>>>16&255,q[3]=E>>>24&255,r.check=o(r.check,q,4,0)),E=0,S=0,r.mode=4;case 4:for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.head&&(r.head.xflags=255&E,r.head.os=E>>8),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0)),E=0,S=0,r.mode=5;case 5:if(1024&r.flags){for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.length=E,r.head&&(r.head.extra_len=E),512&r.flags&&(q[0]=255&E,q[1]=E>>>8&255,r.check=o(r.check,q,2,0)),E=0,S=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((A=r.length)>v&&(A=v),A&&(r.head&&(j=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,y,b,A,j)),512&r.flags&&(r.check=o(r.check,y,A,b)),v-=A,b+=A,r.length-=A),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===v)break t;A=0;do{j=y[b+A++],r.head&&j&&r.length<65536&&(r.head.name+=String.fromCharCode(j))}while(j&&A<v);if(512&r.flags&&(r.check=o(r.check,y,A,b)),v-=A,b+=A,j)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===v)break t;A=0;do{j=y[b+A++],r.head&&j&&r.length<65536&&(r.head.comment+=String.fromCharCode(j))}while(j&&A<v);if(512&r.flags&&(r.check=o(r.check,y,A,b)),v-=A,b+=A,j)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;S<16;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(E!==(65535&r.check)){t.msg="header crc mismatch",r.mode=p;break}E=0,S=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=d;break;case 10:for(;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}t.adler=r.check=_(E),E=0,S=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=m,t.avail_out=w,t.next_in=b,t.avail_in=v,r.hold=E,r.bits=S,2;t.adler=r.check=1,r.mode=d;case d:if(5===e||6===e)break t;case 13:if(r.last){E>>>=7&S,S-=7&S,r.mode=27;break}for(;S<3;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}switch(r.last=1&E,S-=1,3&(E>>>=1)){case 0:r.mode=14;break;case 1:if(O(r),r.mode=20,6===e){E>>>=2,S-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=p}E>>>=2,S-=2;break;case 14:for(E>>>=7&S,S-=7&S;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if((65535&E)!=(E>>>16^65535)){t.msg="invalid stored block lengths",r.mode=p;break}if(r.length=65535&E,E=0,S=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(A=r.length){if(A>v&&(A=v),A>w&&(A=w),0===A)break t;n.arraySet(g,y,b,A,m),v-=A,b+=A,w-=A,m+=A,r.length-=A;break}r.mode=d;break;case 17:for(;S<14;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(r.nlen=257+(31&E),E>>>=5,S-=5,r.ndist=1+(31&E),E>>>=5,S-=5,r.ncode=4+(15&E),E>>>=4,S-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=p;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;S<3;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.lens[W[r.have++]]=7&E,E>>>=3,S-=3}for(;r.have<19;)r.lens[W[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,U={bits:r.lenbits},C=s(0,r.lens,0,19,r.lencode,0,r.work,U),r.lenbits=U.bits,C){t.msg="invalid code lengths set",r.mode=p;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;N=(z=r.lencode[E&(1<<r.lenbits)-1])>>>16&255,P=65535&z,!((x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(P<16)E>>>=x,S-=x,r.lens[r.have++]=P;else{if(16===P){for(B=x+2;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(E>>>=x,S-=x,0===r.have){t.msg="invalid bit length repeat",r.mode=p;break}j=r.lens[r.have-1],A=3+(3&E),E>>>=2,S-=2}else if(17===P){for(B=x+3;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}S-=x,j=0,A=3+(7&(E>>>=x)),E>>>=3,S-=3}else{for(B=x+7;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}S-=x,j=0,A=11+(127&(E>>>=x)),E>>>=7,S-=7}if(r.have+A>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=p;break}for(;A--;)r.lens[r.have++]=j}}if(r.mode===p)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=p;break}if(r.lenbits=9,U={bits:r.lenbits},C=s(u,r.lens,0,r.nlen,r.lencode,0,r.work,U),r.lenbits=U.bits,C){t.msg="invalid literal/lengths set",r.mode=p;break}if(r.distbits=6,r.distcode=r.distdyn,U={bits:r.distbits},C=s(c,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,U),r.distbits=U.bits,C){t.msg="invalid distances set",r.mode=p;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(v>=6&&w>=258){t.next_out=m,t.avail_out=w,t.next_in=b,t.avail_in=v,r.hold=E,r.bits=S,a(t,k),m=t.next_out,g=t.output,w=t.avail_out,b=t.next_in,y=t.input,v=t.avail_in,E=r.hold,S=r.bits,r.mode===d&&(r.back=-1);break}for(r.back=0;N=(z=r.lencode[E&(1<<r.lenbits)-1])>>>16&255,P=65535&z,!((x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(N&&0==(240&N)){for(D=x,F=N,M=P;N=(z=r.lencode[M+((E&(1<<D+F)-1)>>D)])>>>16&255,P=65535&z,!(D+(x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}E>>>=D,S-=D,r.back+=D}if(E>>>=x,S-=x,r.back+=x,r.length=P,0===N){r.mode=26;break}if(32&N){r.back=-1,r.mode=d;break}if(64&N){t.msg="invalid literal/length code",r.mode=p;break}r.extra=15&N,r.mode=22;case 22:if(r.extra){for(B=r.extra;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.length+=E&(1<<r.extra)-1,E>>>=r.extra,S-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;N=(z=r.distcode[E&(1<<r.distbits)-1])>>>16&255,P=65535&z,!((x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(0==(240&N)){for(D=x,F=N,M=P;N=(z=r.distcode[M+((E&(1<<D+F)-1)>>D)])>>>16&255,P=65535&z,!(D+(x=z>>>24)<=S);){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}E>>>=D,S-=D,r.back+=D}if(E>>>=x,S-=x,r.back+=x,64&N){t.msg="invalid distance code",r.mode=p;break}r.offset=P,r.extra=15&N,r.mode=24;case 24:if(r.extra){for(B=r.extra;S<B;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}r.offset+=E&(1<<r.extra)-1,E>>>=r.extra,S-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=p;break}r.mode=25;case 25:if(0===w)break t;if(A=k-w,r.offset>A){if((A=r.offset-A)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=p;break}A>r.wnext?(A-=r.wnext,I=r.wsize-A):I=r.wnext-A,A>r.length&&(A=r.length),L=r.window}else L=g,I=m-r.offset,A=r.length;A>w&&(A=w),w-=A,r.length-=A;do{g[m++]=L[I++]}while(--A);0===r.length&&(r.mode=21);break;case 26:if(0===w)break t;g[m++]=r.length,w--,r.mode=21;break;case 27:if(r.wrap){for(;S<32;){if(0===v)break t;v--,E|=y[b++]<<S,S+=8}if(k-=w,t.total_out+=k,r.total+=k,k&&(t.adler=r.check=r.flags?o(r.check,g,k,m-k):i(r.check,g,k,m-k)),k=w,(r.flags?E:_(E))!==r.check){t.msg="incorrect data check",r.mode=p;break}E=0,S=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;S<32;){if(0===v)break t;v--,E+=y[b++]<<S,S+=8}if(E!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=p;break}E=0,S=0}r.mode=29;case 29:C=1;break t;case p:C=-3;break t;case 31:return-4;default:return f}return t.next_out=m,t.avail_out=w,t.next_in=b,t.avail_in=v,r.hold=E,r.bits=S,(r.wsize||k!==t.avail_out&&r.mode<p&&(r.mode<27||4!==e))&&T(t,t.output,t.next_out,k-t.avail_out)?(r.mode=31,-4):(R-=t.avail_in,k-=t.avail_out,t.total_in+=R,t.total_out+=k,r.total+=k,r.wrap&&k&&(t.adler=r.check=r.flags?o(r.check,g,k,t.next_out-k):i(r.check,g,k,t.next_out-k)),t.data_type=r.bits+(r.last?64:0)+(r.mode===d?128:0)+(20===r.mode||15===r.mode?256:0),(0===R&&0===k||4===e)&&C===l&&(C=-5),C)},e.inflateEnd=function(t){if(!t||!t.state)return f;var e=t.state;return e.window&&(e.window=null),t.state=null,l},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?f:(r.head=e,e.done=!1,l):f},e.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?f:11===r.mode&&i(1,e,n,0)!==r.check?-3:T(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,l):f},e.inflateInfo="pako inflate (from Nodeca project)"},9241:(t,e,r)=>{"use strict";var n=r(4236),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,u,c,l,f,h){var d,p,y,g,_,b,m,v,w,E=h.bits,S=0,R=0,k=0,O=0,T=0,A=0,I=0,L=0,x=0,N=0,P=null,D=0,F=new n.Buf16(16),M=new n.Buf16(16),j=null,C=0;for(S=0;S<=15;S++)F[S]=0;for(R=0;R<u;R++)F[e[r+R]]++;for(T=E,O=15;O>=1&&0===F[O];O--);if(T>O&&(T=O),0===O)return c[l++]=20971520,c[l++]=20971520,h.bits=1,0;for(k=1;k<O&&0===F[k];k++);for(T<k&&(T=k),L=1,S=1;S<=15;S++)if(L<<=1,(L-=F[S])<0)return-1;if(L>0&&(0===t||1!==O))return-1;for(M[1]=0,S=1;S<15;S++)M[S+1]=M[S]+F[S];for(R=0;R<u;R++)0!==e[r+R]&&(f[M[e[r+R]]++]=R);if(0===t?(P=j=f,b=19):1===t?(P=i,D-=257,j=o,C-=257,b=256):(P=a,j=s,b=-1),N=0,R=0,S=k,_=l,A=T,I=0,y=-1,g=(x=1<<T)-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){m=S-I,f[R]<b?(v=0,w=f[R]):f[R]>b?(v=j[C+f[R]],w=P[D+f[R]]):(v=96,w=0),d=1<<S-I,k=p=1<<A;do{c[_+(N>>I)+(p-=d)]=m<<24|v<<16|w|0}while(0!==p);for(d=1<<S-1;N&d;)d>>=1;if(0!==d?(N&=d-1,N+=d):N=0,R++,0==--F[S]){if(S===O)break;S=e[r+f[R]]}if(S>T&&(N&g)!==y){for(0===I&&(I=T),_+=k,L=1<<(A=S-I);A+I<O&&!((L-=F[A+I])<=0);)A++,L<<=1;if(x+=1<<A,1===t&&x>852||2===t&&x>592)return 1;c[y=N&g]=T<<24|A<<16|_-l|0}}return 0!==N&&(c[_+N]=S-I<<24|64<<16|0),h.bits=T,0}},8898:t=>{"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},342:(t,e,r)=>{"use strict";var n=r(4236);function i(t){for(var e=t.length;--e>=0;)t[e]=0}var o=0,a=256,s=a+1+29,u=30,c=19,l=2*s+1,f=15,h=16,d=256,p=16,y=17,g=18,_=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],b=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],m=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],v=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],w=new Array(2*(s+2));i(w);var E=new Array(2*u);i(E);var S=new Array(512);i(S);var R=new Array(256);i(R);var k=new Array(29);i(k);var O,T,A,I=new Array(u);function L(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length}function x(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function N(t){return t<256?S[t]:S[256+(t>>>7)]}function P(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function D(t,e,r){t.bi_valid>h-r?(t.bi_buf|=e<<t.bi_valid&65535,P(t,t.bi_buf),t.bi_buf=e>>h-t.bi_valid,t.bi_valid+=r-h):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function F(t,e,r){D(t,r[2*e],r[2*e+1])}function M(t,e){var r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1}function j(t,e,r){var n,i,o=new Array(f+1),a=0;for(n=1;n<=f;n++)o[n]=a=a+r[n-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=M(o[s]++,s))}}function C(t){var e;for(e=0;e<s;e++)t.dyn_ltree[2*e]=0;for(e=0;e<u;e++)t.dyn_dtree[2*e]=0;for(e=0;e<c;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*d]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function U(t){t.bi_valid>8?P(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function B(t,e,r,n){var i=2*e,o=2*r;return t[i]<t[o]||t[i]===t[o]&&n[e]<=n[r]}function z(t,e,r){for(var n=t.heap[r],i=r<<1;i<=t.heap_len&&(i<t.heap_len&&B(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!B(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n}function q(t,e,r){var n,i,o,s,u=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*u]<<8|t.pending_buf[t.d_buf+2*u+1],i=t.pending_buf[t.l_buf+u],u++,0===n?F(t,i,e):(F(t,(o=R[i])+a+1,e),0!==(s=_[o])&&D(t,i-=k[o],s),F(t,o=N(--n),r),0!==(s=b[o])&&D(t,n-=I[o],s))}while(u<t.last_lit);F(t,d,e)}function W(t,e){var r,n,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,c=-1;for(t.heap_len=0,t.heap_max=l,r=0;r<u;r++)0!==o[2*r]?(t.heap[++t.heap_len]=c=r,t.depth[r]=0):o[2*r+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=c<2?++c:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=c,r=t.heap_len>>1;r>=1;r--)z(t,o,r);i=u;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],z(t,o,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,o[2*i]=o[2*r]+o[2*n],t.depth[i]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,o[2*r+1]=o[2*n+1]=i,t.heap[1]=i++,z(t,o,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,i,o,a,s,u=e.dyn_tree,c=e.max_code,h=e.stat_desc.static_tree,d=e.stat_desc.has_stree,p=e.stat_desc.extra_bits,y=e.stat_desc.extra_base,g=e.stat_desc.max_length,_=0;for(o=0;o<=f;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<l;r++)(o=u[2*u[2*(n=t.heap[r])+1]+1]+1)>g&&(o=g,_++),u[2*n+1]=o,n>c||(t.bl_count[o]++,a=0,n>=y&&(a=p[n-y]),s=u[2*n],t.opt_len+=s*(o+a),d&&(t.static_len+=s*(h[2*n+1]+a)));if(0!==_){do{for(o=g-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[g]--,_-=2}while(_>0);for(o=g;0!==o;o--)for(n=t.bl_count[o];0!==n;)(i=t.heap[--r])>c||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),n--)}}(t,e),j(o,c,t.bl_count)}function H(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=e[2*(n+1)+1],++s<u&&i===a||(s<c?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[2*p]++):s<=10?t.bl_tree[2*y]++:t.bl_tree[2*g]++,s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4))}function G(t,e,r){var n,i,o=-1,a=e[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(i=a,a=e[2*(n+1)+1],!(++s<u&&i===a)){if(s<c)do{F(t,i,t.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(F(t,i,t.bl_tree),s--),F(t,p,t.bl_tree),D(t,s-3,2)):s<=10?(F(t,y,t.bl_tree),D(t,s-3,3)):(F(t,g,t.bl_tree),D(t,s-11,7));s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4)}}i(I);var Z=!1;function V(t,e,r,i){D(t,(o<<1)+(i?1:0),3),function(t,e,r,i){U(t),P(t,r),P(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}e._tr_init=function(t){Z||(function(){var t,e,r,n,i,o=new Array(f+1);for(r=0,n=0;n<28;n++)for(k[n]=r,t=0;t<1<<_[n];t++)R[r++]=n;for(R[r-1]=n,i=0,n=0;n<16;n++)for(I[n]=i,t=0;t<1<<b[n];t++)S[i++]=n;for(i>>=7;n<u;n++)for(I[n]=i<<7,t=0;t<1<<b[n]-7;t++)S[256+i++]=n;for(e=0;e<=f;e++)o[e]=0;for(t=0;t<=143;)w[2*t+1]=8,t++,o[8]++;for(;t<=255;)w[2*t+1]=9,t++,o[9]++;for(;t<=279;)w[2*t+1]=7,t++,o[7]++;for(;t<=287;)w[2*t+1]=8,t++,o[8]++;for(j(w,s+1,o),t=0;t<u;t++)E[2*t+1]=5,E[2*t]=M(t,5);O=new L(w,_,a+1,s,f),T=new L(E,b,0,u,f),A=new L(new Array(0),m,0,c,7)}(),Z=!0),t.l_desc=new x(t.dyn_ltree,O),t.d_desc=new x(t.dyn_dtree,T),t.bl_desc=new x(t.bl_tree,A),t.bi_buf=0,t.bi_valid=0,C(t)},e._tr_stored_block=V,e._tr_flush_block=function(t,e,r,n){var i,o,s=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<a;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),W(t,t.l_desc),W(t,t.d_desc),s=function(t){var e;for(H(t,t.dyn_ltree,t.l_desc.max_code),H(t,t.dyn_dtree,t.d_desc.max_code),W(t,t.bl_desc),e=c-1;e>=3&&0===t.bl_tree[2*v[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),i=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=i&&(i=o)):i=o=r+5,r+4<=i&&-1!==e?V(t,e,r,n):4===t.strategy||o===i?(D(t,2+(n?1:0),3),q(t,w,E)):(D(t,4+(n?1:0),3),function(t,e,r,n){var i;for(D(t,e-257,5),D(t,r-1,5),D(t,n-4,4),i=0;i<n;i++)D(t,t.bl_tree[2*v[i]+1],3);G(t,t.dyn_ltree,e-1),G(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),q(t,t.dyn_ltree,t.dyn_dtree)),C(t),n&&U(t)},e._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(R[r]+a+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){D(t,2,3),F(t,d,w),function(t){16===t.bi_valid?(P(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},2292:t=>{"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},4286:(t,e,r)=>{var n=r(1624),i=r(778),o=r(2840),a=r(978),s=function(){},u=/^v?\.0/.test(n.version),c=function(t){return"function"==typeof t},l=function(t){t()},f=function(t,e){return t.pipe(e)};t.exports=function(){var t,e=Array.prototype.slice.call(arguments),r=c(e[e.length-1]||s)&&e.pop()||s;if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new Error("pump requires two streams per minimum");var n=e.map((function(f,h){var d=h<e.length-1;return function(t,e,r,n){n=i(n);var l=!1;t.on("close",(function(){l=!0})),o(t,{readable:e,writable:r},(function(t){if(t)return n(t);l=!0,n()}));var f=!1;return function(e){if(!l&&!f)return f=!0,function(t){return!!u&&!!a&&(t instanceof(a.ReadStream||s)||t instanceof(a.WriteStream||s))&&c(t.close)}(t)?t.close(s):function(t){return t.setHeader&&c(t.abort)}(t)?t.abort():c(t.destroy)?t.destroy():void n(e||new Error("stream was destroyed"))}}(f,d,h>0,(function(e){t||(t=e),e&&n.forEach(l),d||(n.forEach(l),r(t))}))}));return e.reduce(f)}},2587:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,r,n,i){r=r||"&",n=n||"=";var o={};if("string"!=typeof t||0===t.length)return o;var a=/\+/g;t=t.split(r);var s=1e3;i&&"number"==typeof i.maxKeys&&(s=i.maxKeys);var u=t.length;s>0&&u>s&&(u=s);for(var c=0;c<u;++c){var l,f,h,d,p=t[c].replace(a,"%20"),y=p.indexOf(n);y>=0?(l=p.substr(0,y),f=p.substr(y+1)):(l=p,f=""),h=decodeURIComponent(l),d=decodeURIComponent(f),e(o,h)?Array.isArray(o[h])?o[h].push(d):o[h]=[o[h],d]:o[h]=d}return o}},2361:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,r,n,i){return r=r||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(i){var o=encodeURIComponent(e(i))+n;return Array.isArray(t[i])?t[i].map((function(t){return o+encodeURIComponent(e(t))})).join(r):o+encodeURIComponent(e(t[i]))})).join(r):i?encodeURIComponent(e(i))+n+encodeURIComponent(e(t)):""}},7673:(t,e,r)=>{"use strict";e.decode=e.parse=r(2587),e.encode=e.stringify=r(2361)},9509:(t,e,r)=>{var n=r(8609),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function a(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},a.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},2830:(t,e,r)=>{t.exports=i;var n=r(7187).EventEmitter;function i(){n.call(this)}r(5717)(i,n),i.Readable=r(6577),i.Writable=r(323),i.Duplex=r(8656),i.Transform=r(4473),i.PassThrough=r(2366),i.finished=r(1086),i.pipeline=r(6472),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",s),r.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(l(),0===n.listenerCount(this,"error"))throw t}function l(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",u),r.removeListener("error",c),t.removeListener("error",c),r.removeListener("end",l),r.removeListener("close",l),t.removeListener("close",l)}return r.on("error",c),t.on("error",c),r.on("end",l),r.on("close",l),t.on("close",l),t.emit("pipe",r),t}},8106:t=>{"use strict";var e={};function r(t,r,n){n||(n=Error);var i=function(t){var e,n;function i(e,n,i){return t.call(this,function(t,e,n){return"string"==typeof r?r:r(t,e,n)}(e,n,i))||this}return n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=t,e[t]=i}function n(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}r("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(t,e,r){var i,o,a,s,u;if("string"==typeof e&&(o="not ",e.substr(0,o.length)===o)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))a="The ".concat(t," ").concat(i," ").concat(n(e,"type"));else{var c=("number"!=typeof u&&(u=0),u+".".length>(s=t).length||-1===s.indexOf(".",u)?"argument":"property");a='The "'.concat(t,'" ').concat(c," ").concat(i," ").concat(n(e,"type"))}return a+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},8656:(t,e,r)=>{"use strict";var n=r(1624),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=l;var o=r(6577),a=r(323);r(5717)(l,o);for(var s=i(a.prototype),u=0;u<s.length;u++){var c=s[u];l.prototype[c]||(l.prototype[c]=a.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);o.call(this,t),a.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",f)))}function f(){this._writableState.ended||n.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},2366:(t,e,r)=>{"use strict";t.exports=i;var n=r(4473);function i(t){if(!(this instanceof i))return new i(t);n.call(this,t)}r(5717)(i,n),i.prototype._transform=function(t,e,r){r(null,t)}},6577:(t,e,r)=>{"use strict";var n,i=r(1624);t.exports=k,k.ReadableState=R,r(7187).EventEmitter;var o,a=function(t,e){return t.listeners(e).length},s=r(3630),u=r(8609).Buffer,c=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},l=r(964);o=l&&l.debuglog?l.debuglog("stream"):function(){};var f,h,d,p=r(9686),y=r(1029),g=r(94).getHighWaterMark,_=r(8106).q,b=_.ERR_INVALID_ARG_TYPE,m=_.ERR_STREAM_PUSH_AFTER_EOF,v=_.ERR_METHOD_NOT_IMPLEMENTED,w=_.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(k,s);var E=y.errorOrDestroy,S=["error","close","destroy","pause","resume"];function R(t,e,i){n=n||r(8656),t=t||{},"boolean"!=typeof i&&(i=e instanceof n),this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=g(this,t,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(f||(f=r(2553).s),this.decoder=new f(t.encoding),this.encoding=t.encoding)}function k(t){if(n=n||r(8656),!(this instanceof k))return new k(t);var e=this instanceof n;this._readableState=new R(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),s.call(this)}function O(t,e,r,n,i){o("readableAddChunk",e);var a,s=t._readableState;if(null===e)s.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?L(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,x(t)))}}(t,s);else if(i||(a=function(t,e){var r,n;return n=e,u.isBuffer(n)||n instanceof c||"string"==typeof e||void 0===e||t.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],e)),r}(s,e)),a)E(t,a);else if(s.objectMode||e&&e.length>0)if("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),n)s.endEmitted?E(t,new w):T(t,s,e,!0);else if(s.ended)E(t,new m);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?T(t,s,e,!1):N(t,s)):T(t,s,e,!1)}else n||(s.reading=!1,N(t,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function T(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&L(t)),N(t,e)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),k.prototype.destroy=y.destroy,k.prototype._undestroy=y.undestroy,k.prototype._destroy=function(t,e){e(t)},k.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=u.from(t,e),e=""),r=!0),O(this,t,e,!1,r)},k.prototype.unshift=function(t){return O(this,t,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(t){f||(f=r(2553).s);var e=new f(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=e.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var A=1073741824;function I(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=A?t=A:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function L(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,i.nextTick(x,t))}function x(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function N(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(o("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function D(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function F(t){o("readable nexttick read 0"),t.read(0)}function M(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function C(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function U(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,i.nextTick(B,e,t))}function B(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function z(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}k.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?U(this):L(this),null;if(0===(t=I(t,e))&&e.ended)return 0===e.length&&U(this),null;var n,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=I(r,e))),null===(n=t>0?C(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&U(this)),null!==n&&this.emit("data",n),n},k.prototype._read=function(t){E(this,new v("_read()"))},k.prototype.pipe=function(t,e){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=t;break;case 1:n.pipes=[n.pipes,t];break;default:n.pipes.push(t)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,e);var s=e&&!1===e.end||t===i.stdout||t===i.stderr?y:u;function u(){o("onend"),t.end()}n.endEmitted?i.nextTick(s):r.once("end",s),t.on("unpipe",(function e(i,a){o("onunpipe"),i===r&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,o("cleanup"),t.removeListener("close",d),t.removeListener("finish",p),t.removeListener("drain",c),t.removeListener("error",h),t.removeListener("unpipe",e),r.removeListener("end",u),r.removeListener("end",y),r.removeListener("data",f),l=!0,!n.awaitDrain||t._writableState&&!t._writableState.needDrain||c())}));var c=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,j(t))}}(r);t.on("drain",c);var l=!1;function f(e){o("ondata");var i=t.write(e);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===t||n.pipesCount>1&&-1!==z(n.pipes,t))&&!l&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function h(e){o("onerror",e),y(),t.removeListener("error",h),0===a(t,"error")&&E(t,e)}function d(){t.removeListener("finish",p),y()}function p(){o("onfinish"),t.removeListener("close",d),y()}function y(){o("unpipe"),r.unpipe(t)}return r.on("data",f),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",h),t.once("close",d),t.once("finish",p),t.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),t},k.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=z(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},k.prototype.on=function(t,e){var r=s.prototype.on.call(this,t,e),n=this._readableState;return"data"===t?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===t&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?L(this):n.reading||i.nextTick(F,this))),r},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(t,e){var r=s.prototype.removeListener.call(this,t,e);return"readable"===t&&i.nextTick(D,this),r},k.prototype.removeAllListeners=function(t){var e=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||i.nextTick(D,this),e},k.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(M,t,e))}(this,t)),t.paused=!1,this},k.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var a=0;a<S.length;a++)t.on(S[a],this.emit.bind(this,S[a]));return this._read=function(e){o("wrapped _read",e),n&&(n=!1,t.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=r(828)),h(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),k._fromList=C,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(t,e){return void 0===d&&(d=r(1265)),d(k,t,e)})},4473:(t,e,r)=>{"use strict";t.exports=l;var n=r(8106).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,a=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r(8656);function c(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);u.call(this,t),this._transformState={afterTransform:c.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",f)}function f(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(e,r){h(t,e,r)}))}function h(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new s;if(t._transformState.transforming)throw new a;return t.push(null)}r(5717)(l,u),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,r){r(new i("_transform()"))},l.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},323:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(undefined),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}t.exports=k,k.WritableState=R;var a,s={deprecate:r(4927)},u=r(3630),c=r(8609).Buffer,l=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},f=r(1029),h=r(94).getHighWaterMark,d=r(8106).q,p=d.ERR_INVALID_ARG_TYPE,y=d.ERR_METHOD_NOT_IMPLEMENTED,g=d.ERR_MULTIPLE_CALLBACK,_=d.ERR_STREAM_CANNOT_PIPE,b=d.ERR_STREAM_DESTROYED,m=d.ERR_STREAM_NULL_VALUES,v=d.ERR_STREAM_WRITE_AFTER_END,w=d.ERR_UNKNOWN_ENCODING,E=f.errorOrDestroy;function S(){}function R(t,e,a){n=n||r(8656),t=t||{},"boolean"!=typeof a&&(a=e instanceof n),this.objectMode=!!t.objectMode,a&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=h(this,t,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new g;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,o){--e.pendingcb,r?(i.nextTick(o,n),i.nextTick(x,t,e),t._writableState.errorEmitted=!0,E(t,n)):(o(n),t._writableState.errorEmitted=!0,E(t,n),x(t,e))}(t,r,n,e,o);else{var a=I(r)||t.destroyed;a||r.corked||r.bufferProcessing||!r.bufferedRequest||A(t,r),n?i.nextTick(T,t,r,a,o):T(t,r,a,o)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function k(t){var e=this instanceof(n=n||r(8656));if(!e&&!a.call(k,this))return new k(t);this._writableState=new R(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),u.call(this)}function O(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new b("write")):r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function T(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),x(t,e)}function A(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),a=e.corkedRequestsFree;a.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,O(t,e,!0,e.length,i,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,f=r.callback;if(O(t,e,!1,e.objectMode?1:c.length,c,l,f),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function I(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function L(t,e){t._final((function(r){e.pendingcb--,r&&E(t,r),e.prefinished=!0,t.emit("prefinish"),x(t,e)}))}function x(t,e){var r=I(e);if(r&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,i.nextTick(L,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var n=t._readableState;(!n||n.autoDestroy&&n.endEmitted)&&t.destroy()}return r}r(5717)(k,u),R.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(R.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(t){return!!a.call(this,t)||this===k&&t&&t._writableState instanceof R}})):a=function(t){return t instanceof this},k.prototype.pipe=function(){E(this,new _)},k.prototype.write=function(t,e,r){var n,o=this._writableState,a=!1,s=!o.objectMode&&(n=t,c.isBuffer(n)||n instanceof l);return s&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(r=e,e=null),s?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(t,e){var r=new v;E(t,r),i.nextTick(e,r)}(this,r):(s||function(t,e,r,n){var o;return null===r?o=new m:"string"==typeof r||e.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(t,o),i.nextTick(n,o),!1)}(this,o,t,r))&&(o.pendingcb++,a=function(t,e,r,n,i,o){if(!r){var a=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,r)),e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=e.objectMode?1:n.length;e.length+=s;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else O(t,e,!1,s,n,i,o);return u}(this,o,s,t,e,r)),a},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||A(this,t))},k.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new w(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(t,e,r){r(new y("_write()"))},k.prototype._writev=null,k.prototype.end=function(t,e,r){var n=this._writableState;return"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,r){e.ending=!0,x(t,e),r&&(e.finished?i.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,n,r),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),k.prototype.destroy=f.destroy,k.prototype._undestroy=f.undestroy,k.prototype._destroy=function(t,e){e(t)}},828:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var a=r(1086),s=Symbol("lastResolve"),u=Symbol("lastReject"),c=Symbol("error"),l=Symbol("ended"),f=Symbol("lastPromise"),h=Symbol("handlePromise"),d=Symbol("stream");function p(t,e){return{value:t,done:e}}function y(t){var e=t[s];if(null!==e){var r=t[d].read();null!==r&&(t[f]=null,t[s]=null,t[u]=null,e(p(r,!1)))}}function g(t){i.nextTick(y,t)}var _=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((o(n={get stream(){return this[d]},next:function(){var t=this,e=this[c];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(p(void 0,!0));if(this[d].destroyed)return new Promise((function(e,r){i.nextTick((function(){t[c]?r(t[c]):e(p(void 0,!0))}))}));var r,n=this[f];if(n)r=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(p(void 0,!0)):e[h](r,n)}),n)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[h])}return this[f]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var t=this;return new Promise((function(e,r){t[d].destroy(null,(function(t){t?r(t):e(p(void 0,!0))}))}))})),n),_);t.exports=function(t){var e,r=Object.create(b,(o(e={},d,{value:t,writable:!0}),o(e,s,{value:null,writable:!0}),o(e,u,{value:null,writable:!0}),o(e,c,{value:null,writable:!0}),o(e,l,{value:t._readableState.endEmitted,writable:!0}),o(e,h,{value:function(t,e){var n=r[d].read();n?(r[f]=null,r[s]=null,r[u]=null,t(p(n,!1))):(r[s]=t,r[u]=e)},writable:!0}),e));return r[f]=null,a(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=r[u];return null!==e&&(r[f]=null,r[s]=null,r[u]=null,e(t)),void(r[c]=t)}var n=r[s];null!==n&&(r[f]=null,r[s]=null,r[u]=null,n(p(void 0,!0))),r[l]=!0})),t.on("readable",g.bind(null,r)),r}},9686:(t,e,r)=>{"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}var u=r(8609).Buffer,c=r(9862).inspect,l=c&&c.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r;return e=t,(r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return u.alloc(0);for(var e,r,n,i=u.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,r=i,n=a,u.prototype.copy.call(e,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?n+=i:n+=i.slice(0,t),0==(t-=o)){o===i.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=u.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var i=r.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,e}},{key:l,value:function(t,e){return c(this,i(i({},e),{},{depth:0,customInspect:!1}))}}])&&a(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}()},1029:(t,e,r)=>{"use strict";var n=r(1624);function i(t,e){a(t,e),o(t)}function o(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function a(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,s=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return s||u?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(a,this,t)):n.nextTick(a,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,t)):n.nextTick(i,r,t):e?(n.nextTick(o,r),e(t)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e)}}},1086:(t,e,r)=>{"use strict";var n=r(8106).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}t.exports=function t(e,r,o){if("function"==typeof r)return t(e,null,r);r||(r={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];t.apply(this,n)}}}(o||i);var a=r.readable||!1!==r.readable&&e.readable,s=r.writable||!1!==r.writable&&e.writable,u=function(){e.writable||l()},c=e._writableState&&e._writableState.finished,l=function(){s=!1,c=!0,a||o.call(e)},f=e._readableState&&e._readableState.endEmitted,h=function(){a=!1,f=!0,s||o.call(e)},d=function(t){o.call(e,t)},p=function(){var t;return a&&!f?(e._readableState&&e._readableState.ended||(t=new n),o.call(e,t)):s&&!c?(e._writableState&&e._writableState.ended||(t=new n),o.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",p),e.req?y():e.on("request",y)):s&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",h),e.on("finish",l),!1!==r.error&&e.on("error",d),e.on("close",p),function(){e.removeListener("complete",l),e.removeListener("abort",p),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",l),e.removeListener("end",h),e.removeListener("error",d),e.removeListener("close",p)}}},1265:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},6472:(t,e,r)=>{"use strict";var n,i=r(8106).q,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(t){if(t)throw t}function u(t){t()}function c(t,e){return t.pipe(e)}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var l,f=function(t){return t.length?"function"!=typeof t[t.length-1]?s:t.pop():s}(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new o("streams");var h=e.map((function(t,i){var o=i<e.length-1;return function(t,e,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var s=!1;t.on("close",(function(){s=!0})),void 0===n&&(n=r(1086)),n(t,{readable:e,writable:i},(function(t){if(t)return o(t);s=!0,o()}));var u=!1;return function(e){if(!s&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void o(e||new a("pipe"))}}(t,o,i>0,(function(t){l||(l=t),t&&h.forEach(u),o||(h.forEach(u),f(l))}))}));return e.reduce(c)}},94:(t,e,r)=>{"use strict";var n=r(8106).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,r,i){var o=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},3630:(t,e,r)=>{t.exports=r(7187).EventEmitter},8501:(t,e,r)=>{var n=r(1989),i=r(5676),o=r(7529),a=r(584),s=r(8575),u=e;u.request=function(t,e){t="string"==typeof t?s.parse(t):o(t);var r=-1===global.location.protocol.search(/^https?:$/)?"http:":"",i=t.protocol||r,a=t.hostname||t.host,u=t.port,c=t.path||"/";a&&-1!==a.indexOf(":")&&(a="["+a+"]"),t.url=(a?i+"//"+a:"")+(u?":"+u:"")+c,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var l=new n(t);return e&&l.on("response",e),l},u.get=function(t,e){var r=u.request(t,e);return r.end(),r},u.ClientRequest=n,u.IncomingMessage=i.IncomingMessage,u.Agent=function(){},u.Agent.defaultMaxSockets=4,u.globalAgent=new u.Agent,u.STATUS_CODES=a,u.METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"]},8725:(t,e)=>{var r;function n(){if(void 0!==r)return r;if(global.XMLHttpRequest){r=new global.XMLHttpRequest;try{r.open("GET",global.XDomainRequest?"/":"https://example.com")}catch(t){r=null}}else r=null;return r}function i(t){var e=n();if(!e)return!1;try{return e.responseType=t,e.responseType===t}catch(t){}return!1}function o(t){return"function"==typeof t}e.fetch=o(global.fetch)&&o(global.ReadableStream),e.writableStream=o(global.WritableStream),e.abortController=o(global.AbortController),e.arraybuffer=e.fetch||i("arraybuffer"),e.msstream=!e.fetch&&i("ms-stream"),e.mozchunkedarraybuffer=!e.fetch&&i("moz-chunked-arraybuffer"),e.overrideMimeType=e.fetch||!!n()&&o(n().overrideMimeType),r=null},1989:(t,e,r)=>{var n=r(9649),i=r(1624),o=r(8725),a=r(5717),s=r(5676),u=r(925),c=s.IncomingMessage,l=s.readyStates,f=t.exports=function(t){var e,r=this;u.Writable.call(r),r._opts=t,r._body=[],r._headers={},t.auth&&r.setHeader("Authorization","Basic "+n.from(t.auth).toString("base64")),Object.keys(t.headers).forEach((function(e){r.setHeader(e,t.headers[e])}));var i=!0;if("disable-fetch"===t.mode||"requestTimeout"in t&&!o.abortController)i=!1,e=!0;else if("prefer-streaming"===t.mode)e=!1;else if("allow-wrong-content-type"===t.mode)e=!o.overrideMimeType;else{if(t.mode&&"default"!==t.mode&&"prefer-fast"!==t.mode)throw new Error("Invalid value for opts.mode");e=!0}r._mode=function(t,e){return o.fetch&&e?"fetch":o.mozchunkedarraybuffer?"moz-chunked-arraybuffer":o.msstream?"ms-stream":o.arraybuffer&&t?"arraybuffer":"text"}(e,i),r._fetchTimer=null,r._socketTimeout=null,r._socketTimer=null,r.on("finish",(function(){r._onFinish()}))};a(f,u.Writable),f.prototype.setHeader=function(t,e){var r=t.toLowerCase();-1===h.indexOf(r)&&(this._headers[r]={name:t,value:e})},f.prototype.getHeader=function(t){var e=this._headers[t.toLowerCase()];return e?e.value:null},f.prototype.removeHeader=function(t){delete this._headers[t.toLowerCase()]},f.prototype._onFinish=function(){var t=this;if(!t._destroyed){var e=t._opts;"timeout"in e&&0!==e.timeout&&t.setTimeout(e.timeout);var r=t._headers,n=null;"GET"!==e.method&&"HEAD"!==e.method&&(n=new Blob(t._body,{type:(r["content-type"]||{}).value||""}));var a=[];if(Object.keys(r).forEach((function(t){var e=r[t].name,n=r[t].value;Array.isArray(n)?n.forEach((function(t){a.push([e,t])})):a.push([e,n])})),"fetch"===t._mode){var s=null;if(o.abortController){var u=new AbortController;s=u.signal,t._fetchAbortController=u,"requestTimeout"in e&&0!==e.requestTimeout&&(t._fetchTimer=global.setTimeout((function(){t.emit("requestTimeout"),t._fetchAbortController&&t._fetchAbortController.abort()}),e.requestTimeout))}global.fetch(t._opts.url,{method:t._opts.method,headers:a,body:n||void 0,mode:"cors",credentials:e.withCredentials?"include":"same-origin",signal:s}).then((function(e){t._fetchResponse=e,t._resetTimers(!1),t._connect()}),(function(e){t._resetTimers(!0),t._destroyed||t.emit("error",e)}))}else{var c=t._xhr=new global.XMLHttpRequest;try{c.open(t._opts.method,t._opts.url,!0)}catch(e){return void i.nextTick((function(){t.emit("error",e)}))}"responseType"in c&&(c.responseType=t._mode),"withCredentials"in c&&(c.withCredentials=!!e.withCredentials),"text"===t._mode&&"overrideMimeType"in c&&c.overrideMimeType("text/plain; charset=x-user-defined"),"requestTimeout"in e&&(c.timeout=e.requestTimeout,c.ontimeout=function(){t.emit("requestTimeout")}),a.forEach((function(t){c.setRequestHeader(t[0],t[1])})),t._response=null,c.onreadystatechange=function(){switch(c.readyState){case l.LOADING:case l.DONE:t._onXHRProgress()}},"moz-chunked-arraybuffer"===t._mode&&(c.onprogress=function(){t._onXHRProgress()}),c.onerror=function(){t._destroyed||(t._resetTimers(!0),t.emit("error",new Error("XHR error")))};try{c.send(n)}catch(e){return void i.nextTick((function(){t.emit("error",e)}))}}}},f.prototype._onXHRProgress=function(){var t=this;t._resetTimers(!1),function(t){try{var e=t.status;return null!==e&&0!==e}catch(t){return!1}}(t._xhr)&&!t._destroyed&&(t._response||t._connect(),t._response._onXHRProgress(t._resetTimers.bind(t)))},f.prototype._connect=function(){var t=this;t._destroyed||(t._response=new c(t._xhr,t._fetchResponse,t._mode,t._resetTimers.bind(t)),t._response.on("error",(function(e){t.emit("error",e)})),t.emit("response",t._response))},f.prototype._write=function(t,e,r){this._body.push(t),r()},f.prototype._resetTimers=function(t){var e=this;global.clearTimeout(e._socketTimer),e._socketTimer=null,t?(global.clearTimeout(e._fetchTimer),e._fetchTimer=null):e._socketTimeout&&(e._socketTimer=global.setTimeout((function(){e.emit("timeout")}),e._socketTimeout))},f.prototype.abort=f.prototype.destroy=function(t){var e=this;e._destroyed=!0,e._resetTimers(!0),e._response&&(e._response._destroyed=!0),e._xhr?e._xhr.abort():e._fetchAbortController&&e._fetchAbortController.abort(),t&&e.emit("error",t)},f.prototype.end=function(t,e,r){"function"==typeof t&&(r=t,t=void 0),u.Writable.prototype.end.call(this,t,e,r)},f.prototype.setTimeout=function(t,e){var r=this;e&&r.once("timeout",e),r._socketTimeout=t,r._resetTimers(!1)},f.prototype.flushHeaders=function(){},f.prototype.setNoDelay=function(){},f.prototype.setSocketKeepAlive=function(){};var h=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","via"]},5676:(t,e,r)=>{var n=r(1624),i=r(9649),o=r(8725),a=r(5717),s=r(925),u=e.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},c=e.IncomingMessage=function(t,e,r,a){var u=this;if(s.Readable.call(u),u._mode=r,u.headers={},u.rawHeaders=[],u.trailers={},u.rawTrailers=[],u.on("end",(function(){n.nextTick((function(){u.emit("close")}))})),"fetch"===r){if(u._fetchResponse=e,u.url=e.url,u.statusCode=e.status,u.statusMessage=e.statusText,e.headers.forEach((function(t,e){u.headers[e.toLowerCase()]=t,u.rawHeaders.push(e,t)})),o.writableStream){var c=new WritableStream({write:function(t){return a(!1),new Promise((function(e,r){u._destroyed?r():u.push(i.from(t))?e():u._resumeFetch=e}))},close:function(){a(!0),u._destroyed||u.push(null)},abort:function(t){a(!0),u._destroyed||u.emit("error",t)}});try{return void e.body.pipeTo(c).catch((function(t){a(!0),u._destroyed||u.emit("error",t)}))}catch(t){}}var l=e.body.getReader();!function t(){l.read().then((function(e){u._destroyed||(a(e.done),e.done?u.push(null):(u.push(i.from(e.value)),t()))})).catch((function(t){a(!0),u._destroyed||u.emit("error",t)}))}()}else if(u._xhr=t,u._pos=0,u.url=t.responseURL,u.statusCode=t.status,u.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach((function(t){var e=t.match(/^([^:]+):\s*(.*)/);if(e){var r=e[1].toLowerCase();"set-cookie"===r?(void 0===u.headers[r]&&(u.headers[r]=[]),u.headers[r].push(e[2])):void 0!==u.headers[r]?u.headers[r]+=", "+e[2]:u.headers[r]=e[2],u.rawHeaders.push(e[1],e[2])}})),u._charset="x-user-defined",!o.overrideMimeType){var f=u.rawHeaders["mime-type"];if(f){var h=f.match(/;\s*charset=([^;])(;|$)/);h&&(u._charset=h[1].toLowerCase())}u._charset||(u._charset="utf-8")}};a(c,s.Readable),c.prototype._read=function(){var t=this._resumeFetch;t&&(this._resumeFetch=null,t())},c.prototype._onXHRProgress=function(t){var e=this,r=e._xhr,n=null;switch(e._mode){case"text":if((n=r.responseText).length>e._pos){var o=n.substr(e._pos);if("x-user-defined"===e._charset){for(var a=i.alloc(o.length),s=0;s<o.length;s++)a[s]=255&o.charCodeAt(s);e.push(a)}else e.push(o,e._charset);e._pos=n.length}break;case"arraybuffer":if(r.readyState!==u.DONE||!r.response)break;n=r.response,e.push(i.from(new Uint8Array(n)));break;case"moz-chunked-arraybuffer":if(n=r.response,r.readyState!==u.LOADING||!n)break;e.push(i.from(new Uint8Array(n)));break;case"ms-stream":if(n=r.response,r.readyState!==u.LOADING)break;var c=new global.MSStreamReader;c.onprogress=function(){c.result.byteLength>e._pos&&(e.push(i.from(new Uint8Array(c.result.slice(e._pos)))),e._pos=c.result.byteLength)},c.onload=function(){t(!0),e.push(null)},c.readAsArrayBuffer(n)}e._xhr.readyState===u.DONE&&"ms-stream"!==e._mode&&(t(!0),e.push(null))}},7303:t=>{"use strict";var e={};function r(t,r,n){n||(n=Error);var i=function(t){var e,n;function i(e,n,i){return t.call(this,function(t,e,n){return"string"==typeof r?r:r(t,e,n)}(e,n,i))||this}return n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=t,e[t]=i}function n(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}r("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(t,e,r){var i,o,a,s,u;if("string"==typeof e&&(o="not ",e.substr(0,o.length)===o)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))a="The ".concat(t," ").concat(i," ").concat(n(e,"type"));else{var c=("number"!=typeof u&&(u=0),u+".".length>(s=t).length||-1===s.indexOf(".",u)?"argument":"property");a='The "'.concat(t,'" ').concat(c," ").concat(i," ").concat(n(e,"type"))}return a+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},9560:(t,e,r)=>{"use strict";var n=r(1624),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=l;var o=r(4002),a=r(3313);r(5717)(l,o);for(var s=i(a.prototype),u=0;u<s.length;u++){var c=s[u];l.prototype[c]||(l.prototype[c]=a.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);o.call(this,t),a.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",f)))}function f(){this._writableState.ended||n.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},4842:(t,e,r)=>{"use strict";t.exports=i;var n=r(1846);function i(t){if(!(this instanceof i))return new i(t);n.call(this,t)}r(5717)(i,n),i.prototype._transform=function(t,e,r){r(null,t)}},4002:(t,e,r)=>{"use strict";var n,i=r(1624);t.exports=k,k.ReadableState=R,r(7187).EventEmitter;var o,a=function(t,e){return t.listeners(e).length},s=r(1463),u=r(8609).Buffer,c=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},l=r(3646);o=l&&l.debuglog?l.debuglog("stream"):function(){};var f,h,d,p=r(6641),y=r(3369),g=r(624).getHighWaterMark,_=r(7303).q,b=_.ERR_INVALID_ARG_TYPE,m=_.ERR_STREAM_PUSH_AFTER_EOF,v=_.ERR_METHOD_NOT_IMPLEMENTED,w=_.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(k,s);var E=y.errorOrDestroy,S=["error","close","destroy","pause","resume"];function R(t,e,i){n=n||r(9560),t=t||{},"boolean"!=typeof i&&(i=e instanceof n),this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=g(this,t,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(f||(f=r(2553).s),this.decoder=new f(t.encoding),this.encoding=t.encoding)}function k(t){if(n=n||r(9560),!(this instanceof k))return new k(t);var e=this instanceof n;this._readableState=new R(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),s.call(this)}function O(t,e,r,n,i){o("readableAddChunk",e);var a,s=t._readableState;if(null===e)s.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?L(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,x(t)))}}(t,s);else if(i||(a=function(t,e){var r,n;return n=e,u.isBuffer(n)||n instanceof c||"string"==typeof e||void 0===e||t.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],e)),r}(s,e)),a)E(t,a);else if(s.objectMode||e&&e.length>0)if("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),n)s.endEmitted?E(t,new w):T(t,s,e,!0);else if(s.ended)E(t,new m);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?T(t,s,e,!1):N(t,s)):T(t,s,e,!1)}else n||(s.reading=!1,N(t,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function T(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&L(t)),N(t,e)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),k.prototype.destroy=y.destroy,k.prototype._undestroy=y.undestroy,k.prototype._destroy=function(t,e){e(t)},k.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=u.from(t,e),e=""),r=!0),O(this,t,e,!1,r)},k.prototype.unshift=function(t){return O(this,t,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(t){f||(f=r(2553).s);var e=new f(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=e.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var A=1073741824;function I(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=A?t=A:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function L(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,i.nextTick(x,t))}function x(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function N(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(o("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function D(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function F(t){o("readable nexttick read 0"),t.read(0)}function M(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function C(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function U(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,i.nextTick(B,e,t))}function B(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function z(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}k.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?U(this):L(this),null;if(0===(t=I(t,e))&&e.ended)return 0===e.length&&U(this),null;var n,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=I(r,e))),null===(n=t>0?C(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&U(this)),null!==n&&this.emit("data",n),n},k.prototype._read=function(t){E(this,new v("_read()"))},k.prototype.pipe=function(t,e){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=t;break;case 1:n.pipes=[n.pipes,t];break;default:n.pipes.push(t)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,e);var s=e&&!1===e.end||t===i.stdout||t===i.stderr?y:u;function u(){o("onend"),t.end()}n.endEmitted?i.nextTick(s):r.once("end",s),t.on("unpipe",(function e(i,a){o("onunpipe"),i===r&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,o("cleanup"),t.removeListener("close",d),t.removeListener("finish",p),t.removeListener("drain",c),t.removeListener("error",h),t.removeListener("unpipe",e),r.removeListener("end",u),r.removeListener("end",y),r.removeListener("data",f),l=!0,!n.awaitDrain||t._writableState&&!t._writableState.needDrain||c())}));var c=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,j(t))}}(r);t.on("drain",c);var l=!1;function f(e){o("ondata");var i=t.write(e);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===t||n.pipesCount>1&&-1!==z(n.pipes,t))&&!l&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function h(e){o("onerror",e),y(),t.removeListener("error",h),0===a(t,"error")&&E(t,e)}function d(){t.removeListener("finish",p),y()}function p(){o("onfinish"),t.removeListener("close",d),y()}function y(){o("unpipe"),r.unpipe(t)}return r.on("data",f),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",h),t.once("close",d),t.once("finish",p),t.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),t},k.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=z(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},k.prototype.on=function(t,e){var r=s.prototype.on.call(this,t,e),n=this._readableState;return"data"===t?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===t&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?L(this):n.reading||i.nextTick(F,this))),r},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(t,e){var r=s.prototype.removeListener.call(this,t,e);return"readable"===t&&i.nextTick(D,this),r},k.prototype.removeAllListeners=function(t){var e=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||i.nextTick(D,this),e},k.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(M,t,e))}(this,t)),t.paused=!1,this},k.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var a=0;a<S.length;a++)t.on(S[a],this.emit.bind(this,S[a]));return this._read=function(e){o("wrapped _read",e),n&&(n=!1,t.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=r(6819)),h(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),k._fromList=C,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(t,e){return void 0===d&&(d=r(4162)),d(k,t,e)})},1846:(t,e,r)=>{"use strict";t.exports=l;var n=r(7303).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,a=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r(9560);function c(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);u.call(this,t),this._transformState={afterTransform:c.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",f)}function f(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(e,r){h(t,e,r)}))}function h(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new s;if(t._transformState.transforming)throw new a;return t.push(null)}r(5717)(l,u),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,r){r(new i("_transform()"))},l.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},3313:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(undefined),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}t.exports=k,k.WritableState=R;var a,s={deprecate:r(4927)},u=r(1463),c=r(8609).Buffer,l=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},f=r(3369),h=r(624).getHighWaterMark,d=r(7303).q,p=d.ERR_INVALID_ARG_TYPE,y=d.ERR_METHOD_NOT_IMPLEMENTED,g=d.ERR_MULTIPLE_CALLBACK,_=d.ERR_STREAM_CANNOT_PIPE,b=d.ERR_STREAM_DESTROYED,m=d.ERR_STREAM_NULL_VALUES,v=d.ERR_STREAM_WRITE_AFTER_END,w=d.ERR_UNKNOWN_ENCODING,E=f.errorOrDestroy;function S(){}function R(t,e,a){n=n||r(9560),t=t||{},"boolean"!=typeof a&&(a=e instanceof n),this.objectMode=!!t.objectMode,a&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=h(this,t,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new g;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,o){--e.pendingcb,r?(i.nextTick(o,n),i.nextTick(x,t,e),t._writableState.errorEmitted=!0,E(t,n)):(o(n),t._writableState.errorEmitted=!0,E(t,n),x(t,e))}(t,r,n,e,o);else{var a=I(r)||t.destroyed;a||r.corked||r.bufferProcessing||!r.bufferedRequest||A(t,r),n?i.nextTick(T,t,r,a,o):T(t,r,a,o)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function k(t){var e=this instanceof(n=n||r(9560));if(!e&&!a.call(k,this))return new k(t);this._writableState=new R(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),u.call(this)}function O(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new b("write")):r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function T(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),x(t,e)}function A(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),a=e.corkedRequestsFree;a.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,O(t,e,!0,e.length,i,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,f=r.callback;if(O(t,e,!1,e.objectMode?1:c.length,c,l,f),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function I(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function L(t,e){t._final((function(r){e.pendingcb--,r&&E(t,r),e.prefinished=!0,t.emit("prefinish"),x(t,e)}))}function x(t,e){var r=I(e);if(r&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,i.nextTick(L,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var n=t._readableState;(!n||n.autoDestroy&&n.endEmitted)&&t.destroy()}return r}r(5717)(k,u),R.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(R.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(t){return!!a.call(this,t)||this===k&&t&&t._writableState instanceof R}})):a=function(t){return t instanceof this},k.prototype.pipe=function(){E(this,new _)},k.prototype.write=function(t,e,r){var n,o=this._writableState,a=!1,s=!o.objectMode&&(n=t,c.isBuffer(n)||n instanceof l);return s&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(r=e,e=null),s?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(t,e){var r=new v;E(t,r),i.nextTick(e,r)}(this,r):(s||function(t,e,r,n){var o;return null===r?o=new m:"string"==typeof r||e.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(t,o),i.nextTick(n,o),!1)}(this,o,t,r))&&(o.pendingcb++,a=function(t,e,r,n,i,o){if(!r){var a=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,r)),e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=e.objectMode?1:n.length;e.length+=s;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else O(t,e,!1,s,n,i,o);return u}(this,o,s,t,e,r)),a},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||A(this,t))},k.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new w(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(t,e,r){r(new y("_write()"))},k.prototype._writev=null,k.prototype.end=function(t,e,r){var n=this._writableState;return"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,r){e.ending=!0,x(t,e),r&&(e.finished?i.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,n,r),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),k.prototype.destroy=f.destroy,k.prototype._undestroy=f.undestroy,k.prototype._destroy=function(t,e){e(t)}},6819:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var a=r(5467),s=Symbol("lastResolve"),u=Symbol("lastReject"),c=Symbol("error"),l=Symbol("ended"),f=Symbol("lastPromise"),h=Symbol("handlePromise"),d=Symbol("stream");function p(t,e){return{value:t,done:e}}function y(t){var e=t[s];if(null!==e){var r=t[d].read();null!==r&&(t[f]=null,t[s]=null,t[u]=null,e(p(r,!1)))}}function g(t){i.nextTick(y,t)}var _=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((o(n={get stream(){return this[d]},next:function(){var t=this,e=this[c];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(p(void 0,!0));if(this[d].destroyed)return new Promise((function(e,r){i.nextTick((function(){t[c]?r(t[c]):e(p(void 0,!0))}))}));var r,n=this[f];if(n)r=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(p(void 0,!0)):e[h](r,n)}),n)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[h])}return this[f]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var t=this;return new Promise((function(e,r){t[d].destroy(null,(function(t){t?r(t):e(p(void 0,!0))}))}))})),n),_);t.exports=function(t){var e,r=Object.create(b,(o(e={},d,{value:t,writable:!0}),o(e,s,{value:null,writable:!0}),o(e,u,{value:null,writable:!0}),o(e,c,{value:null,writable:!0}),o(e,l,{value:t._readableState.endEmitted,writable:!0}),o(e,h,{value:function(t,e){var n=r[d].read();n?(r[f]=null,r[s]=null,r[u]=null,t(p(n,!1))):(r[s]=t,r[u]=e)},writable:!0}),e));return r[f]=null,a(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=r[u];return null!==e&&(r[f]=null,r[s]=null,r[u]=null,e(t)),void(r[c]=t)}var n=r[s];null!==n&&(r[f]=null,r[s]=null,r[u]=null,n(p(void 0,!0))),r[l]=!0})),t.on("readable",g.bind(null,r)),r}},6641:(t,e,r)=>{"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}var u=r(8609).Buffer,c=r(1408).inspect,l=c&&c.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r;return e=t,(r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return u.alloc(0);for(var e,r,n,i=u.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,r=i,n=a,u.prototype.copy.call(e,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?n+=i:n+=i.slice(0,t),0==(t-=o)){o===i.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=u.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var i=r.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,e}},{key:l,value:function(t,e){return c(this,i(i({},e),{},{depth:0,customInspect:!1}))}}])&&a(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}()},3369:(t,e,r)=>{"use strict";var n=r(1624);function i(t,e){a(t,e),o(t)}function o(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function a(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,s=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return s||u?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(a,this,t)):n.nextTick(a,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,t)):n.nextTick(i,r,t):e?(n.nextTick(o,r),e(t)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e)}}},5467:(t,e,r)=>{"use strict";var n=r(7303).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}t.exports=function t(e,r,o){if("function"==typeof r)return t(e,null,r);r||(r={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];t.apply(this,n)}}}(o||i);var a=r.readable||!1!==r.readable&&e.readable,s=r.writable||!1!==r.writable&&e.writable,u=function(){e.writable||l()},c=e._writableState&&e._writableState.finished,l=function(){s=!1,c=!0,a||o.call(e)},f=e._readableState&&e._readableState.endEmitted,h=function(){a=!1,f=!0,s||o.call(e)},d=function(t){o.call(e,t)},p=function(){var t;return a&&!f?(e._readableState&&e._readableState.ended||(t=new n),o.call(e,t)):s&&!c?(e._writableState&&e._writableState.ended||(t=new n),o.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",p),e.req?y():e.on("request",y)):s&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",h),e.on("finish",l),!1!==r.error&&e.on("error",d),e.on("close",p),function(){e.removeListener("complete",l),e.removeListener("abort",p),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",l),e.removeListener("end",h),e.removeListener("error",d),e.removeListener("close",p)}}},4162:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},9689:(t,e,r)=>{"use strict";var n,i=r(7303).q,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(t){if(t)throw t}function u(t){t()}function c(t,e){return t.pipe(e)}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var l,f=function(t){return t.length?"function"!=typeof t[t.length-1]?s:t.pop():s}(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new o("streams");var h=e.map((function(t,i){var o=i<e.length-1;return function(t,e,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var s=!1;t.on("close",(function(){s=!0})),void 0===n&&(n=r(5467)),n(t,{readable:e,writable:i},(function(t){if(t)return o(t);s=!0,o()}));var u=!1;return function(e){if(!s&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void o(e||new a("pipe"))}}(t,o,i>0,(function(t){l||(l=t),t&&h.forEach(u),o||(h.forEach(u),f(l))}))}));return e.reduce(c)}},624:(t,e,r)=>{"use strict";var n=r(7303).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,r,i){var o=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},1463:(t,e,r)=>{t.exports=r(7187).EventEmitter},925:(t,e,r)=>{(e=t.exports=r(4002)).Stream=e,e.Readable=e,e.Writable=r(3313),e.Duplex=r(9560),e.Transform=r(1846),e.PassThrough=r(4842),e.finished=r(5467),e.pipeline=r(9689)},2553:(t,e,r)=>{"use strict";var n=r(9509).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=l,this.end=f,e=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function l(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.s=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=a(e[n]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--n<r||-2===i?0:(i=a(e[n]))>=0?(i>0&&(t.lastNeed=i-2),i):--n<r||-2===i?0:(i=a(e[n]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},6420:(t,e,r)=>{var n=r(1624),i=r(9019),o=r(3871),a=r(4286),s=r(2986),u=r(978),c=r(1679),l="win32"===r(7435).platform(),f=function(){},h=function(t){return t},d=l?function(t){return t.replace(/\\/g,"/").replace(/[:?<>|]/g,"_")}:h,p=function(t,e){return function(r){r.name=r.name.split("/").slice(e).join("/");var n=r.linkname;return n&&("link"===r.type||c.isAbsolute(n))&&(r.linkname=n.split("/").slice(e).join("/")),t(r)}};e.pack=function(t,e){t||(t="."),e||(e={});var r=e.fs||u,n=e.ignore||e.filter||f,i=e.map||f,s=e.mapStream||h,l=function(t,e,r,n,i,o){var a=i||["."];return function(i){if(!a.length)return i();var s=a.shift(),u=c.join(r,s);e.call(t,u,(function(e,l){return e?i(e):l.isDirectory()?void t.readdir(u,(function(t,e){if(t)return i(t);o&&e.sort();for(var u=0;u<e.length;u++)n(c.join(r,s,e[u]))||a.push(c.join(s,e[u]));i(null,s,l)})):i(null,s,l)}))}}(r,e.dereference?r.stat:r.lstat,t,n,e.entries,e.sort),g=!1!==e.strict,_="number"==typeof e.umask?~e.umask:~y(),b="number"==typeof e.dmode?e.dmode:0,m="number"==typeof e.fmode?e.fmode:0,v=e.pack||o.pack(),w=e.finish||f;e.strip&&(i=p(i,e.strip)),e.readable&&(b|=parseInt(555,8),m|=parseInt(444,8)),e.writable&&(b|=parseInt(333,8),m|=parseInt(222,8));var E=function(n,o,u){if(n)return v.destroy(n);if(!o)return!1!==e.finalize&&v.finalize(),w(v);if(u.isSocket())return S();var l={name:d(o),mode:(u.mode|(u.isDirectory()?b:m))&_,mtime:u.mtime,size:u.size,type:"file",uid:u.uid,gid:u.gid};if(u.isDirectory())return l.size=0,l.type="directory",l=i(l)||l,v.entry(l,S);if(u.isSymbolicLink())return l.size=0,l.type="symlink",function(e,n){r.readlink(c.join(t,e),(function(t,e){if(t)return v.destroy(t);n.linkname=d(e),v.entry(n,S)}))}(o,l=i(l)||l);if(l=i(l)||l,!u.isFile())return g?v.destroy(new Error("unsupported type for "+o)):S();var f=v.entry(l,S);if(f){var h=s(r.createReadStream(c.join(t,o),{start:0,end:l.size>0?l.size-1:l.size}),l);h.on("error",(function(t){f.destroy(t)})),a(h,f)}},S=function(t){if(t)return v.destroy(t);l(E)};return S(),v};var y=function(){return n.umask?n.umask():0};function g(t,e,r,n){if(e===r)return n(null,!0);t.lstat(e,(function(i,o){return i&&"ENOENT"!==i.code?n(i):i||o.isDirectory()?g(t,c.join(e,".."),r,n):void n(null,!1)}))}function _(t,e,r){s(t,{fs:e.fs},(function(t,n){!t&&n&&e.own?i(n,e.uid,e.gid,r):r(t)}))}e.extract=function(t,e){t||(t="."),e||(e={});var r=e.fs||u,i=e.ignore||e.filter||f,s=e.map||f,b=e.mapStream||h,m=!1!==e.chown&&!l&&0===(n.getuid?n.getuid():-1),v=e.extract||o.extract(),w=[],E=new Date,S="number"==typeof e.umask?~e.umask:~y(),R="number"==typeof e.dmode?e.dmode:0,k="number"==typeof e.fmode?e.fmode:0,O=!1!==e.strict;e.strip&&(s=p(s,e.strip)),e.readable&&(R|=parseInt(555,8),k|=parseInt(444,8)),e.writable&&(R|=parseInt(333,8),k|=parseInt(222,8));var T=function(t,e){for(var n,i;(n=(i=w).length?i[i.length-1]:null)&&t.slice(0,n[0].length)!==n[0];)w.pop();if(!n)return e();r.utimes(n[0],E,n[1],e)};return v.on("entry",(function(n,o,u){(n=s(n)||n).name=d(n.name);var f=c.join(t,c.join("/",n.name));if(i(f,n))return o.resume(),u();var h=function(t){if(t)return u(t);!function(t,n,i){!1===e.utimes?i():"directory"===n.type?r.utimes(t,E,n.mtime,i):"symlink"===n.type?T(t,i):r.utimes(t,E,n.mtime,(function(e){if(e)return i(e);T(t,i)}))}(f,n,(function(t){return t?u(t):l?u():void function(t,e,n){var i="symlink"===e.type,o=i?r.lchmod:r.chmod,a=i?r.lchown:r.chown;if(!o)return n();var s=(e.mode|("directory"===e.type?R:k))&S;function u(e){return e?n(e):o?void o.call(r,t,s,n):n()}a&&m?a.call(r,t,e.uid,e.gid,u):u(null)}(f,n,u)}))},p=function(){var t=r.createWriteStream(f),e=b(o,n);t.on("error",(function(t){e.destroy(t)})),a(e,t,(function(e){if(e)return u(e);t.on("close",h)}))};if("directory"===n.type)return w.push([f,n.mtime]),_(f,{fs:r,own:m,uid:n.uid,gid:n.gid},h);var y=c.dirname(f);g(r,y,c.join(t,"."),(function(i,a){return i?u(i):a?void _(y,{fs:r,own:m,uid:n.uid,gid:n.gid},(function(i){if(i)return u(i);switch(n.type){case"file":return p();case"link":return function(){if(l)return u();r.unlink(f,(function(){var i=c.join(t,c.join("/",n.linkname));r.link(i,f,(function(t){if(t&&"EPERM"===t.code&&e.hardlinkAsFilesFallback)return o=r.createReadStream(i),p();h(t)}))}))}();case"symlink":return function(){if(l)return u();r.unlink(f,(function(){r.symlink(n.linkname,f,h)}))}()}if(O)return u(new Error("unsupported type for "+f+" ("+n.type+")"));o.resume(),u()})):u(new Error(y+" is not a valid path"))}))})),e.finish&&v.on("finish",e.finish),v}},4028:(t,e,r)=>{var n=r(9539),i=r(22),o=r(8054),a=r(4948).Writable,s=r(4948).PassThrough,u=function(){},c=function(t){return(t&=511)&&512-t},l=function(t,e){this._parent=t,this.offset=e,s.call(this,{autoDestroy:!1})};n.inherits(l,s),l.prototype.destroy=function(t){this._parent.destroy(t)};var f=function(t){if(!(this instanceof f))return new f(t);a.call(this,t),t=t||{},this._offset=0,this._buffer=i(),this._missing=0,this._partial=!1,this._onparse=u,this._header=null,this._stream=null,this._overflow=null,this._cb=null,this._locked=!1,this._destroyed=!1,this._pax=null,this._paxGlobal=null,this._gnuLongPath=null,this._gnuLongLinkPath=null;var e=this,r=e._buffer,n=function(){e._continue()},s=function(t){if(e._locked=!1,t)return e.destroy(t);e._stream||n()},h=function(){e._stream=null;var t=c(e._header.size);t?e._parse(t,d):e._parse(512,b),e._locked||n()},d=function(){e._buffer.consume(c(e._header.size)),e._parse(512,b),n()},p=function(){var t=e._header.size;e._paxGlobal=o.decodePax(r.slice(0,t)),r.consume(t),h()},y=function(){var t=e._header.size;e._pax=o.decodePax(r.slice(0,t)),e._paxGlobal&&(e._pax=Object.assign({},e._paxGlobal,e._pax)),r.consume(t),h()},g=function(){var n=e._header.size;this._gnuLongPath=o.decodeLongPath(r.slice(0,n),t.filenameEncoding),r.consume(n),h()},_=function(){var n=e._header.size;this._gnuLongLinkPath=o.decodeLongPath(r.slice(0,n),t.filenameEncoding),r.consume(n),h()},b=function(){var i,a=e._offset;try{i=e._header=o.decode(r.slice(0,512),t.filenameEncoding,t.allowUnknownFormat)}catch(t){e.emit("error",t)}return r.consume(512),i?"gnu-long-path"===i.type?(e._parse(i.size,g),void n()):"gnu-long-link-path"===i.type?(e._parse(i.size,_),void n()):"pax-global-header"===i.type?(e._parse(i.size,p),void n()):"pax-header"===i.type?(e._parse(i.size,y),void n()):(e._gnuLongPath&&(i.name=e._gnuLongPath,e._gnuLongPath=null),e._gnuLongLinkPath&&(i.linkname=e._gnuLongLinkPath,e._gnuLongLinkPath=null),e._pax&&(e._header=i=function(t,e){return e.path&&(t.name=e.path),e.linkpath&&(t.linkname=e.linkpath),e.size&&(t.size=parseInt(e.size,10)),t.pax=e,t}(i,e._pax),e._pax=null),e._locked=!0,i.size&&"directory"!==i.type?(e._stream=new l(e,a),e.emit("entry",i,e._stream,s),e._parse(i.size,h),void n()):(e._parse(512,b),void e.emit("entry",i,function(t,e){var r=new l(t,e);return r.end(),r}(e,a),s))):(e._parse(512,b),void n())};this._onheader=b,this._parse(512,b)};n.inherits(f,a),f.prototype.destroy=function(t){this._destroyed||(this._destroyed=!0,t&&this.emit("error",t),this.emit("close"),this._stream&&this._stream.emit("close"))},f.prototype._parse=function(t,e){this._destroyed||(this._offset+=t,this._missing=t,e===this._onheader&&(this._partial=!1),this._onparse=e)},f.prototype._continue=function(){if(!this._destroyed){var t=this._cb;this._cb=u,this._overflow?this._write(this._overflow,void 0,t):t()}},f.prototype._write=function(t,e,r){if(!this._destroyed){var n=this._stream,i=this._buffer,o=this._missing;if(t.length&&(this._partial=!0),t.length<o)return this._missing-=t.length,this._overflow=null,n?n.write(t,r):(i.append(t),r());this._cb=r,this._missing=0;var a=null;t.length>o&&(a=t.slice(o),t=t.slice(0,o)),n?n.end(t):i.append(t),this._overflow=a,this._onparse()}},f.prototype._final=function(t){if(this._partial)return this.destroy(new Error("Unexpected end of data"));t()},t.exports=f},8054:(t,e,r)=>{var n=r(9649),i=n.alloc,o="0".charCodeAt(0),a=n.from("ustar\0","binary"),s=n.from("00","binary"),u=n.from("ustar ","binary"),c=n.from(" \0","binary"),l=parseInt("7777",8),f=function(t,e,r,n){for(;r<n;r++)if(t[r]===e)return r;return n},h=function(t){for(var e=256,r=0;r<148;r++)e+=t[r];for(var n=156;n<512;n++)e+=t[n];return e},d=function(t,e){return(t=t.toString(8)).length>e?"7777777777777777777".slice(0,e)+" ":"0000000000000000000".slice(0,e-t.length)+t+" "},p=function(t,e,r){if(128&(t=t.slice(e,e+r))[e=0])return function(t){var e;if(128===t[0])e=!0;else{if(255!==t[0])return null;e=!1}for(var r=[],n=t.length-1;n>0;n--){var i=t[n];e?r.push(i):r.push(255-i)}var o=0,a=r.length;for(n=0;n<a;n++)o+=r[n]*Math.pow(256,n);return e?o:-1*o}(t);for(;e<t.length&&32===t[e];)e++;for(var n=(i=f(t,32,e,t.length),o=t.length,a=t.length,"number"!=typeof i?a:(i=~~i)>=o?o:i>=0||(i+=o)>=0?i:0);e<n&&0===t[e];)e++;return n===e?0:parseInt(t.slice(e,n).toString(),8);var i,o,a},y=function(t,e,r,n){return t.slice(e,f(t,0,e,e+r)).toString(n)},g=function(t){var e=n.byteLength(t),r=Math.floor(Math.log(e)/Math.log(10))+1;return e+r>=Math.pow(10,r)&&r++,e+r+t};e.decodeLongPath=function(t,e){return y(t,0,t.length,e)},e.encodePax=function(t){var e="";t.name&&(e+=g(" path="+t.name+"\n")),t.linkname&&(e+=g(" linkpath="+t.linkname+"\n"));var r=t.pax;if(r)for(var i in r)e+=g(" "+i+"="+r[i]+"\n");return n.from(e)},e.decodePax=function(t){for(var e={};t.length;){for(var r=0;r<t.length&&32!==t[r];)r++;var n=parseInt(t.slice(0,r).toString(),10);if(!n)return e;var i=t.slice(r+1,n-1).toString(),o=i.indexOf("=");if(-1===o)return e;e[i.slice(0,o)]=i.slice(o+1),t=t.slice(n)}return e},e.encode=function(t){var e=i(512),r=t.name,u="";if(5===t.typeflag&&"/"!==r[r.length-1]&&(r+="/"),n.byteLength(r)!==r.length)return null;for(;n.byteLength(r)>100;){var c=r.indexOf("/");if(-1===c)return null;u+=u?"/"+r.slice(0,c):r.slice(0,c),r=r.slice(c+1)}return n.byteLength(r)>100||n.byteLength(u)>155||t.linkname&&n.byteLength(t.linkname)>100?null:(e.write(r),e.write(d(t.mode&l,6),100),e.write(d(t.uid,6),108),e.write(d(t.gid,6),116),e.write(d(t.size,11),124),e.write(d(t.mtime.getTime()/1e3|0,11),136),e[156]=o+function(t){switch(t){case"file":return 0;case"link":return 1;case"symlink":return 2;case"character-device":return 3;case"block-device":return 4;case"directory":return 5;case"fifo":return 6;case"contiguous-file":return 7;case"pax-header":return 72}return 0}(t.type),t.linkname&&e.write(t.linkname,157),a.copy(e,257),s.copy(e,263),t.uname&&e.write(t.uname,265),t.gname&&e.write(t.gname,297),e.write(d(t.devmajor||0,6),329),e.write(d(t.devminor||0,6),337),u&&e.write(u,345),e.write(d(h(e),6),148),e)},e.decode=function(t,e,r){var n=0===t[156]?0:t[156]-o,i=y(t,0,100,e),s=p(t,100,8),l=p(t,108,8),f=p(t,116,8),d=p(t,124,12),g=p(t,136,12),_=function(t){switch(t){case 0:return"file";case 1:return"link";case 2:return"symlink";case 3:return"character-device";case 4:return"block-device";case 5:return"directory";case 6:return"fifo";case 7:return"contiguous-file";case 72:return"pax-header";case 55:return"pax-global-header";case 27:return"gnu-long-link-path";case 28:case 30:return"gnu-long-path"}return null}(n),b=0===t[157]?null:y(t,157,100,e),m=y(t,265,32),v=y(t,297,32),w=p(t,329,8),E=p(t,337,8),S=h(t);if(256===S)return null;if(S!==p(t,148,8))throw new Error("Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?");if(0===a.compare(t,257,263))t[345]&&(i=y(t,345,155,e)+"/"+i);else if(0===u.compare(t,257,263)&&0===c.compare(t,263,265));else if(!r)throw new Error("Invalid tar header: unknown format.");return 0===n&&i&&"/"===i[i.length-1]&&(n=5),{name:i,mode:s,uid:l,gid:f,size:d,mtime:new Date(1e3*g),type:_,linkname:b,uname:m,gname:v,devmajor:w,devminor:E}}},3871:(t,e,r)=>{e.extract=r(4028),e.pack=r(809)},1830:t=>{"use strict";var e={};function r(t,r,n){n||(n=Error);var i=function(t){var e,n;function i(e,n,i){return t.call(this,function(t,e,n){return"string"==typeof r?r:r(t,e,n)}(e,n,i))||this}return n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=t,e[t]=i}function n(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}r("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(t,e,r){var i,o,a,s,u;if("string"==typeof e&&(o="not ",e.substr(0,o.length)===o)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))a="The ".concat(t," ").concat(i," ").concat(n(e,"type"));else{var c=("number"!=typeof u&&(u=0),u+".".length>(s=t).length||-1===s.indexOf(".",u)?"argument":"property");a='The "'.concat(t,'" ').concat(c," ").concat(i," ").concat(n(e,"type"))}return a+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},6143:(t,e,r)=>{"use strict";var n=r(1624),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=l;var o=r(5311),a=r(9805);r(5717)(l,o);for(var s=i(a.prototype),u=0;u<s.length;u++){var c=s[u];l.prototype[c]||(l.prototype[c]=a.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);o.call(this,t),a.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",f)))}function f(){this._writableState.ended||n.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},1329:(t,e,r)=>{"use strict";t.exports=i;var n=r(6356);function i(t){if(!(this instanceof i))return new i(t);n.call(this,t)}r(5717)(i,n),i.prototype._transform=function(t,e,r){r(null,t)}},5311:(t,e,r)=>{"use strict";var n,i=r(1624);t.exports=k,k.ReadableState=R,r(7187).EventEmitter;var o,a=function(t,e){return t.listeners(e).length},s=r(1631),u=r(8609).Buffer,c=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},l=r(9545);o=l&&l.debuglog?l.debuglog("stream"):function(){};var f,h,d,p=r(9151),y=r(3771),g=r(2402).getHighWaterMark,_=r(1830).q,b=_.ERR_INVALID_ARG_TYPE,m=_.ERR_STREAM_PUSH_AFTER_EOF,v=_.ERR_METHOD_NOT_IMPLEMENTED,w=_.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(k,s);var E=y.errorOrDestroy,S=["error","close","destroy","pause","resume"];function R(t,e,i){n=n||r(6143),t=t||{},"boolean"!=typeof i&&(i=e instanceof n),this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=g(this,t,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(f||(f=r(2553).s),this.decoder=new f(t.encoding),this.encoding=t.encoding)}function k(t){if(n=n||r(6143),!(this instanceof k))return new k(t);var e=this instanceof n;this._readableState=new R(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),s.call(this)}function O(t,e,r,n,i){o("readableAddChunk",e);var a,s=t._readableState;if(null===e)s.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?L(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,x(t)))}}(t,s);else if(i||(a=function(t,e){var r,n;return n=e,u.isBuffer(n)||n instanceof c||"string"==typeof e||void 0===e||t.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],e)),r}(s,e)),a)E(t,a);else if(s.objectMode||e&&e.length>0)if("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),n)s.endEmitted?E(t,new w):T(t,s,e,!0);else if(s.ended)E(t,new m);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?T(t,s,e,!1):N(t,s)):T(t,s,e,!1)}else n||(s.reading=!1,N(t,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function T(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&L(t)),N(t,e)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),k.prototype.destroy=y.destroy,k.prototype._undestroy=y.undestroy,k.prototype._destroy=function(t,e){e(t)},k.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=u.from(t,e),e=""),r=!0),O(this,t,e,!1,r)},k.prototype.unshift=function(t){return O(this,t,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(t){f||(f=r(2553).s);var e=new f(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=e.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var A=1073741824;function I(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=A?t=A:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function L(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,i.nextTick(x,t))}function x(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function N(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(o("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function D(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function F(t){o("readable nexttick read 0"),t.read(0)}function M(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function C(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function U(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,i.nextTick(B,e,t))}function B(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function z(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}k.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?U(this):L(this),null;if(0===(t=I(t,e))&&e.ended)return 0===e.length&&U(this),null;var n,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=I(r,e))),null===(n=t>0?C(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&U(this)),null!==n&&this.emit("data",n),n},k.prototype._read=function(t){E(this,new v("_read()"))},k.prototype.pipe=function(t,e){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=t;break;case 1:n.pipes=[n.pipes,t];break;default:n.pipes.push(t)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,e);var s=e&&!1===e.end||t===i.stdout||t===i.stderr?y:u;function u(){o("onend"),t.end()}n.endEmitted?i.nextTick(s):r.once("end",s),t.on("unpipe",(function e(i,a){o("onunpipe"),i===r&&a&&!1===a.hasUnpiped&&(a.hasUnpiped=!0,o("cleanup"),t.removeListener("close",d),t.removeListener("finish",p),t.removeListener("drain",c),t.removeListener("error",h),t.removeListener("unpipe",e),r.removeListener("end",u),r.removeListener("end",y),r.removeListener("data",f),l=!0,!n.awaitDrain||t._writableState&&!t._writableState.needDrain||c())}));var c=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,j(t))}}(r);t.on("drain",c);var l=!1;function f(e){o("ondata");var i=t.write(e);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===t||n.pipesCount>1&&-1!==z(n.pipes,t))&&!l&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function h(e){o("onerror",e),y(),t.removeListener("error",h),0===a(t,"error")&&E(t,e)}function d(){t.removeListener("finish",p),y()}function p(){o("onfinish"),t.removeListener("close",d),y()}function y(){o("unpipe"),r.unpipe(t)}return r.on("data",f),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",h),t.once("close",d),t.once("finish",p),t.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),t},k.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var a=z(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},k.prototype.on=function(t,e){var r=s.prototype.on.call(this,t,e),n=this._readableState;return"data"===t?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===t&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?L(this):n.reading||i.nextTick(F,this))),r},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(t,e){var r=s.prototype.removeListener.call(this,t,e);return"readable"===t&&i.nextTick(D,this),r},k.prototype.removeAllListeners=function(t){var e=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||i.nextTick(D,this),e},k.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(M,t,e))}(this,t)),t.paused=!1,this},k.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var a=0;a<S.length;a++)t.on(S[a],this.emit.bind(this,S[a]));return this._read=function(e){o("wrapped _read",e),n&&(n=!1,t.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=r(9163)),h(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),k._fromList=C,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(t,e){return void 0===d&&(d=r(8778)),d(k,t,e)})},6356:(t,e,r)=>{"use strict";t.exports=l;var n=r(1830).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,a=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r(6143);function c(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);u.call(this,t),this._transformState={afterTransform:c.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",f)}function f(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(e,r){h(t,e,r)}))}function h(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new s;if(t._transformState.transforming)throw new a;return t.push(null)}r(5717)(l,u),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,r){r(new i("_transform()"))},l.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},9805:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(undefined),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}t.exports=k,k.WritableState=R;var a,s={deprecate:r(4927)},u=r(1631),c=r(8609).Buffer,l=("undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},f=r(3771),h=r(2402).getHighWaterMark,d=r(1830).q,p=d.ERR_INVALID_ARG_TYPE,y=d.ERR_METHOD_NOT_IMPLEMENTED,g=d.ERR_MULTIPLE_CALLBACK,_=d.ERR_STREAM_CANNOT_PIPE,b=d.ERR_STREAM_DESTROYED,m=d.ERR_STREAM_NULL_VALUES,v=d.ERR_STREAM_WRITE_AFTER_END,w=d.ERR_UNKNOWN_ENCODING,E=f.errorOrDestroy;function S(){}function R(t,e,a){n=n||r(6143),t=t||{},"boolean"!=typeof a&&(a=e instanceof n),this.objectMode=!!t.objectMode,a&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=h(this,t,"writableHighWaterMark",a),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new g;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,o){--e.pendingcb,r?(i.nextTick(o,n),i.nextTick(x,t,e),t._writableState.errorEmitted=!0,E(t,n)):(o(n),t._writableState.errorEmitted=!0,E(t,n),x(t,e))}(t,r,n,e,o);else{var a=I(r)||t.destroyed;a||r.corked||r.bufferProcessing||!r.bufferedRequest||A(t,r),n?i.nextTick(T,t,r,a,o):T(t,r,a,o)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function k(t){var e=this instanceof(n=n||r(6143));if(!e&&!a.call(k,this))return new k(t);this._writableState=new R(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),u.call(this)}function O(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new b("write")):r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function T(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),x(t,e)}function A(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),a=e.corkedRequestsFree;a.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,O(t,e,!0,e.length,i,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,f=r.callback;if(O(t,e,!1,e.objectMode?1:c.length,c,l,f),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function I(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function L(t,e){t._final((function(r){e.pendingcb--,r&&E(t,r),e.prefinished=!0,t.emit("prefinish"),x(t,e)}))}function x(t,e){var r=I(e);if(r&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,i.nextTick(L,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var n=t._readableState;(!n||n.autoDestroy&&n.endEmitted)&&t.destroy()}return r}r(5717)(k,u),R.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(R.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(a=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(t){return!!a.call(this,t)||this===k&&t&&t._writableState instanceof R}})):a=function(t){return t instanceof this},k.prototype.pipe=function(){E(this,new _)},k.prototype.write=function(t,e,r){var n,o=this._writableState,a=!1,s=!o.objectMode&&(n=t,c.isBuffer(n)||n instanceof l);return s&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(r=e,e=null),s?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(t,e){var r=new v;E(t,r),i.nextTick(e,r)}(this,r):(s||function(t,e,r,n){var o;return null===r?o=new m:"string"==typeof r||e.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(t,o),i.nextTick(n,o),!1)}(this,o,t,r))&&(o.pendingcb++,a=function(t,e,r,n,i,o){if(!r){var a=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,r)),e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=e.objectMode?1:n.length;e.length+=s;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else O(t,e,!1,s,n,i,o);return u}(this,o,s,t,e,r)),a},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||A(this,t))},k.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new w(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(t,e,r){r(new y("_write()"))},k.prototype._writev=null,k.prototype.end=function(t,e,r){var n=this._writableState;return"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,r){e.ending=!0,x(t,e),r&&(e.finished?i.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,n,r),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),k.prototype.destroy=f.destroy,k.prototype._undestroy=f.undestroy,k.prototype._destroy=function(t,e){e(t)}},9163:(t,e,r)=>{"use strict";var n,i=r(1624);function o(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var a=r(6017),s=Symbol("lastResolve"),u=Symbol("lastReject"),c=Symbol("error"),l=Symbol("ended"),f=Symbol("lastPromise"),h=Symbol("handlePromise"),d=Symbol("stream");function p(t,e){return{value:t,done:e}}function y(t){var e=t[s];if(null!==e){var r=t[d].read();null!==r&&(t[f]=null,t[s]=null,t[u]=null,e(p(r,!1)))}}function g(t){i.nextTick(y,t)}var _=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((o(n={get stream(){return this[d]},next:function(){var t=this,e=this[c];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(p(void 0,!0));if(this[d].destroyed)return new Promise((function(e,r){i.nextTick((function(){t[c]?r(t[c]):e(p(void 0,!0))}))}));var r,n=this[f];if(n)r=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(p(void 0,!0)):e[h](r,n)}),n)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[h])}return this[f]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var t=this;return new Promise((function(e,r){t[d].destroy(null,(function(t){t?r(t):e(p(void 0,!0))}))}))})),n),_);t.exports=function(t){var e,r=Object.create(b,(o(e={},d,{value:t,writable:!0}),o(e,s,{value:null,writable:!0}),o(e,u,{value:null,writable:!0}),o(e,c,{value:null,writable:!0}),o(e,l,{value:t._readableState.endEmitted,writable:!0}),o(e,h,{value:function(t,e){var n=r[d].read();n?(r[f]=null,r[s]=null,r[u]=null,t(p(n,!1))):(r[s]=t,r[u]=e)},writable:!0}),e));return r[f]=null,a(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=r[u];return null!==e&&(r[f]=null,r[s]=null,r[u]=null,e(t)),void(r[c]=t)}var n=r[s];null!==n&&(r[f]=null,r[s]=null,r[u]=null,n(p(void 0,!0))),r[l]=!0})),t.on("readable",g.bind(null,r)),r}},9151:(t,e,r)=>{"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:String(e)}var u=r(8609).Buffer,c=r(7664).inspect,l=c&&c.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r;return e=t,(r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return u.alloc(0);for(var e,r,n,i=u.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,r=i,n=a,u.prototype.copy.call(e,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?n+=i:n+=i.slice(0,t),0==(t-=o)){o===i.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=u.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var i=r.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,e}},{key:l,value:function(t,e){return c(this,i(i({},e),{},{depth:0,customInspect:!1}))}}])&&a(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}()},3771:(t,e,r)=>{"use strict";var n=r(1624);function i(t,e){a(t,e),o(t)}function o(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function a(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,s=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return s||u?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(a,this,t)):n.nextTick(a,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,t)):n.nextTick(i,r,t):e?(n.nextTick(o,r),e(t)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e)}}},6017:(t,e,r)=>{"use strict";var n=r(1830).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}t.exports=function t(e,r,o){if("function"==typeof r)return t(e,null,r);r||(r={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];t.apply(this,n)}}}(o||i);var a=r.readable||!1!==r.readable&&e.readable,s=r.writable||!1!==r.writable&&e.writable,u=function(){e.writable||l()},c=e._writableState&&e._writableState.finished,l=function(){s=!1,c=!0,a||o.call(e)},f=e._readableState&&e._readableState.endEmitted,h=function(){a=!1,f=!0,s||o.call(e)},d=function(t){o.call(e,t)},p=function(){var t;return a&&!f?(e._readableState&&e._readableState.ended||(t=new n),o.call(e,t)):s&&!c?(e._writableState&&e._writableState.ended||(t=new n),o.call(e,t)):void 0},y=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",p),e.req?y():e.on("request",y)):s&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",h),e.on("finish",l),!1!==r.error&&e.on("error",d),e.on("close",p),function(){e.removeListener("complete",l),e.removeListener("abort",p),e.removeListener("request",y),e.req&&e.req.removeListener("finish",l),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",l),e.removeListener("end",h),e.removeListener("error",d),e.removeListener("close",p)}}},8778:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},5878:(t,e,r)=>{"use strict";var n,i=r(1830).q,o=i.ERR_MISSING_ARGS,a=i.ERR_STREAM_DESTROYED;function s(t){if(t)throw t}function u(t){t()}function c(t,e){return t.pipe(e)}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var l,f=function(t){return t.length?"function"!=typeof t[t.length-1]?s:t.pop():s}(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new o("streams");var h=e.map((function(t,i){var o=i<e.length-1;return function(t,e,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var s=!1;t.on("close",(function(){s=!0})),void 0===n&&(n=r(6017)),n(t,{readable:e,writable:i},(function(t){if(t)return o(t);s=!0,o()}));var u=!1;return function(e){if(!s&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void o(e||new a("pipe"))}}(t,o,i>0,(function(t){l||(l=t),t&&h.forEach(u),o||(h.forEach(u),f(l))}))}));return e.reduce(c)}},2402:(t,e,r)=>{"use strict";var n=r(1830).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,r,i){var o=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},1631:(t,e,r)=>{t.exports=r(7187).EventEmitter},4948:(t,e,r)=>{(e=t.exports=r(5311)).Stream=e,e.Readable=e,e.Writable=r(9805),e.Duplex=r(6143),e.Transform=r(6356),e.PassThrough=r(1329),e.finished=r(6017),e.pipeline=r(5878)},809:(t,e,r)=>{var n=r(9649),i=r(1624),o=r(5210),a=r(2840),s=r(5717),u=n.alloc,c=r(4948).Readable,l=r(4948).Writable,f=r(2553).s,h=r(8054),d=parseInt("755",8),p=parseInt("644",8),y=u(1024),g=function(){},_=function(t,e){(e&=511)&&t.push(y.slice(0,512-e))},b=function(t){l.call(this),this.written=0,this._to=t,this._destroyed=!1};s(b,l),b.prototype._write=function(t,e,r){if(this.written+=t.length,this._to.push(t))return r();this._to._drain=r},b.prototype.destroy=function(){this._destroyed||(this._destroyed=!0,this.emit("close"))};var m=function(){l.call(this),this.linkname="",this._decoder=new f("utf-8"),this._destroyed=!1};s(m,l),m.prototype._write=function(t,e,r){this.linkname+=this._decoder.write(t),r()},m.prototype.destroy=function(){this._destroyed||(this._destroyed=!0,this.emit("close"))};var v=function(){l.call(this),this._destroyed=!1};s(v,l),v.prototype._write=function(t,e,r){r(new Error("No body allowed for this entry"))},v.prototype.destroy=function(){this._destroyed||(this._destroyed=!0,this.emit("close"))};var w=function(t){if(!(this instanceof w))return new w(t);c.call(this,t),this._drain=g,this._finalized=!1,this._finalizing=!1,this._destroyed=!1,this._stream=null};s(w,c),w.prototype.entry=function(t,e,r){if(this._stream)throw new Error("already piping an entry");if(!this._finalized&&!this._destroyed){"function"==typeof e&&(r=e,e=null),r||(r=g);var s=this;if(t.size&&"symlink"!==t.type||(t.size=0),t.type||(t.type=function(t){switch(t&o.S_IFMT){case o.S_IFBLK:return"block-device";case o.S_IFCHR:return"character-device";case o.S_IFDIR:return"directory";case o.S_IFIFO:return"fifo";case o.S_IFLNK:return"symlink"}return"file"}(t.mode)),t.mode||(t.mode="directory"===t.type?d:p),t.uid||(t.uid=0),t.gid||(t.gid=0),t.mtime||(t.mtime=new Date),"string"==typeof e&&(e=n.from(e)),n.isBuffer(e)){t.size=e.length,this._encode(t);var u=this.push(e);return _(s,t.size),u?i.nextTick(r):this._drain=r,new v}if("symlink"===t.type&&!t.linkname){var c=new m;return a(c,(function(e){if(e)return s.destroy(),r(e);t.linkname=c.linkname,s._encode(t),r()})),c}if(this._encode(t),"file"!==t.type&&"contiguous-file"!==t.type)return i.nextTick(r),new v;var l=new b(this);return this._stream=l,a(l,(function(e){return s._stream=null,e?(s.destroy(),r(e)):l.written!==t.size?(s.destroy(),r(new Error("size mismatch"))):(_(s,t.size),s._finalizing&&s.finalize(),void r())})),l}},w.prototype.finalize=function(){this._stream?this._finalizing=!0:this._finalized||(this._finalized=!0,this.push(y),this.push(null))},w.prototype.destroy=function(t){this._destroyed||(this._destroyed=!0,t&&this.emit("error",t),this.emit("close"),this._stream&&this._stream.destroy&&this._stream.destroy())},w.prototype._encode=function(t){if(!t.pax){var e=h.encode(t);if(e)return void this.push(e)}this._encodePax(t)},w.prototype._encodePax=function(t){var e=h.encodePax({name:t.name,linkname:t.linkname,pax:t.pax}),r={name:"PaxHeader",mode:t.mode,uid:t.uid,gid:t.gid,size:e.length,mtime:t.mtime,type:"pax-header",linkname:t.linkname&&"PaxHeader",uname:t.uname,gname:t.gname,devmajor:t.devmajor,devminor:t.devminor};this.push(h.encode(r)),this.push(e),_(this,e.length),r.size=t.size,r.type=t.type,this.push(h.encode(r))},w.prototype._read=function(t){var e=this._drain;this._drain=g,e()},t.exports=w},9221:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.downloadAndExtract=e.isValidUrl=void 0;const n=r(978),i=r(938),o=r(7435),a=r(6420),s=r(8575);e.isValidUrl=t=>{try{return!!new URL(t)}catch(t){return!1}},e.downloadAndExtract=async t=>new Promise(((e,r)=>{(0,s.parse)(t).maxBodyLength=62914560;const u=`${(0,o.tmpdir)()}/chromium-pack`,c=(0,a.extract)(u);i.https.get(t,(t=>{t.pipe(c),c.on("finish",(()=>{e(u)}))})).on("error",(t=>{(0,n.unlink)(u,(e=>{r(t)}))}))}))},2352:function(t,e,r){"use strict";var n=r(5108),i=r(1624),o=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return a(e,t),e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const c=r(978),l=u(r(5241)),f=r(1679),h=r(8575),d=r(9221),p=s(r(3229));p.install(window),p.configure({fs:"LocalStorage"},(function(t){n.log("configured",t)})),void 0!==i.env.AWS_EXECUTION_ENV&&!0===/^AWS_Lambda_nodejs(?:14|16|18)[.]x$/.test(i.env.AWS_EXECUTION_ENV)&&(void 0===i.env.FONTCONFIG_PATH&&(i.env.FONTCONFIG_PATH="/tmp/aws"),void 0===i.env.LD_LIBRARY_PATH?i.env.LD_LIBRARY_PATH="/tmp/aws/lib":!0!==i.env.LD_LIBRARY_PATH.startsWith("/tmp/aws/lib")&&(i.env.LD_LIBRARY_PATH=[...new Set(["/tmp/aws/lib",...i.env.LD_LIBRARY_PATH.split(":")])].join(":")));class y{static font(t){return!0!==y.headless?new Promise((t=>t(null))):(void 0===i.env.HOME&&(i.env.HOME="/tmp"),!0!==(0,c.existsSync)(`${i.env.HOME}/.fonts`)&&(0,c.mkdirSync)(`${i.env.HOME}/.fonts`),new Promise(((e,n)=>{!0!==/^https?:[/][/]/i.test(t)&&(t=`file://${t}`);const o=new h.URL(t),a=`${i.env.HOME}/.fonts/${o.pathname.split("/").pop()}`;if(!0===(0,c.existsSync)(a))return e(a.split("/").pop());"file:"===o.protocol?(0,c.access)(o.pathname,(t=>{if(null!=t)return n(t);(0,c.symlink)(o.pathname,a,(t=>null!=t?n(t):e(o.pathname.split("/").pop())))})):("http:"===o.protocol?r(8501).get:r(9267).get)(t,(t=>{if(200!==t.statusCode)return n(`Unexpected status code: ${t.statusCode}.`);const r=(0,c.createWriteStream)(a);r.once("error",(t=>n(t))),t.on("data",(t=>{r.write(t)})),t.once("end",(()=>{r.end((()=>e(o.pathname.split("/").pop())))}))}))})))}static get args(){const t=["--allow-running-insecure-content","--autoplay-policy=user-gesture-required","--disable-background-timer-throttling","--disable-component-update","--disable-domain-reliability","--disable-features=AudioServiceOutOfProcess,IsolateOrigins,site-per-process","--disable-ipc-flooding-protection","--disable-print-preview","--disable-dev-shm-usage","--disable-setuid-sandbox","--disable-site-isolation-trials","--disable-speech-api","--disable-web-security","--disk-cache-size=33554432","--enable-features=SharedArrayBuffer","--hide-scrollbars","--ignore-gpu-blocklist","--in-process-gpu","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--use-gl=angle","--use-angle=swiftshader","--window-size=1920,1080"];return!0===y.headless?t.push("--single-process"):t.push("--start-maximized"),t}static get defaultViewport(){return{deviceScaleFactor:1,hasTouch:!1,height:1080,isLandscape:!0,isMobile:!1,width:1920}}static async executablePath(t){if(!0===(0,c.existsSync)("/tmp/chromium"))return Promise.resolve("/tmp/chromium");if(t&&(0,d.isValidUrl)(t))return this.executablePath(await(0,d.downloadAndExtract)(t));if(t??(t=(0,f.join)(__dirname,"..","bin")),!(0,c.existsSync)(t))throw new Error(`The input directory "${t}" does not exist.`);const e=[l.default.inflate(`${t}/chromium.br`),l.default.inflate(`${t}/swiftshader.tar.br`)];return void 0!==i.env.AWS_EXECUTION_ENV&&!0===/^AWS_Lambda_nodejs(?:14|16|18)[.]x$/.test(i.env.AWS_EXECUTION_ENV)&&e.push(l.default.inflate(`${t}/aws.tar.br`)),(await Promise.all(e)).shift()}static get headless(){return void 0===i.env.IS_LOCAL&&void 0===i.env.IS_OFFLINE&&["AWS_LAMBDA_FUNCTION_NAME","FUNCTION_NAME","FUNCTION_TARGET","FUNCTIONS_EMULATOR"].some((t=>void 0!==i.env[t]))}}e.default=y},5241:(t,e,r)=>{"use strict";const n=r(978),i=r(7435),o=r(1679),a=r(6420),s=r(2635);t.exports=class{static inflate(t){const e=t.includes("swiftshader")?(0,i.tmpdir)():(0,o.join)((0,i.tmpdir)(),(0,o.basename)(t).replace(/[.](?:t(?:ar(?:[.](?:br|gz))?|br|gz)|br|gz)$/i,""));return new Promise(((r,i)=>{if(t.includes("swiftshader")){if((0,n.existsSync)(`${e}/libGLESv2.so`))return r(e)}else if(!0===(0,n.existsSync)(e))return r(e);let o=(0,n.createReadStream)(t,{highWaterMark:2**23}),u=null;!0===/[.](?:t(?:ar(?:[.](?:br|gz))?|br|gz))$/i.test(t)?(u=(0,a.extract)(e),u.once("finish",(()=>r(e)))):u=(0,n.createWriteStream)(e,{mode:448}),o.once("error",(t=>i(t))),u.once("error",(t=>i(t))),u.once("close",(()=>r(e))),!0===/(?:br|gz)$/i.test(t)?o.pipe(/br$/i.test(t)?(0,s.createBrotliDecompress)({chunkSize:2**21}):(0,s.createUnzip)({chunkSize:2**21})).pipe(u):o.pipe(u)}))}}},2511:function(t,e,r){var n;t=r.nmd(t),function(i){e&&e.nodeType,t&&t.nodeType;var o="object"==typeof global&&global;o.global!==o&&o.window!==o&&o.self;var a,s=2147483647,u=36,c=1,l=26,f=38,h=700,d=72,p=128,y="-",g=/^xn--/,_=/[^\x20-\x7E]/,b=/[\x2E\u3002\uFF0E\uFF61]/g,m={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},v=u-c,w=Math.floor,E=String.fromCharCode;function S(t){throw RangeError(m[t])}function R(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function k(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+R((t=t.replace(b,".")).split("."),e).join(".")}function O(t){for(var e,r,n=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(r=t.charCodeAt(i++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),i--):n.push(e);return n}function T(t){return R(t,(function(t){var e="";return t>65535&&(e+=E((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+E(t)})).join("")}function A(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function I(t,e,r){var n=0;for(t=r?w(t/h):t>>1,t+=w(t/e);t>v*l>>1;n+=u)t=w(t/v);return w(n+(v+1)*t/(t+f))}function L(t){var e,r,n,i,o,a,f,h,g,_,b,m=[],v=t.length,E=0,R=p,k=d;for((r=t.lastIndexOf(y))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&S("not-basic"),m.push(t.charCodeAt(n));for(i=r>0?r+1:0;i<v;){for(o=E,a=1,f=u;i>=v&&S("invalid-input"),((h=(b=t.charCodeAt(i++))-48<10?b-22:b-65<26?b-65:b-97<26?b-97:u)>=u||h>w((s-E)/a))&&S("overflow"),E+=h*a,!(h<(g=f<=k?c:f>=k+l?l:f-k));f+=u)a>w(s/(_=u-g))&&S("overflow"),a*=_;k=I(E-o,e=m.length+1,0==o),w(E/e)>s-R&&S("overflow"),R+=w(E/e),E%=e,m.splice(E++,0,R)}return T(m)}function x(t){var e,r,n,i,o,a,f,h,g,_,b,m,v,R,k,T=[];for(m=(t=O(t)).length,e=p,r=0,o=d,a=0;a<m;++a)(b=t[a])<128&&T.push(E(b));for(n=i=T.length,i&&T.push(y);n<m;){for(f=s,a=0;a<m;++a)(b=t[a])>=e&&b<f&&(f=b);for(f-e>w((s-r)/(v=n+1))&&S("overflow"),r+=(f-e)*v,e=f,a=0;a<m;++a)if((b=t[a])<e&&++r>s&&S("overflow"),b==e){for(h=r,g=u;!(h<(_=g<=o?c:g>=o+l?l:g-o));g+=u)k=h-_,R=u-_,T.push(E(A(_+k%R,0))),h=w(k/R);T.push(E(A(h,0))),o=I(r,v,n==i),r=0,++n}++r,++e}return T.join("")}a={version:"1.3.2",ucs2:{decode:O,encode:T},decode:L,encode:x,toASCII:function(t){return k(t,(function(t){return _.test(t)?"xn--"+x(t):t}))},toUnicode:function(t){return k(t,(function(t){return g.test(t)?L(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return a}.call(e,r,e,t))||(t.exports=n)}()},8575:(t,e,r)=>{"use strict";var n=r(2511),i=r(2502);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=m,e.resolve=function(t,e){return m(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?m(t,!1,!0).resolveObject(e):e},e.format=function(t){return i.isString(t)&&(t=m(t)),t instanceof o?t.format():o.prototype.format.call(t)},e.Url=o;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(c),f=["%","/","?",";","#"].concat(l),h=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},_={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r(7673);function m(t,e,r){if(t&&i.isObject(t)&&t instanceof o)return t;var n=new o;return n.parse(t,e,r),n}o.prototype.parse=function(t,e,r){if(!i.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var o=t.indexOf("?"),s=-1!==o&&o<t.indexOf("#")?"?":"#",c=t.split(s);c[0]=c[0].replace(/\\/g,"/");var m=t=c.join(s);if(m=m.trim(),!r&&1===t.split("#").length){var v=u.exec(m);if(v)return this.path=m,this.href=m,this.pathname=v[1],v[2]?(this.search=v[2],this.query=e?b.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=a.exec(m);if(w){var E=(w=w[0]).toLowerCase();this.protocol=E,m=m.substr(w.length)}if(r||w||m.match(/^\/\/[^@\/]+@[^@\/]+/)){var S="//"===m.substr(0,2);!S||w&&g[w]||(m=m.substr(2),this.slashes=!0)}if(!g[w]&&(S||w&&!_[w])){for(var R,k,O=-1,T=0;T<h.length;T++)-1!==(A=m.indexOf(h[T]))&&(-1===O||A<O)&&(O=A);for(-1!==(k=-1===O?m.lastIndexOf("@"):m.lastIndexOf("@",O))&&(R=m.slice(0,k),m=m.slice(k+1),this.auth=decodeURIComponent(R)),O=-1,T=0;T<f.length;T++){var A;-1!==(A=m.indexOf(f[T]))&&(-1===O||A<O)&&(O=A)}-1===O&&(O=m.length),this.host=m.slice(0,O),m=m.slice(O),this.parseHost(),this.hostname=this.hostname||"";var I="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!I)for(var L=this.hostname.split(/\./),x=(T=0,L.length);T<x;T++){var N=L[T];if(N&&!N.match(d)){for(var P="",D=0,F=N.length;D<F;D++)N.charCodeAt(D)>127?P+="x":P+=N[D];if(!P.match(d)){var M=L.slice(0,T),j=L.slice(T+1),C=N.match(p);C&&(M.push(C[1]),j.unshift(C[2])),j.length&&(m="/"+j.join(".")+m),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),I||(this.hostname=n.toASCII(this.hostname));var U=this.port?":"+this.port:"",B=this.hostname||"";this.host=B+U,this.href+=this.host,I&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==m[0]&&(m="/"+m))}if(!y[E])for(T=0,x=l.length;T<x;T++){var z=l[T];if(-1!==m.indexOf(z)){var q=encodeURIComponent(z);q===z&&(q=escape(z)),m=m.split(z).join(q)}}var W=m.indexOf("#");-1!==W&&(this.hash=m.substr(W),m=m.slice(0,W));var H=m.indexOf("?");if(-1!==H?(this.search=m.substr(H),this.query=m.substr(H+1),e&&(this.query=b.parse(this.query)),m=m.slice(0,H)):e&&(this.search="",this.query={}),m&&(this.pathname=m),_[E]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"";var G=this.search||"";this.path=U+G}return this.href=this.format(),this},o.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,a="";this.host?o=t+this.host:this.hostname&&(o=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(a=b.stringify(this.query));var s=this.search||a&&"?"+a||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||_[e])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),e+o+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(s=s.replace("#","%23"))+n},o.prototype.resolve=function(t){return this.resolveObject(m(t,!1,!0)).format()},o.prototype.resolveObject=function(t){if(i.isString(t)){var e=new o;e.parse(t,!1,!0),t=e}for(var r=new o,n=Object.keys(this),a=0;a<n.length;a++){var s=n[a];r[s]=this[s]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var u=Object.keys(t),c=0;c<u.length;c++){var l=u[c];"protocol"!==l&&(r[l]=t[l])}return _[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!_[t.protocol]){for(var f=Object.keys(t),h=0;h<f.length;h++){var d=f[h];r[d]=t[d]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||g[t.protocol])r.pathname=t.pathname;else{for(var p=(t.pathname||"").split("/");p.length&&!(t.host=p.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),r.pathname=p.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var y=r.pathname||"",b=r.search||"";r.path=y+b}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var m=r.pathname&&"/"===r.pathname.charAt(0),v=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=v||m||r.host&&t.pathname,E=w,S=r.pathname&&r.pathname.split("/")||[],R=(p=t.pathname&&t.pathname.split("/")||[],r.protocol&&!_[r.protocol]);if(R&&(r.hostname="",r.port=null,r.host&&(""===S[0]?S[0]=r.host:S.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===p[0]?p[0]=t.host:p.unshift(t.host)),t.host=null),w=w&&(""===p[0]||""===S[0])),v)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,S=p;else if(p.length)S||(S=[]),S.pop(),S=S.concat(p),r.search=t.search,r.query=t.query;else if(!i.isNullOrUndefined(t.search))return R&&(r.hostname=r.host=S.shift(),(I=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=I.shift(),r.host=r.hostname=I.shift())),r.search=t.search,r.query=t.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r;if(!S.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var k=S.slice(-1)[0],O=(r.host||t.host||S.length>1)&&("."===k||".."===k)||""===k,T=0,A=S.length;A>=0;A--)"."===(k=S[A])?S.splice(A,1):".."===k?(S.splice(A,1),T++):T&&(S.splice(A,1),T--);if(!w&&!E)for(;T--;T)S.unshift("..");!w||""===S[0]||S[0]&&"/"===S[0].charAt(0)||S.unshift(""),O&&"/"!==S.join("/").substr(-1)&&S.push("");var I,L=""===S[0]||S[0]&&"/"===S[0].charAt(0);return R&&(r.hostname=r.host=L?"":S.length?S.shift():"",(I=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=I.shift(),r.host=r.hostname=I.shift())),(w=w||r.host&&S.length)&&!L&&S.unshift(""),S.length?r.pathname=S.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var t=this.host,e=s.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},2502:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},4927:(t,e,r)=>{var n=r(5108);function i(t){try{if(!global.localStorage)return!1}catch(t){return!1}var e=global.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(i("noDeprecation"))return t;var r=!1;return function(){if(!r){if(i("throwDeprecation"))throw new Error(e);i("traceDeprecation")?n.trace(e):n.warn(e),r=!0}return t.apply(this,arguments)}}},384:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},5955:(t,e,r)=>{"use strict";var n=r(2584),i=r(8662),o=r(6430),a=r(5692);function s(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,l=s(Object.prototype.toString),f=s(Number.prototype.valueOf),h=s(String.prototype.valueOf),d=s(Boolean.prototype.valueOf);if(u)var p=s(BigInt.prototype.valueOf);if(c)var y=s(Symbol.prototype.valueOf);function g(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function _(t){return"[object Map]"===l(t)}function b(t){return"[object Set]"===l(t)}function m(t){return"[object WeakMap]"===l(t)}function v(t){return"[object WeakSet]"===l(t)}function w(t){return"[object ArrayBuffer]"===l(t)}function E(t){return"undefined"!=typeof ArrayBuffer&&(w.working?w(t):t instanceof ArrayBuffer)}function S(t){return"[object DataView]"===l(t)}function R(t){return"undefined"!=typeof DataView&&(S.working?S(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=i,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||R(t)},e.isUint8Array=function(t){return"Uint8Array"===o(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===o(t)},e.isUint16Array=function(t){return"Uint16Array"===o(t)},e.isUint32Array=function(t){return"Uint32Array"===o(t)},e.isInt8Array=function(t){return"Int8Array"===o(t)},e.isInt16Array=function(t){return"Int16Array"===o(t)},e.isInt32Array=function(t){return"Int32Array"===o(t)},e.isFloat32Array=function(t){return"Float32Array"===o(t)},e.isFloat64Array=function(t){return"Float64Array"===o(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===o(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===o(t)},_.working="undefined"!=typeof Map&&_(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(_.working?_(t):t instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(b.working?b(t):t instanceof Set)},m.working="undefined"!=typeof WeakMap&&m(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(m.working?m(t):t instanceof WeakMap)},v.working="undefined"!=typeof WeakSet&&v(new WeakSet),e.isWeakSet=function(t){return v(t)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),e.isArrayBuffer=E,S.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&S(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=R;var k="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function O(t){return"[object SharedArrayBuffer]"===l(t)}function T(t){return void 0!==k&&(void 0===O.working&&(O.working=O(new k)),O.working?O(t):t instanceof k)}function A(t){return g(t,f)}function I(t){return g(t,h)}function L(t){return g(t,d)}function x(t){return u&&g(t,p)}function N(t){return c&&g(t,y)}e.isSharedArrayBuffer=T,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===l(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===l(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===l(t)},e.isGeneratorObject=function(t){return"[object Generator]"===l(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===l(t)},e.isNumberObject=A,e.isStringObject=I,e.isBooleanObject=L,e.isBigIntObject=x,e.isSymbolObject=N,e.isBoxedPrimitive=function(t){return A(t)||I(t)||L(t)||x(t)||N(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(E(t)||T(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},9539:(t,e,r)=>{var n=r(1624),i=r(5108),o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},a=/%[sdj%]/g;e.format=function(t){if(!v(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(l(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,i=n.length,o=String(t).replace(a,(function(t){if("%%"===t)return"%";if(r>=i)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),s=n[r];r<i;s=n[++r])b(s)||!S(s)?o+=" "+s:o+=" "+l(s);return o},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?i.trace(r):i.error(r),o=!0}return t.apply(this,arguments)}};var s={},u=/^$/;if(n.env.NODE_DEBUG){var c=n.env.NODE_DEBUG;c=c.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),u=new RegExp("^"+c+"$","i")}function l(t,r){var n={seen:[],stylize:h};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),_(r)?n.showHidden=r:r&&e._extend(n,r),w(n.showHidden)&&(n.showHidden=!1),w(n.depth)&&(n.depth=2),w(n.colors)&&(n.colors=!1),w(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=f),d(n,t,n.depth)}function f(t,e){var r=l.styles[e];return r?"["+l.colors[r][0]+"m"+t+"["+l.colors[r][1]+"m":t}function h(t,e){return t}function d(t,r,n){if(t.customInspect&&r&&O(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,t);return v(i)||(i=d(t,i,n)),i}var o=function(t,e){if(w(e))return t.stylize("undefined","undefined");if(v(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return m(e)?t.stylize(""+e,"number"):_(e)?t.stylize(""+e,"boolean"):b(e)?t.stylize("null","null"):void 0}(t,r);if(o)return o;var a=Object.keys(r),s=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),k(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return p(r);if(0===a.length){if(O(r)){var u=r.name?": "+r.name:"";return t.stylize("[Function"+u+"]","special")}if(E(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(R(r))return t.stylize(Date.prototype.toString.call(r),"date");if(k(r))return p(r)}var c,l="",f=!1,h=["{","}"];return g(r)&&(f=!0,h=["[","]"]),O(r)&&(l=" [Function"+(r.name?": "+r.name:"")+"]"),E(r)&&(l=" "+RegExp.prototype.toString.call(r)),R(r)&&(l=" "+Date.prototype.toUTCString.call(r)),k(r)&&(l=" "+p(r)),0!==a.length||f&&0!=r.length?n<0?E(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),c=f?function(t,e,r,n,i){for(var o=[],a=0,s=e.length;a<s;++a)L(e,String(a))?o.push(y(t,e,r,n,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(y(t,e,r,n,i,!0))})),o}(t,r,n,s,a):a.map((function(e){return y(t,r,n,s,e,f)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(c,l,h)):h[0]+l+h[1]}function p(t){return"["+Error.prototype.toString.call(t)+"]"}function y(t,e,r,n,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(s=t.stylize("[Setter]","special")),L(n,i)||(a="["+i+"]"),s||(t.seen.indexOf(u.value)<0?(s=b(r)?d(t,u.value,null):d(t,u.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),w(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function g(t){return Array.isArray(t)}function _(t){return"boolean"==typeof t}function b(t){return null===t}function m(t){return"number"==typeof t}function v(t){return"string"==typeof t}function w(t){return void 0===t}function E(t){return S(t)&&"[object RegExp]"===T(t)}function S(t){return"object"==typeof t&&null!==t}function R(t){return S(t)&&"[object Date]"===T(t)}function k(t){return S(t)&&("[object Error]"===T(t)||t instanceof Error)}function O(t){return"function"==typeof t}function T(t){return Object.prototype.toString.call(t)}function A(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!s[t])if(u.test(t)){var r=n.pid;s[t]=function(){var n=e.format.apply(e,arguments);i.error("%s %d: %s",t,r,n)}}else s[t]=function(){};return s[t]},e.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(5955),e.isArray=g,e.isBoolean=_,e.isNull=b,e.isNullOrUndefined=function(t){return null==t},e.isNumber=m,e.isString=v,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=w,e.isRegExp=E,e.types.isRegExp=E,e.isObject=S,e.isDate=R,e.types.isDate=R,e.isError=k,e.types.isNativeError=k,e.isFunction=O,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(384);var I=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function L(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;i.log("%s - %s",(r=[A((t=new Date).getHours()),A(t.getMinutes()),A(t.getSeconds())].join(":"),[t.getDate(),I[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=r(5717),e._extend=function(t,e){if(!e||!S(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var x="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function N(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(x&&t[x]){var e;if("function"!=typeof(e=t[x]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,x,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,i)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),x&&Object.defineProperty(e,x,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=x,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var i=e.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};t.apply(this,e).then((function(t){n.nextTick(a.bind(null,null,t))}),(function(t){n.nextTick(N.bind(null,t,a))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,o(t)),e}},6430:(t,e,r)=>{"use strict";var n=r(4029),i=r(3083),o=r(1924),a=r(7296),s=o("Object.prototype.toString"),u=r(6410)(),c="undefined"==typeof globalThis?global:globalThis,l=i(),f=o("String.prototype.slice"),h={},d=Object.getPrototypeOf;u&&a&&d&&n(l,(function(t){if("function"==typeof c[t]){var e=new c[t];if(Symbol.toStringTag in e){var r=d(e),n=a(r,Symbol.toStringTag);if(!n){var i=d(r);n=a(i,Symbol.toStringTag)}h[t]=n.get}}}));var p=r(5692);t.exports=function(t){return!!p(t)&&(u&&Symbol.toStringTag in t?function(t){var e=!1;return n(h,(function(r,n){if(!e)try{var i=r.call(t);i===n&&(e=i)}catch(t){}})),e}(t):f(s(t),8,-1))}},2479:t=>{t.exports=function t(e,r){if(e&&r)return t(e)(r);if("function"!=typeof e)throw new TypeError("need wrapper function");return Object.keys(e).forEach((function(t){n[t]=e[t]})),n;function n(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];var n=e.apply(this,t),i=t[t.length-1];return"function"==typeof n&&n!==i&&Object.keys(i).forEach((function(t){n[t]=i[t]})),n}}},7529:t=>{t.exports=function(){for(var t={},r=0;r<arguments.length;r++){var n=arguments[r];for(var i in n)e.call(n,i)&&(t[i]=n[i])}return t};var e=Object.prototype.hasOwnProperty},498:()=>{},1379:()=>{},9862:()=>{},964:()=>{},1408:()=>{},3646:()=>{},7664:()=>{},9545:()=>{},3083:t=>{"use strict";var e=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],r="undefined"==typeof globalThis?global:globalThis;t.exports=function(){for(var t=[],n=0;n<e.length;n++)"function"==typeof r[e[n]]&&(t[t.length]=e[n]);return t}},3208:t=>{"use strict";t.exports=JSON.parse('{"O_RDONLY":0,"O_WRONLY":1,"O_RDWR":2,"S_IFMT":61440,"S_IFREG":32768,"S_IFDIR":16384,"S_IFCHR":8192,"S_IFBLK":24576,"S_IFIFO":4096,"S_IFLNK":40960,"S_IFSOCK":49152,"O_CREAT":512,"O_EXCL":2048,"O_NOCTTY":131072,"O_TRUNC":1024,"O_APPEND":8,"O_DIRECTORY":1048576,"O_NOFOLLOW":256,"O_SYNC":128,"O_SYMLINK":2097152,"O_NONBLOCK":4,"S_IRWXU":448,"S_IRUSR":256,"S_IWUSR":128,"S_IXUSR":64,"S_IRWXG":56,"S_IRGRP":32,"S_IWGRP":16,"S_IXGRP":8,"S_IRWXO":7,"S_IROTH":4,"S_IWOTH":2,"S_IXOTH":1,"E2BIG":7,"EACCES":13,"EADDRINUSE":48,"EADDRNOTAVAIL":49,"EAFNOSUPPORT":47,"EAGAIN":35,"EALREADY":37,"EBADF":9,"EBADMSG":94,"EBUSY":16,"ECANCELED":89,"ECHILD":10,"ECONNABORTED":53,"ECONNREFUSED":61,"ECONNRESET":54,"EDEADLK":11,"EDESTADDRREQ":39,"EDOM":33,"EDQUOT":69,"EEXIST":17,"EFAULT":14,"EFBIG":27,"EHOSTUNREACH":65,"EIDRM":90,"EILSEQ":92,"EINPROGRESS":36,"EINTR":4,"EINVAL":22,"EIO":5,"EISCONN":56,"EISDIR":21,"ELOOP":62,"EMFILE":24,"EMLINK":31,"EMSGSIZE":40,"EMULTIHOP":95,"ENAMETOOLONG":63,"ENETDOWN":50,"ENETRESET":52,"ENETUNREACH":51,"ENFILE":23,"ENOBUFS":55,"ENODATA":96,"ENODEV":19,"ENOENT":2,"ENOEXEC":8,"ENOLCK":77,"ENOLINK":97,"ENOMEM":12,"ENOMSG":91,"ENOPROTOOPT":42,"ENOSPC":28,"ENOSR":98,"ENOSTR":99,"ENOSYS":78,"ENOTCONN":57,"ENOTDIR":20,"ENOTEMPTY":66,"ENOTSOCK":38,"ENOTSUP":45,"ENOTTY":25,"ENXIO":6,"EOPNOTSUPP":102,"EOVERFLOW":84,"EPERM":1,"EPIPE":32,"EPROTO":100,"EPROTONOSUPPORT":43,"EPROTOTYPE":41,"ERANGE":34,"EROFS":30,"ESPIPE":29,"ESRCH":3,"ESTALE":70,"ETIME":101,"ETIMEDOUT":60,"ETXTBSY":26,"EWOULDBLOCK":35,"EXDEV":18,"SIGHUP":1,"SIGINT":2,"SIGQUIT":3,"SIGILL":4,"SIGTRAP":5,"SIGABRT":6,"SIGIOT":6,"SIGBUS":10,"SIGFPE":8,"SIGKILL":9,"SIGUSR1":30,"SIGSEGV":11,"SIGUSR2":31,"SIGPIPE":13,"SIGALRM":14,"SIGTERM":15,"SIGCHLD":20,"SIGCONT":19,"SIGSTOP":17,"SIGTSTP":18,"SIGTTIN":21,"SIGTTOU":22,"SIGURG":16,"SIGXCPU":24,"SIGXFSZ":25,"SIGVTALRM":26,"SIGPROF":27,"SIGWINCH":28,"SIGIO":23,"SIGSYS":12,"SSL_OP_ALL":2147486719,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION":262144,"SSL_OP_CIPHER_SERVER_PREFERENCE":4194304,"SSL_OP_CISCO_ANYCONNECT":32768,"SSL_OP_COOKIE_EXCHANGE":8192,"SSL_OP_CRYPTOPRO_TLSEXT_BUG":2147483648,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS":2048,"SSL_OP_EPHEMERAL_RSA":0,"SSL_OP_LEGACY_SERVER_CONNECT":4,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER":32,"SSL_OP_MICROSOFT_SESS_ID_BUG":1,"SSL_OP_MSIE_SSLV2_RSA_PADDING":0,"SSL_OP_NETSCAPE_CA_DN_BUG":536870912,"SSL_OP_NETSCAPE_CHALLENGE_BUG":2,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG":1073741824,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG":8,"SSL_OP_NO_COMPRESSION":131072,"SSL_OP_NO_QUERY_MTU":4096,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION":65536,"SSL_OP_NO_SSLv2":16777216,"SSL_OP_NO_SSLv3":33554432,"SSL_OP_NO_TICKET":16384,"SSL_OP_NO_TLSv1":67108864,"SSL_OP_NO_TLSv1_1":268435456,"SSL_OP_NO_TLSv1_2":134217728,"SSL_OP_PKCS1_CHECK_1":0,"SSL_OP_PKCS1_CHECK_2":0,"SSL_OP_SINGLE_DH_USE":1048576,"SSL_OP_SINGLE_ECDH_USE":524288,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG":128,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG":0,"SSL_OP_TLS_BLOCK_PADDING_BUG":512,"SSL_OP_TLS_D5_BUG":256,"SSL_OP_TLS_ROLLBACK_BUG":8388608,"ENGINE_METHOD_DSA":2,"ENGINE_METHOD_DH":4,"ENGINE_METHOD_RAND":8,"ENGINE_METHOD_ECDH":16,"ENGINE_METHOD_ECDSA":32,"ENGINE_METHOD_CIPHERS":64,"ENGINE_METHOD_DIGESTS":128,"ENGINE_METHOD_STORE":256,"ENGINE_METHOD_PKEY_METHS":512,"ENGINE_METHOD_PKEY_ASN1_METHS":1024,"ENGINE_METHOD_ALL":65535,"ENGINE_METHOD_NONE":0,"DH_CHECK_P_NOT_SAFE_PRIME":2,"DH_CHECK_P_NOT_PRIME":1,"DH_UNABLE_TO_CHECK_GENERATOR":4,"DH_NOT_SUITABLE_GENERATOR":8,"NPN_ENABLED":1,"RSA_PKCS1_PADDING":1,"RSA_SSLV23_PADDING":2,"RSA_NO_PADDING":3,"RSA_PKCS1_OAEP_PADDING":4,"RSA_X931_PADDING":5,"RSA_PKCS1_PSS_PADDING":6,"POINT_CONVERSION_COMPRESSED":2,"POINT_CONVERSION_UNCOMPRESSED":4,"POINT_CONVERSION_HYBRID":6,"F_OK":0,"R_OK":4,"W_OK":2,"X_OK":1,"UV_UDP_REUSEADDR":4}')}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var n=r(2352);chromey=n.default})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,